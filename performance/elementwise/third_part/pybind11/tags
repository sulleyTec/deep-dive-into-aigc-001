!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	tests/test_builtin_casters.py	/^    class A:$/;"	c	function:test_bool_caster
A	tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	m	class:E1	file:
A	tests/test_numpy_dtypes.cpp	/^struct A {};$/;"	s	class:E1	file:
A	tests/test_pytypes.py	/^    class A:$/;"	c	function:test_str
A	tests/test_smart_ptr.cpp	/^        A() { print_created(this); }$/;"	f	struct:__anon9::SharedPtrRef::A
A	tests/test_smart_ptr.cpp	/^        A(const A &) { print_copy_created(this); }$/;"	f	struct:__anon9::SharedPtrRef::A
A	tests/test_smart_ptr.cpp	/^    struct A {$/;"	s	struct:__anon9::SharedPtrRef	file:
ADD_FUNCTION	tests/cross_module_gil_utils.cpp	85;"	d	file:
ALLSPHINXOPTS	docs/Makefile	/^ALLSPHINXOPTS   = -d $(BUILDDIR)\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
ALL_BASIC_TESTS	tests/test_gil_scoped.py	/^ALL_BASIC_TESTS = ($/;"	v
ALL_BASIC_TESTS_PLUS_INTENTIONAL_DEADLOCK	tests/test_gil_scoped.py	/^ALL_BASIC_TESTS_PLUS_INTENTIONAL_DEADLOCK = ALL_BASIC_TESTS + (_intentional_deadlock,)$/;"	v
API_PyArrayDescr_Type	include/pybind11/numpy.h	/^        API_PyArrayDescr_Type = 3,$/;"	e	enum:npy_api::functions
API_PyArray_CopyInto	include/pybind11/numpy.h	/^        API_PyArray_CopyInto = 82,$/;"	e	enum:npy_api::functions
API_PyArray_DescrConverter	include/pybind11/numpy.h	/^        API_PyArray_DescrConverter = 174,$/;"	e	enum:npy_api::functions
API_PyArray_DescrFromScalar	include/pybind11/numpy.h	/^        API_PyArray_DescrFromScalar = 57,$/;"	e	enum:npy_api::functions
API_PyArray_DescrFromType	include/pybind11/numpy.h	/^        API_PyArray_DescrFromType = 45,$/;"	e	enum:npy_api::functions
API_PyArray_DescrNewFromType	include/pybind11/numpy.h	/^        API_PyArray_DescrNewFromType = 96,$/;"	e	enum:npy_api::functions
API_PyArray_EquivTypes	include/pybind11/numpy.h	/^        API_PyArray_EquivTypes = 182,$/;"	e	enum:npy_api::functions
API_PyArray_FromAny	include/pybind11/numpy.h	/^        API_PyArray_FromAny = 69,$/;"	e	enum:npy_api::functions
API_PyArray_GetArrayParamsFromObject	include/pybind11/numpy.h	/^        API_PyArray_GetArrayParamsFromObject = 278,$/;"	e	enum:npy_api::functions
API_PyArray_GetNDArrayCFeatureVersion	include/pybind11/numpy.h	/^        API_PyArray_GetNDArrayCFeatureVersion = 211,$/;"	e	enum:npy_api::functions
API_PyArray_NewCopy	include/pybind11/numpy.h	/^        API_PyArray_NewCopy = 85,$/;"	e	enum:npy_api::functions
API_PyArray_NewFromDescr	include/pybind11/numpy.h	/^        API_PyArray_NewFromDescr = 94,$/;"	e	enum:npy_api::functions
API_PyArray_Newshape	include/pybind11/numpy.h	/^        API_PyArray_Newshape = 135,$/;"	e	enum:npy_api::functions
API_PyArray_Resize	include/pybind11/numpy.h	/^        API_PyArray_Resize = 80,$/;"	e	enum:npy_api::functions
API_PyArray_SetBaseObject	include/pybind11/numpy.h	/^        API_PyArray_SetBaseObject = 282$/;"	e	enum:npy_api::functions
API_PyArray_Squeeze	include/pybind11/numpy.h	/^        API_PyArray_Squeeze = 136,$/;"	e	enum:npy_api::functions
API_PyArray_Type	include/pybind11/numpy.h	/^        API_PyArray_Type = 2,$/;"	e	enum:npy_api::functions
API_PyArray_View	include/pybind11/numpy.h	/^        API_PyArray_View = 137,$/;"	e	enum:npy_api::functions
API_PyVoidArrType_Type	include/pybind11/numpy.h	/^        API_PyVoidArrType_Type = 39,$/;"	e	enum:npy_api::functions
AR	tests/test_virtual_functions.py	/^    class AR(m.A_Repeat):$/;"	c	function:test_inherited_virtuals
AT	tests/test_virtual_functions.py	/^    class AT(m.A_Tpl):$/;"	c	function:test_inherited_virtuals
A_METHODS	tests/test_virtual_functions.cpp	/^    A_METHODS;$/;"	m	class:A_Tpl	file:
A_METHODS	tests/test_virtual_functions.cpp	424;"	d	file:
A_Repeat	tests/test_virtual_functions.cpp	/^class A_Repeat {$/;"	c	file:
A_Tpl	tests/test_virtual_functions.cpp	/^class A_Tpl {$/;"	c	file:
Adder	tests/test_virtual_functions.cpp	/^struct Adder : AdderBase {$/;"	s	file:
Adder	tests/test_virtual_functions.py	/^    class Adder(m.Adder):$/;"	c	function:test_recursive_dispatch_issue
AdderBase	tests/test_virtual_functions.cpp	/^struct AdderBase {$/;"	s	file:
Animal	tests/test_tagbased_polymorphic.cpp	/^    Animal(const std::string &_name, Kind _kind) : kind(_kind), name(_name) {}$/;"	f	class:Animal::Kind
Animal	tests/test_tagbased_polymorphic.cpp	/^struct Animal {$/;"	s	file:
ArgAlwaysConverts	tests/test_custom_type_casters.cpp	/^class ArgAlwaysConverts {};$/;"	c	file:
ArgInspector1	tests/test_custom_type_casters.cpp	/^class ArgInspector1 {$/;"	c	file:
ArgInspector2	tests/test_custom_type_casters.cpp	/^class ArgInspector2 {$/;"	c	file:
ArrayStruct	tests/test_numpy_dtypes.cpp	/^struct ArrayStruct {$/;"	s	file:
B	tests/test_builtin_casters.py	/^    class B:$/;"	c	function:test_bool_caster
B	tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	m	class:E1	file:
B	tests/test_numpy_dtypes.cpp	/^struct B {};$/;"	s	class:E1	file:
B	tests/test_smart_ptr.cpp	/^        B() { print_created(this); }$/;"	f	struct:__anon9::SharedFromThisRef::B
B	tests/test_smart_ptr.cpp	/^        B(const B &) : std::enable_shared_from_this<B>() { print_copy_created(this); }$/;"	f	struct:__anon9::SharedFromThisRef::B
B	tests/test_smart_ptr.cpp	/^    struct B : std::enable_shared_from_this<B> {$/;"	s	struct:__anon9::SharedFromThisRef	file:
B	tests/test_virtual_functions.py	/^    class B(m.A):$/;"	c	function:test_alias_delay_initialization1
B1	tests/test_multiple_inheritance.py	/^    class B1:$/;"	c	function:test_multiple_inheritance_python
B2	tests/test_multiple_inheritance.py	/^    class B2(B1):$/;"	c	function:test_multiple_inheritance_python
B2	tests/test_virtual_functions.py	/^    class B2(m.A2):$/;"	c	function:test_alias_delay_initialization2
B3	tests/test_multiple_inheritance.py	/^    class B3:$/;"	c	function:test_multiple_inheritance_python
B4	tests/test_multiple_inheritance.py	/^    class B4(B3, B2):$/;"	c	function:test_multiple_inheritance_python
BT	tests/test_virtual_functions.py	/^    class BT(m.B_Tpl):$/;"	c	function:test_inherited_virtuals
BUILDDIR	docs/Makefile	/^BUILDDIR      = .build$/;"	m
B_METHODS	tests/test_virtual_functions.cpp	442;"	d	file:
B_Repeat	tests/test_virtual_functions.cpp	/^class B_Repeat : public A_Repeat {$/;"	c	file:
B_Tpl	tests/test_virtual_functions.cpp	/^class B_Tpl : public A_Tpl {$/;"	c	file:
BadLen	tests/test_sequences_and_iterators.py	/^    class BadLen(RuntimeError):$/;"	c	function:test_sequence_length
Base	tests/test_virtual_functions.cpp	/^struct Base {$/;"	s	file:
Base1	tests/test_multiple_inheritance.py	/^    class Base1:$/;"	c	function:test_multiple_inheritance_mix1
Base12a	tests/test_multiple_inheritance.cpp	/^    Base12a(int i, int j) : Base1a(i), Base2a(j) {}$/;"	f	struct:__anon10::Base12a
Base12a	tests/test_multiple_inheritance.cpp	/^struct Base12a : Base1a, Base2a {$/;"	s	namespace:__anon10	file:
Base1a	tests/test_multiple_inheritance.cpp	/^    explicit Base1a(int i) : i(i) {}$/;"	f	struct:__anon10::Base1a
Base1a	tests/test_multiple_inheritance.cpp	/^struct Base1a {$/;"	s	namespace:__anon10	file:
Base2	tests/test_multiple_inheritance.py	/^    class Base2:$/;"	c	function:test_multiple_inheritance_mix2
Base2a	tests/test_multiple_inheritance.cpp	/^    explicit Base2a(int i) : i(i) {}$/;"	f	struct:__anon10::Base2a
Base2a	tests/test_multiple_inheritance.cpp	/^struct Base2a {$/;"	s	namespace:__anon10	file:
BaseN	tests/test_multiple_inheritance.cpp	/^    explicit BaseN(int i) : i(i) {}$/;"	f	struct:__anon10::BaseN
BaseN	tests/test_multiple_inheritance.cpp	/^struct BaseN {$/;"	s	namespace:__anon10	file:
Breaks1	tests/test_class.cpp	/^        Breaks1;$/;"	t	file:
Breaks2	tests/test_class.cpp	/^typedef py::class_<BreaksBase<-2>, BreaksTramp<-2>, BreaksTramp<-2>> Breaks2;$/;"	t	file:
Breaks3	tests/test_class.cpp	/^        Breaks3;$/;"	t	file:
Breaks4	tests/test_class.cpp	/^    Breaks4;$/;"	t	file:
Breaks5	tests/test_class.cpp	/^typedef py::class_<BreaksBase<-5>, BreaksTramp<-4>> Breaks5;$/;"	t	file:
Breaks8	tests/test_class.cpp	/^typedef py::class_<BreaksBase<-8>, BreaksBase<-6>, BreaksBase<-7>> Breaks8;$/;"	t	file:
BreaksBase	tests/test_class.cpp	/^class BreaksBase {$/;"	c	file:
BreaksBase	tests/test_class.cpp	/^struct BreaksBase<-8> : BreaksBase<-6>, BreaksBase<-7> {};$/;"	s	file:
BreaksTramp	tests/test_class.cpp	/^class BreaksTramp : public BreaksBase<N> {};$/;"	c	file:
BrokenTF1	tests/test_factory_constructors.py	/^    class BrokenTF1(m.TestFactory1):$/;"	c	function:test_invalid_self
BrokenTF6	tests/test_factory_constructors.py	/^    class BrokenTF6(m.TestFactory6):$/;"	c	function:test_invalid_self
C	tests/test_class.py	/^    class C(m.ProtectedB):$/;"	c	function:test_bind_protected_functions
C	tests/test_constants_and_functions.cpp	/^struct C {$/;"	s	namespace:test_exc_sp	file:
C	tests/test_pytypes.py	/^    class C:$/;"	c	function:test_weakref_err
C	tests/test_smart_ptr.cpp	/^    C() { print_created(this); }$/;"	f	struct:C
C	tests/test_smart_ptr.cpp	/^struct C {$/;"	s	file:
C1	tests/test_operator_overloading.cpp	/^class C1 {};$/;"	c	file:
C2	tests/test_operator_overloading.cpp	/^class C2 {};$/;"	c	file:
CATCH_CONFIG_RUNNER	tests/test_embed/catch.cpp	15;"	d	file:
CCR	tests/test_virtual_functions.py	/^    class CCR(CR):$/;"	c	function:test_inherited_virtuals
CCT	tests/test_virtual_functions.py	/^    class CCT(CT):$/;"	c	function:test_inherited_virtuals
CCompilerMethod	pybind11/setup_helpers.py	/^CCompilerMethod = Callable[$/;"	v
CHECK_ALIAS	tests/test_class.cpp	589;"	d	file:
CHECK_BASE	tests/test_class.cpp	578;"	d	file:
CHECK_BROKEN	tests/test_class.cpp	624;"	d	file:
CHECK_HOLDER	tests/test_class.cpp	606;"	d	file:
CHECK_NOALIAS	tests/test_class.cpp	594;"	d	file:
COMMON_FILE	setup.py	/^COMMON_FILE = Path("include\/pybind11\/detail\/common.h")$/;"	v
CONST_NAME_TESTS	tests/test_const_name.cpp	8;"	d	file:
CPP_NAME_FORMAT_NP_DTYPE_TABLE	tests/test_buffers.py	/^CPP_NAME_FORMAT_NP_DTYPE_TABLE = [$/;"	v
CPP_NAME_FORMAT_TABLE	tests/test_buffers.py	/^CPP_NAME_FORMAT_TABLE = [$/;"	v
CPP_NAME_NP_DTYPE_TABLE	tests/test_buffers.py	/^CPP_NAME_NP_DTYPE_TABLE = [$/;"	v
CPYTHON	tests/env.py	/^CPYTHON = platform.python_implementation() == "CPython"$/;"	v
CR	tests/test_virtual_functions.py	/^    class CR(m.C_Repeat):$/;"	c	function:test_inherited_virtuals
CROSS_MODULE	tests/test_gil_scoped.cpp	17;"	d	file:
CT	tests/test_virtual_functions.py	/^    class CT(m.C_Tpl):$/;"	c	function:test_inherited_virtuals
C_METHODS	tests/test_virtual_functions.cpp	452;"	d	file:
C_Repeat	tests/test_virtual_functions.cpp	/^class C_Repeat : public B_Repeat {$/;"	c	file:
C_Tpl	tests/test_virtual_functions.cpp	/^class C_Tpl : public B_Tpl {$/;"	c	file:
Capture	tests/conftest.py	/^class Capture:$/;"	c
Cat	tests/test_tagbased_polymorphic.cpp	/^        Cat = 200,$/;"	m	class:Animal::Kind	file:
Cat	tests/test_tagbased_polymorphic.cpp	/^    explicit Cat(const std::string &_name, Kind _kind = Kind::Cat) : Animal(_name, _kind) {}$/;"	f	struct:Animal::Cat
Cat	tests/test_tagbased_polymorphic.cpp	/^struct Cat : Animal {$/;"	s	struct:Animal	file:
Chihuahua	tests/test_tagbased_polymorphic.cpp	/^        Chihuahua,$/;"	m	class:Animal::Kind	file:
Chihuahua	tests/test_tagbased_polymorphic.cpp	/^    explicit Chihuahua(const std::string &_name) : Dog(_name, Kind::Chihuahua) {$/;"	f	struct:Animal::Chihuahua
Chihuahua	tests/test_tagbased_polymorphic.cpp	/^struct Chihuahua : Dog {$/;"	s	struct:Animal	file:
ClassScope	tests/test_class.py	/^    class ClassScope:$/;"	c	function:test_register_duplicate_class
ComplexStruct	tests/test_numpy_dtypes.cpp	/^struct ComplexStruct {$/;"	s	file:
ConstRefCasted	tests/test_builtin_casters.cpp	/^struct ConstRefCasted {$/;"	s	file:
ConstructorStats	tests/constructor_stats.h	/^class ConstructorStats {$/;"	c
Copy	tests/test_embed/test_interpreter.cpp	/^    test_override_cache_helper(test_override_cache_helper const &Copy) = delete;$/;"	m	class:test_override_cache_helper	file:
Copy	tests/test_virtual_functions.cpp	/^    test_override_cache_helper(test_override_cache_helper const &Copy) = delete;$/;"	m	class:test_override_cache_helper	file:
CopyOnlyInt	tests/test_copy_move.cpp	/^    CopyOnlyInt() { print_default_created(this); }$/;"	f	class:CopyOnlyInt
CopyOnlyInt	tests/test_copy_move.cpp	/^    CopyOnlyInt(const CopyOnlyInt &c) {$/;"	f	class:CopyOnlyInt
CopyOnlyInt	tests/test_copy_move.cpp	/^    explicit CopyOnlyInt(int v) : value{v} { print_created(this, value); }$/;"	f	class:CopyOnlyInt
CopyOnlyInt	tests/test_copy_move.cpp	/^class CopyOnlyInt {$/;"	c	file:
Create	tests/test_vector_unique_ptr_member.cpp	/^    static std::unique_ptr<VectorOwner> Create(std::size_t num_elems) {$/;"	f	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner
CustomAutoGIL	tests/cross_module_gil_utils.cpp	/^    CustomAutoGIL() : gstate(PyGILState_Ensure()) {}$/;"	f	struct:__anon3::CustomAutoGIL
CustomAutoGIL	tests/cross_module_gil_utils.cpp	/^struct CustomAutoGIL {$/;"	s	namespace:__anon3	file:
CustomAutoNoGIL	tests/cross_module_gil_utils.cpp	/^    CustomAutoNoGIL() : save(PyEval_SaveThread()) {}$/;"	f	struct:__anon3::CustomAutoNoGIL
CustomAutoNoGIL	tests/cross_module_gil_utils.cpp	/^struct CustomAutoNoGIL {$/;"	s	namespace:__anon3	file:
CustomContains	tests/test_pytypes.py	/^class CustomContains:$/;"	c
CustomGuard	tests/test_call_policies.cpp	/^    CustomGuard() { enabled = true; }$/;"	f	struct:CustomGuard
CustomGuard	tests/test_call_policies.cpp	/^struct CustomGuard {$/;"	s	file:
CustomOperatorNew	tests/test_eigen_matrix.cpp	/^struct CustomOperatorNew {$/;"	s	file:
DECL_NPY_API	include/pybind11/numpy.h	270;"	d
DECL_NPY_API	include/pybind11/numpy.h	294;"	d
DIR	docs/conf.py	/^DIR = Path(__file__).parent.resolve()$/;"	v
DIR	pybind11/commands.py	/^DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v
DIR	setup.py	/^DIR = Path(__file__).parent.absolute()$/;"	v
DIR	tests/extra_python_package/test_files.py	/^DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v
DIR	tests/extra_setuptools/test_setuphelper.py	/^DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v
DR	tests/test_virtual_functions.py	/^    class DR(m.D_Repeat):$/;"	c	function:test_inherited_virtuals
DT	tests/test_virtual_functions.py	/^    class DT(m.D_Tpl):$/;"	c	function:test_inherited_virtuals
DT2	tests/test_virtual_functions.py	/^    class DT2(DT):$/;"	c	function:test_inherited_virtuals
D_METHODS	tests/test_virtual_functions.cpp	459;"	d	file:
D_Repeat	tests/test_virtual_functions.cpp	/^class D_Repeat : public C_Repeat {$/;"	c	file:
D_Tpl	tests/test_virtual_functions.cpp	/^class D_Tpl : public C_Tpl {$/;"	c	file:
Data	tests/test_virtual_functions.cpp	/^    struct Data {};$/;"	s	struct:AdderBase	file:
Data	tests/test_virtual_functions.py	/^    class Data(m.Data):$/;"	c	function:test_recursive_dispatch_issue
DataType	tests/test_vector_unique_ptr_member.cpp	/^struct DataType {};$/;"	s	namespace:pybind11_tests::vector_unique_ptr_member	file:
DependentGuard	tests/test_call_policies.cpp	/^    DependentGuard() { enabled = CustomGuard::enabled; }$/;"	f	struct:DependentGuard
DependentGuard	tests/test_call_policies.cpp	/^struct DependentGuard {$/;"	s	file:
Derived	tests/test_call_policies.py	/^    class Derived(m.Parent):$/;"	c	function:test_alive_gc_derived
Derived	tests/test_call_policies.py	/^    class Derived(m.Parent, m.Child):$/;"	c	function:test_alive_gc_multi_derived
DerivedWidget	tests/test_embed/test_interpreter.py	/^class DerivedWidget(Widget):$/;"	c
DestructionTester	tests/test_custom_type_casters.cpp	/^    DestructionTester() { print_default_created(this); }$/;"	f	class:DestructionTester
DestructionTester	tests/test_custom_type_casters.cpp	/^    DestructionTester(const DestructionTester &) { print_copy_created(this); }$/;"	f	class:DestructionTester
DestructionTester	tests/test_custom_type_casters.cpp	/^class DestructionTester {$/;"	c	file:
DispatchIssue	tests/test_virtual_functions.cpp	/^struct DispatchIssue : Base {$/;"	s	file:
Dog	tests/test_tagbased_polymorphic.cpp	/^        Dog = 100,$/;"	m	class:Animal::Kind	file:
Dog	tests/test_tagbased_polymorphic.cpp	/^    explicit Dog(const std::string &_name, Kind _kind = Kind::Dog) : Animal(_name, _kind) {}$/;"	f	struct:Animal::Dog
Dog	tests/test_tagbased_polymorphic.cpp	/^struct Dog : Animal {$/;"	s	struct:Animal	file:
DtypeCheck	tests/test_numpy_array.cpp	/^struct DtypeCheck {$/;"	s	file:
DtypeSizeCheck	tests/test_numpy_array.cpp	/^struct DtypeSizeCheck {$/;"	s	file:
Dynamic	include/pybind11/numpy.h	/^    static constexpr bool Dynamic = Dims < 0;$/;"	m	class:unchecked_reference
E1	tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	c	file:
EFirstEntry	tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	e	enum:MyEnum	file:
EIGEN_AVOID_STL_ARRAY	tests/eigen_tensor_avoid_stl_array.cpp	9;"	d	file:
EIGEN_AVOID_STL_ARRAY	tests/test_eigen_tensor.cpp	11;"	d	file:
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	tests/test_eigen_matrix.cpp	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:CustomOperatorNew	file:
ENTRY	tools/make_changelog.py	/^ENTRY = re.compile($/;"	v
ESecondEntry	tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	e	enum:MyEnum	file:
E_nc	tests/test_stl_binders.cpp	/^    explicit E_nc(int i) : value{i} {}$/;"	f	class:E_nc
E_nc	tests/test_stl_binders.cpp	/^class E_nc {$/;"	c	file:
EigenConformable	include/pybind11/eigen/matrix.h	/^    EigenConformable(EigenIndex r, EigenIndex c, EigenIndex rstride, EigenIndex cstride)$/;"	f	struct:EigenConformable
EigenConformable	include/pybind11/eigen/matrix.h	/^    EigenConformable(EigenIndex r, EigenIndex c, EigenIndex stride)$/;"	f	struct:EigenConformable
EigenConformable	include/pybind11/eigen/matrix.h	/^    EigenConformable(bool fits = false) : conformable{fits} {}$/;"	f	struct:EigenConformable
EigenConformable	include/pybind11/eigen/matrix.h	/^struct EigenConformable {$/;"	s
EigenProps	include/pybind11/eigen/matrix.h	/^struct EigenProps {$/;"	s
El	tests/test_stl_binders.cpp	/^    explicit El(int v) : a(v) {}$/;"	f	class:El
El	tests/test_stl_binders.cpp	/^class El {$/;"	c	file:
ElementA	tests/test_smart_ptr.cpp	/^    explicit ElementA(int v) : v(v) {}$/;"	f	struct:ElementA
ElementA	tests/test_smart_ptr.cpp	/^struct ElementA : ElementBase {$/;"	s	file:
ElementBase	tests/test_smart_ptr.cpp	/^struct ElementBase {$/;"	s	file:
ElementList	tests/test_smart_ptr.cpp	/^struct ElementList {$/;"	s	file:
EnumType	tests/test_stl.cpp	/^enum class EnumType {$/;"	c	file:
ExampleMandA	tests/test_methods_and_attributes.cpp	/^    ExampleMandA() { print_default_created(this); }$/;"	f	class:ExampleMandA
ExampleMandA	tests/test_methods_and_attributes.cpp	/^    ExampleMandA(const ExampleMandA &e) : value(e.value) { print_copy_created(this); }$/;"	f	class:ExampleMandA
ExampleMandA	tests/test_methods_and_attributes.cpp	/^    explicit ExampleMandA(int value) : value(value) { print_created(this, value); }$/;"	f	class:ExampleMandA
ExampleMandA	tests/test_methods_and_attributes.cpp	/^    explicit ExampleMandA(std::string &&) {}$/;"	f	class:ExampleMandA
ExampleMandA	tests/test_methods_and_attributes.cpp	/^class ExampleMandA {$/;"	c	file:
ExampleVirt	tests/test_virtual_functions.cpp	/^    ExampleVirt(const ExampleVirt &e) : state(e.state) { print_copy_created(this); }$/;"	f	class:ExampleVirt
ExampleVirt	tests/test_virtual_functions.cpp	/^    explicit ExampleVirt(int state) : state(state) { print_created(this, state); }$/;"	f	class:ExampleVirt
ExampleVirt	tests/test_virtual_functions.cpp	/^class ExampleVirt {$/;"	c	file:
ExtendedExampleVirt	tests/test_virtual_functions.py	/^    class ExtendedExampleVirt(m.ExampleVirt):$/;"	c	function:test_override
ExtendedExampleVirt2	tests/test_virtual_functions.py	/^    class ExtendedExampleVirt2(ExtendedExampleVirt):$/;"	c	function:test_override
ExtendedVirtClass	tests/test_gil_scoped.py	/^class ExtendedVirtClass(m.VirtClass):$/;"	c
Field	tests/test_methods_and_attributes.cpp	/^struct Field : FieldBase {};$/;"	s	namespace:pybind11_tests::exercise_is_setter	file:
FieldBase	tests/test_methods_and_attributes.cpp	/^struct FieldBase {$/;"	s	namespace:pybind11_tests::exercise_is_setter	file:
FlakyException	tests/test_exceptions.py	/^class FlakyException(Exception):$/;"	c
Float	tests/test_builtin_casters.py	/^    class Float:$/;"	c	function:test_int_convert
GC_IF_NEEDED	tests/test_kwargs_and_defaults.cpp	111;"	d	file:
HAVE_SNPRINTF	include/pybind11/detail/common.h	210;"	d
HashMe	tests/test_operator_overloading.cpp	/^struct HashMe {$/;"	s	file:
Hashable	tests/test_pytypes.py	/^    class Hashable:$/;"	c	function:test_hash
HeldByDefaultHolder	tests/test_smart_ptr.cpp	/^struct HeldByDefaultHolder {};$/;"	s	file:
I	include/pybind11/complex.h	18;"	d
I18NSPHINXOPTS	docs/Makefile	/^I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
I801B1	tests/test_multiple_inheritance.cpp	/^struct I801B1 {$/;"	s	namespace:__anon10	file:
I801B2	tests/test_multiple_inheritance.cpp	/^struct I801B2 {$/;"	s	namespace:__anon10	file:
I801C	tests/test_multiple_inheritance.cpp	/^struct I801C : I801B1, I801B2 {};$/;"	s	namespace:__anon10	file:
I801D	tests/test_multiple_inheritance.cpp	/^struct I801D : I801C {}; \/\/ Indirect MI$/;"	s	namespace:__anon10	file:
IncType	tests/pybind11_tests.h	/^    IncType(const IncType &other) : IncType(other.value() + 1) {}$/;"	f	class:IncType
IncType	tests/pybind11_tests.h	/^class IncType : public UserType {$/;"	c
Index	tests/test_builtin_casters.py	/^    class Index:$/;"	c	function:test_int_convert
InitializingFunctionRecordDeleter	include/pybind11/pybind11.h	/^    struct InitializingFunctionRecordDeleter {$/;"	s	class:cpp_function
Int	tests/test_builtin_casters.py	/^    class Int:$/;"	c	function:test_int_convert
IntAndIndex	tests/test_builtin_casters.py	/^    class IntAndIndex:$/;"	c	function:test_int_convert
IntFloat	tests/pybind11_tests.h	/^union IntFloat {$/;"	u
IntStruct	tests/test_thread.cpp	/^    explicit IntStruct(int v) : value(v){};$/;"	f	struct:__anon2::IntStruct
IntStruct	tests/test_thread.cpp	/^struct IntStruct {$/;"	s	namespace:__anon2	file:
Item	tests/test_callbacks.py	/^    class Item:$/;"	c	function:test_async_callbacks
ItemsViewImpl	include/pybind11/stl_bind.h	/^    explicit ItemsViewImpl(Map &map) : map(map) {}$/;"	f	struct:ItemsViewImpl
ItemsViewImpl	include/pybind11/stl_bind.h	/^struct ItemsViewImpl : public ItemsView {$/;"	s
KeysViewImpl	include/pybind11/stl_bind.h	/^    explicit KeysViewImpl(Map &map) : map(map) {}$/;"	f	struct:KeysViewImpl
KeysViewImpl	include/pybind11/stl_bind.h	/^struct KeysViewImpl : public KeysView {$/;"	s
Kind	tests/test_tagbased_polymorphic.cpp	/^    enum class Kind {$/;"	c	struct:Animal	file:
LINUX	tests/env.py	/^LINUX = sys.platform.startswith("linux")$/;"	v
Labrador	tests/test_tagbased_polymorphic.cpp	/^        Labrador,$/;"	m	class:Animal::Kind	file:
Labrador	tests/test_tagbased_polymorphic.cpp	/^    explicit Labrador(const std::string &_name, int _excitement = 9001)$/;"	f	struct:Animal::Labrador
Labrador	tests/test_tagbased_polymorphic.cpp	/^struct Labrador : Dog {$/;"	s	struct:Animal	file:
LastCat	tests/test_tagbased_polymorphic.cpp	/^        LastCat = 299$/;"	m	class:Animal::Kind	file:
LastDog	tests/test_tagbased_polymorphic.cpp	/^        LastDog = 199,$/;"	m	class:Animal::Kind	file:
LocalBase	tests/local_bindings.h	/^    explicit LocalBase(int i) : i(i) {}$/;"	f	class:LocalBase
LocalBase	tests/local_bindings.h	/^class LocalBase {$/;"	c
LocalException	tests/local_bindings.h	/^    explicit LocalException(const char *m) : message{m} {}$/;"	f	class:LocalException
LocalException	tests/local_bindings.h	/^class LocalException : public std::exception {$/;"	c
LocalMap	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(LocalMap);$/;"	v
LocalSimpleException	tests/local_bindings.h	/^    explicit LocalSimpleException(const char *m) : message{m} {}$/;"	f	class:LocalSimpleException
LocalSimpleException	tests/local_bindings.h	/^class LocalSimpleException : public std::exception {$/;"	c
LocalVec	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(LocalVec);$/;"	v
LocalVec2	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(LocalVec2);$/;"	v
MACOS	pybind11/setup_helpers.py	/^MACOS = sys.platform.startswith("darwin")$/;"	v
MACOS	tests/env.py	/^MACOS = sys.platform.startswith("darwin")$/;"	v
MAIN_DIR	tests/extra_python_package/test_files.py	/^MAIN_DIR = os.path.dirname(os.path.dirname(DIR))$/;"	v
MAIN_DIR	tests/extra_setuptools/test_setuphelper.py	/^MAIN_DIR = os.path.dirname(os.path.dirname(DIR))$/;"	v
MAKE_TAG_TYPE	tests/test_factory_constructors.cpp	209;"	d	file:
MI1	tests/test_multiple_inheritance.py	/^    class MI1(m.Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_python
MI2	tests/test_multiple_inheritance.py	/^    class MI2(B1, m.Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_python
MI3	tests/test_multiple_inheritance.py	/^    class MI3(MI2):$/;"	c	function:test_multiple_inheritance_python
MI4	tests/test_multiple_inheritance.py	/^    class MI4(MI3, m.Base2):$/;"	c	function:test_multiple_inheritance_python
MI5	tests/test_multiple_inheritance.py	/^    class MI5(m.Base2, B1, m.Base1):$/;"	c	function:test_multiple_inheritance_python
MI6	tests/test_multiple_inheritance.py	/^    class MI6(m.Base2, B1):$/;"	c	function:test_multiple_inheritance_python
MI7	tests/test_multiple_inheritance.py	/^    class MI7(B4, MI6):$/;"	c	function:test_multiple_inheritance_python
MI8	tests/test_multiple_inheritance.py	/^    class MI8(MI6, B3):$/;"	c	function:test_multiple_inheritance_python
MI8b	tests/test_multiple_inheritance.py	/^    class MI8b(B3, MI6):$/;"	c	function:test_multiple_inheritance_python
MIMany117	tests/test_multiple_inheritance.py	/^    class MIMany117(MIMany14, MIMany58, MIMany916, m.BaseN17):$/;"	c	function:test_multiple_inheritance_python_many_bases
MIMany14	tests/test_multiple_inheritance.py	/^    class MIMany14(m.BaseN1, m.BaseN2, m.BaseN3, m.BaseN4):$/;"	c	function:test_multiple_inheritance_python_many_bases
MIMany19	tests/test_multiple_inheritance.py	/^    class MIMany19(MIMany14, MIMany58, m.BaseN9):$/;"	c	function:test_multiple_inheritance_python_many_bases
MIMany58	tests/test_multiple_inheritance.py	/^    class MIMany58(m.BaseN5, m.BaseN6, m.BaseN7, m.BaseN8):$/;"	c	function:test_multiple_inheritance_python_many_bases
MIMany916	tests/test_multiple_inheritance.py	/^    ):$/;"	c	function:test_multiple_inheritance_python_many_bases
MITest	tests/test_factory_constructors.py	/^    class MITest(m.TestFactory1, m.TestFactory2):$/;"	c	function:test_multiple_inheritance
MITypePy	tests/test_multiple_inheritance.py	/^    class MITypePy(Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_mix1
MITypePy	tests/test_multiple_inheritance.py	/^    class MITypePy(m.Base1, Base2):$/;"	c	function:test_multiple_inheritance_mix2
MITypePy	tests/test_multiple_inheritance.py	/^    class MITypePy(m.Base12a):$/;"	c	function:test_multiple_inheritance_virtbase
MixGL	tests/local_bindings.h	/^    explicit MixGL(int i) : i{i} {}$/;"	f	struct:MixGL
MixGL	tests/local_bindings.h	/^struct MixGL {$/;"	s
MixGL2	tests/local_bindings.h	/^    explicit MixGL2(int i) : i{i} {}$/;"	f	struct:MixGL2
MixGL2	tests/local_bindings.h	/^struct MixGL2 {$/;"	s
Movable	tests/test_virtual_functions.cpp	/^    Movable(const Movable &m) : value{m.value} { print_copy_created(this); }$/;"	f	class:Movable
Movable	tests/test_virtual_functions.cpp	/^    Movable(int a, int b) : value{a + b} { print_created(this, a, b); }$/;"	f	class:Movable
Movable	tests/test_virtual_functions.cpp	/^class Movable {$/;"	c	file:
MoveOnlyInt	tests/test_copy_move.cpp	/^    MoveOnlyInt() { print_default_created(this); }$/;"	f	class:MoveOnlyInt
MoveOnlyInt	tests/test_copy_move.cpp	/^    explicit MoveOnlyInt(int v) : value{v} { print_created(this, value); }$/;"	f	class:MoveOnlyInt
MoveOnlyInt	tests/test_copy_move.cpp	/^class MoveOnlyInt {$/;"	c	file:
MoveOrCopyInt	tests/test_copy_move.cpp	/^    MoveOrCopyInt() { print_default_created(this); }$/;"	f	class:MoveOrCopyInt
MoveOrCopyInt	tests/test_copy_move.cpp	/^    MoveOrCopyInt(const MoveOrCopyInt &c) {$/;"	f	class:MoveOrCopyInt
MoveOrCopyInt	tests/test_copy_move.cpp	/^    explicit MoveOrCopyInt(int v) : value{v} { print_created(this, value); }$/;"	f	class:MoveOrCopyInt
MoveOrCopyInt	tests/test_copy_move.cpp	/^class MoveOrCopyInt {$/;"	c	file:
MutuallyRecursiveContainerPairMV	tests/test_stl_binders.cpp	/^struct MutuallyRecursiveContainerPairMV : std::map<int, MutuallyRecursiveContainerPairVM> {};$/;"	s	file:
MutuallyRecursiveContainerPairVM	tests/test_stl_binders.cpp	/^struct MutuallyRecursiveContainerPairVM : std::vector<MutuallyRecursiveContainerPairMV> {};$/;"	s	file:
MyClass	tests/test_callbacks.py	/^    class MyClass:$/;"	c	function:test_bound_method_callback
MyEnum	tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	g	file:
MyException	tests/test_exceptions.cpp	/^    explicit MyException(const char *m) : message{m} {}$/;"	f	class:MyException
MyException	tests/test_exceptions.cpp	/^class MyException : public std::exception {$/;"	c	file:
MyException2	tests/test_exceptions.cpp	/^    explicit MyException2(const char *m) : message{m} {}$/;"	f	class:MyException2
MyException2	tests/test_exceptions.cpp	/^class MyException2 : public std::exception {$/;"	c	file:
MyException3	tests/test_exceptions.cpp	/^    explicit MyException3(const char *m) : message{m} {}$/;"	f	class:MyException3
MyException3	tests/test_exceptions.cpp	/^class MyException3 {$/;"	c	file:
MyException4	tests/test_exceptions.cpp	/^    explicit MyException4(const char *m) : message{m} {}$/;"	f	class:MyException4
MyException4	tests/test_exceptions.cpp	/^class MyException4 : public std::exception {$/;"	c	file:
MyException5	tests/test_exceptions.cpp	/^    explicit MyException5(const std::string &what) : std::logic_error(what) {}$/;"	f	class:MyException5
MyException5	tests/test_exceptions.cpp	/^class MyException5 : public std::logic_error {$/;"	c	file:
MyException5_1	tests/test_exceptions.cpp	/^class MyException5_1 : public MyException5 {$/;"	c	file:
MyException6	tests/test_exceptions.cpp	/^    explicit MyException6(const char *m) : message{m} {}$/;"	f	class:MyException6
MyException6	tests/test_exceptions.cpp	/^class MyException6 : public std::exception {$/;"	c	file:
MyObject1	tests/test_smart_ptr.cpp	/^    explicit MyObject1(int value) : value(value) { print_created(this, toString()); }$/;"	f	class:__anon9::MyObject1
MyObject1	tests/test_smart_ptr.cpp	/^class MyObject1 : public Object {$/;"	c	namespace:__anon9	file:
MyObject2	tests/test_smart_ptr.cpp	/^    explicit MyObject2(int value) : value(value) { print_created(this, toString()); }$/;"	f	class:__anon9::MyObject2
MyObject2	tests/test_smart_ptr.cpp	/^class MyObject2 {$/;"	c	namespace:__anon9	file:
MyObject3	tests/test_smart_ptr.cpp	/^    explicit MyObject3(int value) : value(value) { print_created(this, toString()); }$/;"	f	class:__anon9::MyObject3
MyObject3	tests/test_smart_ptr.cpp	/^class MyObject3 : public std::enable_shared_from_this<MyObject3> {$/;"	c	namespace:__anon9	file:
MyObject4	tests/test_smart_ptr.cpp	/^    explicit MyObject4(int value) : value{value} {$/;"	f	class:__anon9::MyObject4
MyObject4	tests/test_smart_ptr.cpp	/^class MyObject4 {$/;"	c	namespace:__anon9	file:
MyObject4a	tests/test_smart_ptr.cpp	/^    explicit MyObject4a(int i) : value{i} {$/;"	f	class:__anon9::MyObject4a
MyObject4a	tests/test_smart_ptr.cpp	/^class MyObject4a {$/;"	c	namespace:__anon9	file:
MyObject4b	tests/test_smart_ptr.cpp	/^    explicit MyObject4b(int i) : MyObject4a(i) { print_created(this); }$/;"	f	class:__anon9::MyObject4b
MyObject4b	tests/test_smart_ptr.cpp	/^class MyObject4b : public MyObject4a {$/;"	c	namespace:__anon9	file:
MyObject5	tests/test_smart_ptr.cpp	/^    explicit MyObject5(int value) : value{value} { print_created(this); }$/;"	f	class:__anon9::MyObject5
MyObject5	tests/test_smart_ptr.cpp	/^class MyObject5 { \/\/ managed by huge_unique_ptr$/;"	c	namespace:__anon9	file:
MyRepr	tests/test_exceptions.py	/^    class MyRepr:$/;"	c	function:test_invalid_repr
MyTest	tests/test_factory_constructors.py	/^    class MyTest(m.TestFactory6):$/;"	c	function:test_init_factory_alias
MyType	tests/test_custom_type_casters.cpp	/^struct MyType {};$/;"	s	namespace:other_lib	file:
NCVirt	tests/test_virtual_functions.cpp	/^class NCVirt {$/;"	c	file:
NCVirtExt	tests/test_virtual_functions.py	/^    class NCVirtExt(m.NCVirt):$/;"	c	function:test_move_support
NCVirtExt2	tests/test_virtual_functions.py	/^    class NCVirtExt2(m.NCVirt):$/;"	c	function:test_move_support
NCVirtTrampoline	tests/test_virtual_functions.cpp	/^class NCVirtTrampoline : public NCVirt {$/;"	c	file:
NO_DELETER_MSG	tests/test_methods_and_attributes.py	/^NO_DELETER_MSG = ($/;"	v
NO_GETTER_MSG	tests/test_methods_and_attributes.py	/^NO_GETTER_MSG = ($/;"	v
NO_SETTER_MSG	tests/test_methods_and_attributes.py	/^NO_SETTER_MSG = ($/;"	v
NPY_ARRAY_ALIGNED_	include/pybind11/numpy.h	/^        NPY_ARRAY_ALIGNED_ = 0x0100,$/;"	e	enum:npy_api::constants
NPY_ARRAY_C_CONTIGUOUS_	include/pybind11/numpy.h	/^        NPY_ARRAY_C_CONTIGUOUS_ = 0x0001,$/;"	e	enum:npy_api::constants
NPY_ARRAY_ENSUREARRAY_	include/pybind11/numpy.h	/^        NPY_ARRAY_ENSUREARRAY_ = 0x0040,$/;"	e	enum:npy_api::constants
NPY_ARRAY_FORCECAST_	include/pybind11/numpy.h	/^        NPY_ARRAY_FORCECAST_ = 0x0010,$/;"	e	enum:npy_api::constants
NPY_ARRAY_F_CONTIGUOUS_	include/pybind11/numpy.h	/^        NPY_ARRAY_F_CONTIGUOUS_ = 0x0002,$/;"	e	enum:npy_api::constants
NPY_ARRAY_OWNDATA_	include/pybind11/numpy.h	/^        NPY_ARRAY_OWNDATA_ = 0x0004,$/;"	e	enum:npy_api::constants
NPY_ARRAY_WRITEABLE_	include/pybind11/numpy.h	/^        NPY_ARRAY_WRITEABLE_ = 0x0400,$/;"	e	enum:npy_api::constants
NPY_BOOL_	include/pybind11/numpy.h	/^        NPY_BOOL_ = 0,$/;"	e	enum:npy_api::constants
NPY_BYTE_	include/pybind11/numpy.h	/^        NPY_BYTE_,$/;"	e	enum:npy_api::constants
NPY_CDOUBLE_	include/pybind11/numpy.h	/^        NPY_CDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_CFLOAT_	include/pybind11/numpy.h	/^        NPY_CFLOAT_,$/;"	e	enum:npy_api::constants
NPY_CLONGDOUBLE_	include/pybind11/numpy.h	/^        NPY_CLONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_DOUBLE_	include/pybind11/numpy.h	/^        NPY_DOUBLE_,$/;"	e	enum:npy_api::constants
NPY_FLOAT_	include/pybind11/numpy.h	/^        NPY_FLOAT_,$/;"	e	enum:npy_api::constants
NPY_INT16_	include/pybind11/numpy.h	/^        NPY_INT16_ = NPY_SHORT_,$/;"	e	enum:npy_api::constants
NPY_INT32_	include/pybind11/numpy.h	/^        NPY_INT32_$/;"	e	enum:npy_api::constants
NPY_INT64_	include/pybind11/numpy.h	/^        NPY_INT64_$/;"	e	enum:npy_api::constants
NPY_INT8_	include/pybind11/numpy.h	/^        NPY_INT8_ = NPY_BYTE_,$/;"	e	enum:npy_api::constants
NPY_INT_	include/pybind11/numpy.h	/^        NPY_INT_,$/;"	e	enum:npy_api::constants
NPY_LONGDOUBLE_	include/pybind11/numpy.h	/^        NPY_LONGDOUBLE_,$/;"	e	enum:npy_api::constants
NPY_LONGLONG_	include/pybind11/numpy.h	/^        NPY_LONGLONG_,$/;"	e	enum:npy_api::constants
NPY_LONG_	include/pybind11/numpy.h	/^        NPY_LONG_,$/;"	e	enum:npy_api::constants
NPY_OBJECT_	include/pybind11/numpy.h	/^        NPY_OBJECT_ = 17,$/;"	e	enum:npy_api::constants
NPY_SHORT_	include/pybind11/numpy.h	/^        NPY_SHORT_,$/;"	e	enum:npy_api::constants
NPY_STRING_	include/pybind11/numpy.h	/^        NPY_STRING_,$/;"	e	enum:npy_api::constants
NPY_UBYTE_	include/pybind11/numpy.h	/^        NPY_UBYTE_,$/;"	e	enum:npy_api::constants
NPY_UINT16_	include/pybind11/numpy.h	/^        NPY_UINT16_ = NPY_USHORT_,$/;"	e	enum:npy_api::constants
NPY_UINT32_	include/pybind11/numpy.h	/^        NPY_UINT32_ = platform_lookup<std::uint32_t, unsigned long, unsigned int, unsigned short>($/;"	e	enum:npy_api::constants
NPY_UINT64_	include/pybind11/numpy.h	/^        NPY_UINT64_$/;"	e	enum:npy_api::constants
NPY_UINT8_	include/pybind11/numpy.h	/^        NPY_UINT8_ = NPY_UBYTE_,$/;"	e	enum:npy_api::constants
NPY_UINT_	include/pybind11/numpy.h	/^        NPY_UINT_,$/;"	e	enum:npy_api::constants
NPY_ULONGLONG_	include/pybind11/numpy.h	/^        NPY_ULONGLONG_,$/;"	e	enum:npy_api::constants
NPY_ULONG_	include/pybind11/numpy.h	/^        NPY_ULONG_,$/;"	e	enum:npy_api::constants
NPY_UNICODE_	include/pybind11/numpy.h	/^        NPY_UNICODE_,$/;"	e	enum:npy_api::constants
NPY_USHORT_	include/pybind11/numpy.h	/^        NPY_USHORT_,$/;"	e	enum:npy_api::constants
NPY_VOID_	include/pybind11/numpy.h	/^        NPY_VOID_,$/;"	e	enum:npy_api::constants
NoBraceInitialization	tests/test_class.cpp	/^    NoBraceInitialization(std::initializer_list<T> l) : vec(l) {}$/;"	f	struct:NoBraceInitialization
NoBraceInitialization	tests/test_class.cpp	/^    explicit NoBraceInitialization(std::vector<int> v) : vec{std::move(v)} {}$/;"	f	struct:NoBraceInitialization
NoBraceInitialization	tests/test_class.cpp	/^struct NoBraceInitialization {$/;"	s	file:
NonCopyable	tests/test_virtual_functions.cpp	/^    NonCopyable(int a, int b) : value{new int(a * b)} { print_created(this, a, b); }$/;"	f	class:NonCopyable
NonCopyable	tests/test_virtual_functions.cpp	/^class NonCopyable {$/;"	c	file:
NonCopyableInt	tests/test_sequences_and_iterators.cpp	/^    explicit NonCopyableInt(int value) : value_(value) {}$/;"	f	class:NonCopyableInt
NonCopyableInt	tests/test_sequences_and_iterators.cpp	/^class NonCopyableInt {$/;"	c	file:
NonLocalMap	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(NonLocalMap);$/;"	v
NonLocalMap2	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(NonLocalMap2);$/;"	v
NonLocalVec	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(NonLocalVec);$/;"	v
NonRefIterator	tests/test_sequences_and_iterators.cpp	/^    explicit NonRefIterator(const T *ptr) : ptr_(ptr) {}$/;"	f	class:NonRefIterator
NonRefIterator	tests/test_sequences_and_iterators.cpp	/^class NonRefIterator {$/;"	c	file:
NonZeroIterator	tests/test_sequences_and_iterators.cpp	/^    explicit NonZeroIterator(const T *ptr) : ptr_(ptr) {}$/;"	f	class:NonZeroIterator
NonZeroIterator	tests/test_sequences_and_iterators.cpp	/^class NonZeroIterator {$/;"	c	file:
NonZeroSentinel	tests/test_sequences_and_iterators.cpp	/^class NonZeroSentinel {};$/;"	c	file:
NoneCastTester	tests/test_methods_and_attributes.cpp	/^    explicit NoneCastTester(int v) : answer(v) {}$/;"	f	class:NoneCastTester
NoneCastTester	tests/test_methods_and_attributes.cpp	/^class NoneCastTester {$/;"	c	file:
NoneTester	tests/test_methods_and_attributes.cpp	/^class NoneTester {$/;"	c	file:
NotCopyable	tests/test_copy_move.cpp	/^struct NotCopyable {$/;"	s	file:
NotCopyableMap	tests/test_copy_move.cpp	/^struct NotCopyableMap : std::map<int, NotCopyable> {};$/;"	s	file:
NotCopyableNotMovable	tests/test_copy_move.cpp	/^struct NotCopyableNotMovable {$/;"	s	file:
NotCopyableNotMovableMap	tests/test_copy_move.cpp	/^struct NotCopyableNotMovableMap : std::map<int, NotCopyableNotMovable> {};$/;"	s	file:
NotCopyableNotMovableVector	tests/test_copy_move.cpp	/^struct NotCopyableNotMovableVector : std::vector<NotCopyableNotMovable> {};$/;"	s	file:
NotCopyableVector	tests/test_copy_move.cpp	/^struct NotCopyableVector : std::vector<NotCopyable> {};$/;"	s	file:
NotInt	tests/test_builtin_casters.py	/^    class NotInt:$/;"	c	function:test_int_convert
NotMovable	tests/test_copy_move.cpp	/^struct NotMovable {$/;"	s	file:
NotMovableMap	tests/test_copy_move.cpp	/^struct NotMovableMap : std::map<int, NotMovable> {};$/;"	s	file:
NotMovableVector	tests/test_copy_move.cpp	/^struct NotMovableVector : std::vector<NotMovable> {};$/;"	s	file:
NotPybindDerived	tests/test_factory_constructors.py	/^    class NotPybindDerived:$/;"	c	function:test_invalid_self
Object	tests/object.h	/^    Object() { print_default_created(this); }$/;"	f	class:Object
Object	tests/object.h	/^    Object(const Object &) : m_refCount(0) { print_copy_created(this); }$/;"	f	class:Object
Object	tests/object.h	/^class Object {$/;"	c
OptionalHolder	tests/test_stl.cpp	/^    OptionalHolder(){};$/;"	f	struct:OptionalHolder
OptionalHolder	tests/test_stl.cpp	/^struct OptionalHolder {$/;"	s	file:
OptionalProperties	tests/test_stl.cpp	/^    OptionalProperties() : value(EnumType::kSet) {}$/;"	f	class:OptionalProperties
OptionalProperties	tests/test_stl.cpp	/^class OptionalProperties {$/;"	c	file:
OstreamRedirect	include/pybind11/iostream.h	/^    explicit OstreamRedirect(bool do_stdout = true, bool do_stderr = true)$/;"	f	class:OstreamRedirect
OstreamRedirect	include/pybind11/iostream.h	/^class OstreamRedirect {$/;"	c
Output	tests/conftest.py	/^class Output:$/;"	c
OwnsPythonObjects	tests/test_custom_type_setup.cpp	/^struct OwnsPythonObjects {$/;"	s	namespace:__anon5	file:
PAPER	docs/Makefile	/^PAPER         =$/;"	m
PAPEROPT_a4	docs/Makefile	/^PAPEROPT_a4     = -D latex_paper_size=a4$/;"	m
PAPEROPT_letter	docs/Makefile	/^PAPEROPT_letter = -D latex_paper_size=letter$/;"	m
PYBIND11_ASSERT_GIL_HELD_INCREF_DECREF	include/pybind11/detail/common.h	332;"	d
PYBIND11_ASSIGN_HELPER	tests/test_buffers.cpp	26;"	d	file:
PYBIND11_ASSIGN_HELPER	tests/test_buffers.cpp	45;"	d	file:
PYBIND11_AUTO_IT	tests/test_pytypes.cpp	661;"	d	file:
PYBIND11_AUTO_IT	tests/test_pytypes.cpp	696;"	d	file:
PYBIND11_BASEN	tests/test_multiple_inheritance.cpp	117;"	d	file:
PYBIND11_BINARY_OPERATOR	include/pybind11/operators.h	106;"	d
PYBIND11_BINARY_OPERATOR	include/pybind11/operators.h	193;"	d
PYBIND11_BOOL_ATTR	include/pybind11/detail/common.h	367;"	d
PYBIND11_BUILD_ABI	include/pybind11/detail/internals.h	296;"	d
PYBIND11_BUILD_ABI	include/pybind11/detail/internals.h	298;"	d
PYBIND11_BUILD_TYPE	include/pybind11/detail/internals.h	254;"	d
PYBIND11_BUILD_TYPE	include/pybind11/detail/internals.h	256;"	d
PYBIND11_BUILTINS_MODULE	include/pybind11/detail/common.h	369;"	d
PYBIND11_BUILTIN_QUALNAME	include/pybind11/detail/class.h	19;"	d
PYBIND11_BYTES_AS_STRING	include/pybind11/detail/common.h	356;"	d
PYBIND11_BYTES_AS_STRING_AND_SIZE	include/pybind11/detail/common.h	355;"	d
PYBIND11_BYTES_CHECK	include/pybind11/detail/common.h	352;"	d
PYBIND11_BYTES_FROM_STRING	include/pybind11/detail/common.h	353;"	d
PYBIND11_BYTES_FROM_STRING_AND_SIZE	include/pybind11/detail/common.h	354;"	d
PYBIND11_BYTES_NAME	include/pybind11/detail/common.h	362;"	d
PYBIND11_BYTES_SIZE	include/pybind11/detail/common.h	357;"	d
PYBIND11_CATCH_INIT_EXCEPTIONS	include/pybind11/detail/common.h	399;"	d
PYBIND11_CHECK_PYTHON_VERSION	include/pybind11/detail/common.h	382;"	d
PYBIND11_COMPAT_STRDUP	include/pybind11/pybind11.h	74;"	d
PYBIND11_COMPAT_STRDUP	include/pybind11/pybind11.h	76;"	d
PYBIND11_COMPILER_CLANG	include/pybind11/detail/common.h	41;"	d
PYBIND11_COMPILER_GCC	include/pybind11/detail/common.h	46;"	d
PYBIND11_COMPILER_INTEL	include/pybind11/detail/common.h	36;"	d
PYBIND11_COMPILER_MSVC	include/pybind11/detail/common.h	31;"	d
PYBIND11_COMPILER_TYPE	include/pybind11/detail/internals.h	264;"	d
PYBIND11_COMPILER_TYPE	include/pybind11/detail/internals.h	266;"	d
PYBIND11_COMPILER_TYPE	include/pybind11/detail/internals.h	268;"	d
PYBIND11_COMPILER_TYPE	include/pybind11/detail/internals.h	270;"	d
PYBIND11_COMPILER_TYPE	include/pybind11/detail/internals.h	272;"	d
PYBIND11_COMPILER_TYPE	include/pybind11/detail/internals.h	274;"	d
PYBIND11_COMPILER_TYPE	include/pybind11/detail/internals.h	276;"	d
PYBIND11_COMPILER_TYPE	include/pybind11/detail/internals.h	278;"	d
PYBIND11_CONCAT	include/pybind11/detail/common.h	379;"	d
PYBIND11_CPP14	include/pybind11/detail/common.h	111;"	d
PYBIND11_CPP14	include/pybind11/detail/common.h	97;"	d
PYBIND11_CPP17	include/pybind11/detail/common.h	113;"	d
PYBIND11_CPP17	include/pybind11/detail/common.h	99;"	d
PYBIND11_CPP20	include/pybind11/detail/common.h	101;"	d
PYBIND11_CPP20	include/pybind11/detail/common.h	115;"	d
PYBIND11_DEBUG_MARKER	include/pybind11/detail/common.h	227;"	d
PYBIND11_DEBUG_MARKER	include/pybind11/detail/common.h	298;"	d
PYBIND11_DECLARE_HOLDER_TYPE	include/pybind11/cast.h	852;"	d
PYBIND11_DEPRECATED	include/pybind11/detail/common.h	192;"	d
PYBIND11_DEPRECATED	include/pybind11/detail/common.h	194;"	d
PYBIND11_DEPRECATED	include/pybind11/detail/common.h	196;"	d
PYBIND11_DESCR_CONSTEXPR	include/pybind11/detail/descr.h	18;"	d
PYBIND11_DETAILED_ERROR_MESSAGES	include/pybind11/detail/common.h	1254;"	d
PYBIND11_DETAIL_UNDERSCORE_BACKWARD_COMPATIBILITY	include/pybind11/detail/descr.h	107;"	d
PYBIND11_DETECTED_CLANG_WITH_MISLEADING_CALL_STD_MOVE_EXPLICITLY_WARNING	include/pybind11/detail/common.h	1237;"	d
PYBIND11_EIGEN_MESSAGE_POINTER_TYPES_ARE_NOT_SUPPORTED	include/pybind11/eigen/common.h	7;"	d
PYBIND11_EMBEDDED_MODULE	include/pybind11/embed.h	41;"	d
PYBIND11_EMBEDDED_MODULE	tests/test_cmake_build/embed.cpp	/^PYBIND11_EMBEDDED_MODULE(test_cmake_build, m) {$/;"	f
PYBIND11_EMBEDDED_MODULE	tests/test_embed/test_interpreter.cpp	/^PYBIND11_EMBEDDED_MODULE(throw_error_already_set, ) {$/;"	f
PYBIND11_EMBEDDED_MODULE	tests/test_embed/test_interpreter.cpp	/^PYBIND11_EMBEDDED_MODULE(throw_exception, ) { throw std::runtime_error("C++ Error"); }$/;"	f
PYBIND11_EMBEDDED_MODULE	tests/test_embed/test_interpreter.cpp	/^PYBIND11_EMBEDDED_MODULE(trampoline_module, m) {$/;"	f
PYBIND11_EMBEDDED_MODULE	tests/test_embed/test_interpreter.cpp	/^PYBIND11_EMBEDDED_MODULE(widget_module, m) {$/;"	f
PYBIND11_EMBEDDED_MODULE_IMPL	include/pybind11/embed.h	22;"	d
PYBIND11_ENSURE_INTERNALS_READY	include/pybind11/detail/common.h	380;"	d
PYBIND11_ENUM_OP_CONV	include/pybind11/pybind11.h	2038;"	d
PYBIND11_ENUM_OP_CONV	include/pybind11/pybind11.h	2093;"	d
PYBIND11_ENUM_OP_CONV_LHS	include/pybind11/pybind11.h	2048;"	d
PYBIND11_ENUM_OP_CONV_LHS	include/pybind11/pybind11.h	2092;"	d
PYBIND11_ENUM_OP_STRICT	include/pybind11/pybind11.h	2027;"	d
PYBIND11_ENUM_OP_STRICT	include/pybind11/pybind11.h	2094;"	d
PYBIND11_EXPAND_SIDE_EFFECTS	include/pybind11/detail/common.h	978;"	d
PYBIND11_EXPORT	include/pybind11/detail/common.h	153;"	d
PYBIND11_EXPORT	include/pybind11/detail/common.h	155;"	d
PYBIND11_EXPORT_EXCEPTION	include/pybind11/detail/common.h	161;"	d
PYBIND11_EXPORT_EXCEPTION	include/pybind11/detail/common.h	163;"	d
PYBIND11_FROM_STRING	include/pybind11/detail/common.h	365;"	d
PYBIND11_HANDLE_REF_DEBUG	include/pybind11/pytypes.h	203;"	d
PYBIND11_HAS_EXPERIMENTAL_FILESYSTEM	include/pybind11/stl/filesystem.h	23;"	d
PYBIND11_HAS_EXP_OPTIONAL	include/pybind11/detail/common.h	245;"	d
PYBIND11_HAS_FILESYSTEM	include/pybind11/stl/filesystem.h	20;"	d
PYBIND11_HAS_FILESYSTEM_IS_OPTIONAL	tests/test_stl.cpp	16;"	d	file:
PYBIND11_HAS_OPTIONAL	include/pybind11/detail/common.h	240;"	d
PYBIND11_HAS_STD_LAUNDER	include/pybind11/pybind11.h	29;"	d
PYBIND11_HAS_STD_LAUNDER	include/pybind11/pybind11.h	32;"	d
PYBIND11_HAS_STRING_VIEW	include/pybind11/detail/common.h	259;"	d
PYBIND11_HAS_U8STRING	include/pybind11/detail/common.h	323;"	d
PYBIND11_HAS_VARIANT	include/pybind11/detail/common.h	249;"	d
PYBIND11_INPLACE_OP	include/pybind11/pytypes.h	392;"	d
PYBIND11_INPLACE_OP	include/pybind11/pytypes.h	404;"	d
PYBIND11_INPLACE_OPERATOR	include/pybind11/operators.h	131;"	d
PYBIND11_INPLACE_OPERATOR	include/pybind11/operators.h	194;"	d
PYBIND11_INSTANCE_METHOD_CHECK	include/pybind11/detail/common.h	350;"	d
PYBIND11_INSTANCE_METHOD_GET_FUNCTION	include/pybind11/detail/common.h	351;"	d
PYBIND11_INSTANCE_METHOD_NEW	include/pybind11/detail/common.h	349;"	d
PYBIND11_INTERNALS_ID	include/pybind11/detail/internals.h	310;"	d
PYBIND11_INTERNALS_KIND	include/pybind11/detail/internals.h	304;"	d
PYBIND11_INTERNALS_KIND	include/pybind11/detail/internals.h	306;"	d
PYBIND11_INTERNALS_VERSION	include/pybind11/detail/internals.h	39;"	d
PYBIND11_INTERNALS_VERSION	include/pybind11/detail/internals.h	41;"	d
PYBIND11_INTERNALS_VERSION	tests/cross_module_gil_utils.cpp	10;"	d	file:
PYBIND11_INTERNALS_VERSION	tests/cross_module_gil_utils.cpp	12;"	d	file:
PYBIND11_LOCAL_DEF	tests/test_pytypes.cpp	402;"	d	file:
PYBIND11_LOCAL_DEF	tests/test_pytypes.cpp	432;"	d	file:
PYBIND11_LONG_AS_LONGLONG	include/pybind11/detail/common.h	359;"	d
PYBIND11_LONG_CHECK	include/pybind11/detail/common.h	358;"	d
PYBIND11_LONG_FROM_SIGNED	include/pybind11/detail/common.h	360;"	d
PYBIND11_LONG_FROM_UNSIGNED	include/pybind11/detail/common.h	361;"	d
PYBIND11_MAKE_OPAQUE	include/pybind11/cast.h	1691;"	d
PYBIND11_MATH_OPERATOR_BINARY	include/pybind11/pytypes.h	2508;"	d
PYBIND11_MATH_OPERATOR_BINARY	include/pybind11/pytypes.h	2548;"	d
PYBIND11_MATH_OPERATOR_BINARY_INPLACE	include/pybind11/pytypes.h	2517;"	d
PYBIND11_MATH_OPERATOR_BINARY_INPLACE	include/pybind11/pytypes.h	2549;"	d
PYBIND11_MATH_OPERATOR_UNARY	include/pybind11/pytypes.h	2499;"	d
PYBIND11_MATH_OPERATOR_UNARY	include/pybind11/pytypes.h	2547;"	d
PYBIND11_MAYBE_UNUSED	include/pybind11/detail/common.h	200;"	d
PYBIND11_MAYBE_UNUSED	include/pybind11/detail/common.h	202;"	d
PYBIND11_MAYBE_UNUSED	include/pybind11/detail/common.h	204;"	d
PYBIND11_MODULE	include/pybind11/detail/common.h	458;"	d
PYBIND11_MODULE	tests/eigen_tensor_avoid_stl_array.cpp	/^PYBIND11_MODULE(eigen_tensor_avoid_stl_array, m) { eigen_tensor_test::test_module(m); }$/;"	f
PYBIND11_MODULE	tests/pybind11_cross_module_tests.cpp	/^PYBIND11_MODULE(pybind11_cross_module_tests, m) {$/;"	f
PYBIND11_MODULE	tests/pybind11_tests.cpp	/^PYBIND11_MODULE(pybind11_tests, m) {$/;"	f
PYBIND11_MODULE	tests/test_cmake_build/main.cpp	/^PYBIND11_MODULE(test_cmake_build, m) {$/;"	f
PYBIND11_MODULE	tests/test_embed/external_module.cpp	/^PYBIND11_MODULE(external_module, m) {$/;"	f
PYBIND11_MODULE_LOCAL_ID	include/pybind11/detail/internals.h	315;"	d
PYBIND11_NAMESPACE	include/pybind11/detail/common.h	89;"	d
PYBIND11_NAMESPACE	include/pybind11/detail/common.h	91;"	d
PYBIND11_NAMESPACE	tests/test_custom_type_casters.cpp	/^namespace PYBIND11_NAMESPACE {$/;"	n	file:
PYBIND11_NAMESPACE	tests/test_custom_type_casters.cpp	/^namespace PYBIND11_NAMESPACE {}$/;"	n	namespace:other_lib	file:
PYBIND11_NAMESPACE	tests/test_stl.cpp	/^namespace PYBIND11_NAMESPACE {$/;"	n	file:
PYBIND11_NAMESPACE	tests/test_tagbased_polymorphic.cpp	/^namespace PYBIND11_NAMESPACE {$/;"	n	struct:Animal	file:
PYBIND11_NAMESPACE_BEGIN	include/pybind11/detail/common.h	76;"	d
PYBIND11_NAMESPACE_END	include/pybind11/detail/common.h	80;"	d
PYBIND11_NB_BOOL	include/pybind11/detail/common.h	368;"	d
PYBIND11_NOINLINE	include/pybind11/detail/common.h	182;"	d
PYBIND11_NOINLINE	include/pybind11/detail/common.h	184;"	d
PYBIND11_NOINLINE	include/pybind11/detail/common.h	186;"	d
PYBIND11_NOINLINE_DISABLED	include/pybind11/detail/common.h	175;"	d
PYBIND11_OBJECT	include/pybind11/pytypes.h	1392;"	d
PYBIND11_OBJECT_CHECK_FAILED	include/pybind11/pytypes.h	1387;"	d
PYBIND11_OBJECT_COMMON	include/pybind11/pytypes.h	1355;"	d
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	1368;"	d
PYBIND11_OBJECT_CVT_DEFAULT	include/pybind11/pytypes.h	1383;"	d
PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	1406;"	d
PYBIND11_OVERLOAD	include/pybind11/pybind11.h	2885;"	d
PYBIND11_OVERLOAD_CAST	include/pybind11/detail/common.h	1117;"	d
PYBIND11_OVERLOAD_INT	include/pybind11/pybind11.h	2878;"	d
PYBIND11_OVERLOAD_NAME	include/pybind11/pybind11.h	2880;"	d
PYBIND11_OVERLOAD_PURE	include/pybind11/pybind11.h	2887;"	d
PYBIND11_OVERLOAD_PURE_NAME	include/pybind11/pybind11.h	2882;"	d
PYBIND11_OVERRIDE	include/pybind11/pybind11.h	2854;"	d
PYBIND11_OVERRIDE_IMPL	include/pybind11/pybind11.h	2779;"	d
PYBIND11_OVERRIDE_NAME	include/pybind11/pybind11.h	2812;"	d
PYBIND11_OVERRIDE_PURE	include/pybind11/pybind11.h	2861;"	d
PYBIND11_OVERRIDE_PURE_NAME	include/pybind11/pybind11.h	2822;"	d
PYBIND11_PACKED	tests/test_numpy_dtypes.cpp	15;"	d	file:
PYBIND11_PACKED	tests/test_numpy_dtypes.cpp	17;"	d	file:
PYBIND11_PLUGIN	include/pybind11/detail/common.h	424;"	d
PYBIND11_PLUGIN_IMPL	include/pybind11/detail/common.h	372;"	d
PYBIND11_PRAGMA	include/pybind11/detail/common.h	32;"	d
PYBIND11_PRAGMA	include/pybind11/detail/common.h	37;"	d
PYBIND11_PRAGMA	include/pybind11/detail/common.h	42;"	d
PYBIND11_PRAGMA	include/pybind11/detail/common.h	47;"	d
PYBIND11_PYCONFIG_SUPPORT_PY_VERSION_HEX	include/pybind11/embed.h	96;"	d
PYBIND11_RUNTIME_EXCEPTION	include/pybind11/detail/common.h	995;"	d
PYBIND11_SET_OLDPY_QUALNAME	include/pybind11/detail/class.h	20;"	d
PYBIND11_SIMPLE_GIL_MANAGEMENT	include/pybind11/detail/common.h	292;"	d
PYBIND11_SLICE_OBJECT	include/pybind11/detail/common.h	364;"	d
PYBIND11_STDLIB	include/pybind11/detail/internals.h	285;"	d
PYBIND11_STDLIB	include/pybind11/detail/internals.h	287;"	d
PYBIND11_STDLIB	include/pybind11/detail/internals.h	289;"	d
PYBIND11_STD_LAUNDER	include/pybind11/pybind11.h	28;"	d
PYBIND11_STD_LAUNDER	include/pybind11/pybind11.h	31;"	d
PYBIND11_STRINGIFY	include/pybind11/detail/common.h	377;"	d
PYBIND11_STRING_NAME	include/pybind11/detail/common.h	363;"	d
PYBIND11_STR_CHECK_FUN	include/pybind11/pytypes.h	1313;"	d
PYBIND11_STR_CHECK_FUN	include/pybind11/pytypes.h	1315;"	d
PYBIND11_STR_TYPE	include/pybind11/detail/common.h	366;"	d
PYBIND11_TEST_EIGEN_TENSOR_NAMESPACE	tests/test_eigen_tensor.cpp	8;"	d	file:
PYBIND11_TEST_VARIANT	tests/test_stl.cpp	40;"	d	file:
PYBIND11_THROW	include/pybind11/pybind11.h	2083;"	d
PYBIND11_THROW	include/pybind11/pybind11.h	2088;"	d
PYBIND11_TLS_DELETE_VALUE	include/pybind11/detail/internals.h	110;"	d
PYBIND11_TLS_DELETE_VALUE	include/pybind11/detail/internals.h	114;"	d
PYBIND11_TLS_DELETE_VALUE	include/pybind11/detail/internals.h	84;"	d
PYBIND11_TLS_DELETE_VALUE	include/pybind11/detail/internals.h	93;"	d
PYBIND11_TLS_FREE	include/pybind11/detail/internals.h	117;"	d
PYBIND11_TLS_FREE	include/pybind11/detail/internals.h	85;"	d
PYBIND11_TLS_FREE	include/pybind11/detail/internals.h	94;"	d
PYBIND11_TLS_GET_VALUE	include/pybind11/detail/internals.h	101;"	d
PYBIND11_TLS_GET_VALUE	include/pybind11/detail/internals.h	82;"	d
PYBIND11_TLS_GET_VALUE	include/pybind11/detail/internals.h	91;"	d
PYBIND11_TLS_KEY_CREATE	include/pybind11/detail/internals.h	100;"	d
PYBIND11_TLS_KEY_CREATE	include/pybind11/detail/internals.h	81;"	d
PYBIND11_TLS_KEY_CREATE	include/pybind11/detail/internals.h	89;"	d
PYBIND11_TLS_KEY_INIT	include/pybind11/detail/internals.h	72;"	d
PYBIND11_TLS_KEY_INIT	include/pybind11/detail/internals.h	79;"	d
PYBIND11_TLS_KEY_INIT	include/pybind11/detail/internals.h	88;"	d
PYBIND11_TLS_KEY_INIT	include/pybind11/detail/internals.h	99;"	d
PYBIND11_TLS_KEY_REF	include/pybind11/detail/internals.h	68;"	d
PYBIND11_TLS_KEY_REF	include/pybind11/detail/internals.h	87;"	d
PYBIND11_TLS_KEY_REF	include/pybind11/detail/internals.h	98;"	d
PYBIND11_TLS_REPLACE_VALUE	include/pybind11/detail/internals.h	111;"	d
PYBIND11_TLS_REPLACE_VALUE	include/pybind11/detail/internals.h	115;"	d
PYBIND11_TLS_REPLACE_VALUE	include/pybind11/detail/internals.h	83;"	d
PYBIND11_TLS_REPLACE_VALUE	include/pybind11/detail/internals.h	92;"	d
PYBIND11_TOSTRING	include/pybind11/detail/common.h	378;"	d
PYBIND11_TRY_NEXT_OVERLOAD	include/pybind11/detail/common.h	376;"	d
PYBIND11_TYPE	include/pybind11/cast.h	1702;"	d
PYBIND11_TYPE_CASTER	include/pybind11/cast.h	85;"	d
PYBIND11_UNARY_OPERATOR	include/pybind11/operators.h	143;"	d
PYBIND11_UNARY_OPERATOR	include/pybind11/operators.h	195;"	d
PYBIND11_VERSION_HEX	include/pybind11/detail/common.h	18;"	d
PYBIND11_VERSION_MAJOR	include/pybind11/detail/common.h	12;"	d
PYBIND11_VERSION_MINOR	include/pybind11/detail/common.h	13;"	d
PYBIND11_VERSION_PATCH	include/pybind11/detail/common.h	14;"	d
PYBIND11_WARNING_DISABLE_CLANG	include/pybind11/detail/common.h	59;"	d
PYBIND11_WARNING_DISABLE_CLANG	include/pybind11/detail/common.h	61;"	d
PYBIND11_WARNING_DISABLE_GCC	include/pybind11/detail/common.h	65;"	d
PYBIND11_WARNING_DISABLE_GCC	include/pybind11/detail/common.h	67;"	d
PYBIND11_WARNING_DISABLE_INTEL	include/pybind11/detail/common.h	71;"	d
PYBIND11_WARNING_DISABLE_INTEL	include/pybind11/detail/common.h	73;"	d
PYBIND11_WARNING_DISABLE_MSVC	include/pybind11/detail/common.h	53;"	d
PYBIND11_WARNING_DISABLE_MSVC	include/pybind11/detail/common.h	55;"	d
PYBIND11_WARNING_POP	include/pybind11/detail/common.h	34;"	d
PYBIND11_WARNING_POP	include/pybind11/detail/common.h	39;"	d
PYBIND11_WARNING_POP	include/pybind11/detail/common.h	44;"	d
PYBIND11_WARNING_POP	include/pybind11/detail/common.h	49;"	d
PYBIND11_WARNING_PUSH	include/pybind11/detail/common.h	33;"	d
PYBIND11_WARNING_PUSH	include/pybind11/detail/common.h	38;"	d
PYBIND11_WARNING_PUSH	include/pybind11/detail/common.h	43;"	d
PYBIND11_WARNING_PUSH	include/pybind11/detail/common.h	48;"	d
PYBIND11_WORKAROUND_INCORRECT_GCC_UNUSED_BUT_SET_PARAMETER	include/pybind11/detail/common.h	1225;"	d
PYBIND11_WORKAROUND_INCORRECT_GCC_UNUSED_BUT_SET_PARAMETER	include/pybind11/detail/common.h	1228;"	d
PYBIND11_WORKAROUND_INCORRECT_MSVC_C4100	include/pybind11/detail/common.h	1217;"	d
PYBIND11_WORKAROUND_INCORRECT_MSVC_C4100	include/pybind11/detail/common.h	1220;"	d
PYPY	tests/env.py	/^PYPY = platform.python_implementation() == "PyPy"$/;"	v
PYTHON_VERSIONS	noxfile.py	/^PYTHON_VERSIONS = [$/;"	v
Panther	tests/test_tagbased_polymorphic.cpp	/^        Panther,$/;"	m	class:Animal::Kind	file:
Panther	tests/test_tagbased_polymorphic.cpp	/^    explicit Panther(const std::string &_name) : Cat(_name, Kind::Panther) {}$/;"	f	struct:Animal::Panther
Panther	tests/test_tagbased_polymorphic.cpp	/^struct Panther : Cat {$/;"	s	struct:Animal	file:
ParallelCompile	pybind11/setup_helpers.py	/^class ParallelCompile:$/;"	c
PartialNestedStruct	tests/test_numpy_dtypes.cpp	/^struct PartialNestedStruct {$/;"	s	file:
PartialStruct	tests/test_numpy_dtypes.cpp	/^struct PartialStruct {$/;"	s	file:
Pet	tests/local_bindings.h	/^    explicit Pet(std::string name) : name_(std::move(name)) {}$/;"	f	class:pets::Pet
Pet	tests/local_bindings.h	/^class Pet {$/;"	c	namespace:pets
PseudoBytesPath	tests/test_stl.py	/^    class PseudoBytesPath:$/;"	c	function:test_fs_path
PseudoStrPath	tests/test_stl.py	/^    class PseudoStrPath:$/;"	c	function:test_fs_path
PyA_Repeat	tests/test_virtual_functions.cpp	/^class PyA_Repeat : public A_Repeat {$/;"	c	file:
PyA_Tpl	tests/test_virtual_functions.cpp	/^class PyA_Tpl : public Base {$/;"	c	file:
PyArrayDescr_Check_	include/pybind11/numpy.h	/^    bool PyArrayDescr_Check_(PyObject *obj) const {$/;"	f	struct:npy_api
PyArrayDescr_Proxy	include/pybind11/numpy.h	/^struct PyArrayDescr_Proxy {$/;"	s
PyArrayDescr_Type_	include/pybind11/numpy.h	/^    PyTypeObject *PyArrayDescr_Type_;$/;"	m	struct:npy_api
PyArray_Check_	include/pybind11/numpy.h	/^    bool PyArray_Check_(PyObject *obj) const {$/;"	f	struct:npy_api
PyArray_CopyInto_	include/pybind11/numpy.h	/^    int (*PyArray_CopyInto_)(PyObject *, PyObject *);$/;"	m	struct:npy_api
PyArray_DescrConverter_	include/pybind11/numpy.h	/^    int (*PyArray_DescrConverter_)(PyObject *, PyObject **);$/;"	m	struct:npy_api
PyArray_DescrFromScalar_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrFromScalar_)(PyObject *);$/;"	m	struct:npy_api
PyArray_DescrFromType_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrFromType_)(int);$/;"	m	struct:npy_api
PyArray_DescrNewFromType_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrNewFromType_)(int);$/;"	m	struct:npy_api
PyArray_Dims	include/pybind11/numpy.h	/^    struct PyArray_Dims {$/;"	s	struct:npy_api
PyArray_EquivTypes_	include/pybind11/numpy.h	/^    bool (*PyArray_EquivTypes_)(PyObject *, PyObject *);$/;"	m	struct:npy_api
PyArray_FromAny_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_FromAny_)(PyObject *, PyObject *, int, int, int, PyObject *);$/;"	m	struct:npy_api
PyArray_GetArrayParamsFromObject_	include/pybind11/numpy.h	/^    int (*PyArray_GetArrayParamsFromObject_)(PyObject *,$/;"	m	struct:npy_api
PyArray_GetNDArrayCFeatureVersion_	include/pybind11/numpy.h	/^    unsigned int (*PyArray_GetNDArrayCFeatureVersion_)();$/;"	m	struct:npy_api
PyArray_NewCopy_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_NewCopy_)(PyObject *, int);$/;"	m	struct:npy_api
PyArray_NewFromDescr_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_NewFromDescr_)(PyTypeObject *,$/;"	m	struct:npy_api
PyArray_Newshape_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_Newshape_)(PyObject *, PyArray_Dims *, int);$/;"	m	struct:npy_api
PyArray_Proxy	include/pybind11/numpy.h	/^struct PyArray_Proxy {$/;"	s
PyArray_Resize_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_Resize_)(PyObject *, PyArray_Dims *, int, int);$/;"	m	struct:npy_api
PyArray_SetBaseObject_	include/pybind11/numpy.h	/^    int (*PyArray_SetBaseObject_)(PyObject *, PyObject *);$/;"	m	struct:npy_api
PyArray_Squeeze_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_Squeeze_)(PyObject *);$/;"	m	struct:npy_api
PyArray_Type_	include/pybind11/numpy.h	/^    PyTypeObject *PyArray_Type_;$/;"	m	struct:npy_api
PyArray_View_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_View_)(PyObject *, PyObject *, PyObject *);$/;"	m	struct:npy_api
PyB_Repeat	tests/test_virtual_functions.cpp	/^class PyB_Repeat : public B_Repeat {$/;"	c	file:
PyB_Tpl	tests/test_virtual_functions.cpp	/^class PyB_Tpl : public PyA_Tpl<Base> {$/;"	c	file:
PyC_Repeat	tests/test_virtual_functions.cpp	/^class PyC_Repeat : public C_Repeat {$/;"	c	file:
PyClass1	tests/test_virtual_functions.py	/^    class PyClass1(m.DispatchIssue):$/;"	c	function:test_dispatch_issue
PyClass2	tests/test_virtual_functions.py	/^    class PyClass2(m.DispatchIssue):$/;"	c	function:test_dispatch_issue
PyD_Repeat	tests/test_virtual_functions.cpp	/^class PyD_Repeat : public D_Repeat {$/;"	c	file:
PyDog	tests/test_class.py	/^    class PyDog(m.Dog):$/;"	c	function:test_class_refcount
PyEllipsis_Check	include/pybind11/pytypes.h	/^inline bool PyEllipsis_Check(PyObject *o) { return o == Py_Ellipsis; }$/;"	f	class:handle
PyExampleVirt	tests/test_virtual_functions.cpp	/^class PyExampleVirt : public ExampleVirt {$/;"	c	file:
PyFinalChild	tests/test_class.py	/^        class PyFinalChild(m.IsFinal):$/;"	c	function:test_final
PyInit_cross_module_gil_utils	tests/cross_module_gil_utils.cpp	/^extern "C" PYBIND11_EXPORT PyObject *PyInit_cross_module_gil_utils() {$/;"	f
PyInit_cross_module_interleaved_error_already_set	tests/cross_module_interleaved_error_already_set.cpp	/^extern "C" PYBIND11_EXPORT PyObject *PyInit_cross_module_interleaved_error_already_set() {$/;"	f
PyIterable_Check	include/pybind11/pytypes.h	/^inline bool PyIterable_Check(PyObject *obj) {$/;"	f	class:handle
PyMVF	tests/test_multiple_inheritance.py	/^    class PyMVF(m.MVF):$/;"	c	function:test_python_inherit_from_mi
PyNonFinalFinalChild	tests/test_class.py	/^        class PyNonFinalFinalChild(m.IsNonFinalFinal):$/;"	c	function:test_non_final_final
PyNone_Check	include/pybind11/pytypes.h	/^inline bool PyNone_Check(PyObject *o) { return o == Py_None; }$/;"	f	class:handle
PyStaticMethod_Check	include/pybind11/pytypes.h	/^inline bool PyStaticMethod_Check(PyObject *o) { return o->ob_type == &PyStaticMethod_Type; }$/;"	f	class:handle
PyTF6	tests/test_factory_constructors.cpp	/^    PyTF6(const PyTF6 &f) : TestFactory6(f) { print_copy_created(this); }$/;"	f	class:PyTF6
PyTF6	tests/test_factory_constructors.cpp	/^    explicit PyTF6(TestFactory6 &&base) : TestFactory6(std::move(base)) {$/;"	f	class:PyTF6
PyTF6	tests/test_factory_constructors.cpp	/^    explicit PyTF6(int i) : TestFactory6(i) {$/;"	f	class:PyTF6
PyTF6	tests/test_factory_constructors.cpp	/^    explicit PyTF6(std::string s) : TestFactory6((int) s.size()) {$/;"	f	class:PyTF6
PyTF6	tests/test_factory_constructors.cpp	/^class PyTF6 : public TestFactory6 {$/;"	c	file:
PyTF7	tests/test_factory_constructors.cpp	/^    PyTF7(const PyTF7 &f) : TestFactory7(f) { print_copy_created(this); }$/;"	f	class:PyTF7
PyTF7	tests/test_factory_constructors.cpp	/^    explicit PyTF7(int i) : TestFactory7(i) {$/;"	f	class:PyTF7
PyTF7	tests/test_factory_constructors.cpp	/^class PyTF7 : public TestFactory7 {$/;"	c	file:
PyUnicode_Check_Permissive	include/pybind11/pytypes.h	/^inline bool PyUnicode_Check_Permissive(PyObject *o) {$/;"	f	class:handle
PyValueHolder	tests/test_numpy_array.py	/^class PyValueHolder:$/;"	c
PyVirtClass	tests/test_gil_scoped.cpp	/^class PyVirtClass : public VirtClass {$/;"	c	file:
PyVoidArrType_Type_	include/pybind11/numpy.h	/^    PyTypeObject *PyVoidArrType_Type_;$/;"	m	struct:npy_api
PyVoidScalarObject_Proxy	include/pybind11/numpy.h	/^struct PyVoidScalarObject_Proxy {$/;"	s
Pybind11Extension	pybind11/setup_helpers.py	/^class Pybind11Extension(_Extension):$/;"	c
PythFactory7	tests/test_factory_constructors.py	/^    class PythFactory7(TestFactory7):$/;"	c	function:test_init_factory_dual
Python	tests/test_class.py	/^    class Python(m.Pet):$/;"	c	function:test_inheritance_init
PythonAlreadySetInDestructor	tests/test_exceptions.cpp	/^    explicit PythonAlreadySetInDestructor(const py::str &s) : s(s) {}$/;"	f	struct:PythonAlreadySetInDestructor
PythonAlreadySetInDestructor	tests/test_exceptions.cpp	/^struct PythonAlreadySetInDestructor {$/;"	s	file:
PythonCallInDestructor	tests/test_exceptions.cpp	/^    explicit PythonCallInDestructor(const py::dict &d) : d(d) {}$/;"	f	struct:PythonCallInDestructor
PythonCallInDestructor	tests/test_exceptions.cpp	/^struct PythonCallInDestructor {$/;"	s	file:
PythonDerivedDynamicClass	tests/test_methods_and_attributes.py	/^    class PythonDerivedDynamicClass(m.DynamicClass):$/;"	c	function:test_dynamic_attributes
RValueCaster	tests/pybind11_tests.h	/^struct RValueCaster {};$/;"	s
RValueRefParam	tests/test_methods_and_attributes.cpp	/^struct RValueRefParam {$/;"	s	file:
RabbitHamster	tests/test_class.py	/^    class RabbitHamster(m.Rabbit, m.Hamster):$/;"	c	function:test_inheritance_init
RaisingRepr	tests/test_constants_and_functions.py	/^    class RaisingRepr:$/;"	c	function:test_function_record_leaks
RaisingTypeErrorOnIndex	tests/test_builtin_casters.py	/^    class RaisingTypeErrorOnIndex:$/;"	c	function:test_int_convert
RaisingValueErrorOnIndex	tests/test_builtin_casters.py	/^    class RaisingValueErrorOnIndex:$/;"	c	function:test_int_convert
RecursiveMap	tests/test_copy_move.cpp	/^struct RecursiveMap : std::map<int, RecursiveMap> {};$/;"	s	file:
RecursiveMap	tests/test_stl_binders.cpp	/^struct RecursiveMap : std::map<int, RecursiveMap> {$/;"	s	file:
RecursiveVector	tests/test_copy_move.cpp	/^struct RecursiveVector : std::vector<RecursiveVector> {};$/;"	s	file:
RecursiveVector	tests/test_stl_binders.cpp	/^struct RecursiveVector : std::vector<RecursiveVector> {$/;"	s	file:
RefQualified	tests/test_methods_and_attributes.cpp	/^struct RefQualified {$/;"	s	file:
ReferenceSensitiveOptional	tests/test_stl.cpp	/^    ReferenceSensitiveOptional(T &&value) : storage{std::move(value)} {}$/;"	f	class:ReferenceSensitiveOptional
ReferenceSensitiveOptional	tests/test_stl.cpp	/^    ReferenceSensitiveOptional(const T &value) : storage{value} {}$/;"	f	class:ReferenceSensitiveOptional
ReferenceSensitiveOptional	tests/test_stl.cpp	/^class ReferenceSensitiveOptional {$/;"	c	file:
RegisteredDerived	tests/test_methods_and_attributes.cpp	/^class RegisteredDerived : public UnregisteredBase {$/;"	c	file:
Return	include/pybind11/pybind11.h	/^    class_ &def_buffer(Return (Class::*func)(Args...) const) {$/;"	f	class:class_
Return	include/pybind11/pybind11.h	/^    class_ &def_buffer(Return (Class::*func)(Args...)) {$/;"	f	class:class_
Return	include/pybind11/pybind11.h	/^auto method_adaptor(Return (Class::*pmf)(Args...) const) -> Return (Derived::*)(Args...) const {$/;"	f
Return	include/pybind11/pybind11.h	/^auto method_adaptor(Return (Class::*pmf)(Args...)) -> Return (Derived::*)(Args...) {$/;"	f
Right	tests/test_embed/test_interpreter.cpp	/^    test_override_cache_helper &operator=(test_override_cache_helper const &Right) = delete;$/;"	m	class:test_override_cache_helper	file:
Right	tests/test_virtual_functions.cpp	/^    test_override_cache_helper &operator=(test_override_cache_helper const &Right) = delete;$/;"	m	class:test_override_cache_helper	file:
S	pybind11/setup_helpers.py	/^S = TypeVar("S", bound="ParallelCompile")$/;"	v
SDist	setup.py	/^class SDist(setuptools.command.sdist.sdist):$/;"	c
SET_TEST_VALS	tests/test_numpy_dtypes.cpp	156;"	d	file:
SKIP_TZ_ENV_ON_WIN	tests/test_chrono.py	/^SKIP_TZ_ENV_ON_WIN = pytest.mark.skipif($/;"	v
SPHINXBUILD	docs/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXOPTS	docs/Makefile	/^SPHINXOPTS    =$/;"	m
SanitizedString	tests/conftest.py	/^class SanitizedString:$/;"	c
SequenceLike	tests/test_sequences_and_iterators.py	/^    class SequenceLike:$/;"	c	function:test_sequence_length
SetIntValue	tests/test_methods_and_attributes.cpp	/^    FieldBase &SetIntValue(int int_value) {$/;"	f	struct:pybind11_tests::exercise_is_setter::FieldBase
SharedFromThisRef	tests/test_smart_ptr.cpp	/^struct SharedFromThisRef {$/;"	s	namespace:__anon9	file:
SharedFromThisVBase	tests/test_smart_ptr.cpp	/^struct SharedFromThisVBase : std::enable_shared_from_this<SharedFromThisVBase> {$/;"	s	file:
SharedFromThisVirt	tests/test_smart_ptr.cpp	/^struct SharedFromThisVirt : virtual SharedFromThisVBase {};$/;"	s	file:
SharedPtrRef	tests/test_smart_ptr.cpp	/^struct SharedPtrRef {$/;"	s	namespace:__anon9	file:
SimpleBase	tests/test_pickling.cpp	/^struct SimpleBase {$/;"	s	namespace:exercise_trampoline	file:
SimpleBaseTrampoline	tests/test_pickling.cpp	/^struct SimpleBaseTrampoline : SimpleBase {};$/;"	s	namespace:exercise_trampoline	file:
SimpleCppDerived	tests/test_pickling.cpp	/^struct SimpleCppDerived : SimpleBase {};$/;"	s	namespace:exercise_trampoline	file:
SimplePyDerived	tests/test_pickling.py	/^class SimplePyDerived(m.SimpleBase):$/;"	c
SimpleStruct	tests/test_numpy_dtypes.cpp	/^struct SimpleStruct {$/;"	s	file:
SimpleStructReordered	tests/test_numpy_dtypes.cpp	/^struct SimpleStructReordered {$/;"	s	file:
SoEmpty	tests/test_class.cpp	/^struct SoEmpty {};$/;"	s	namespace:test_class::pr4220_tripped_over_this	file:
StoreResultVisitor	tests/test_virtual_functions.py	/^    class StoreResultVisitor:$/;"	c	function:test_recursive_dispatch_issue
StrIssue	tests/test_methods_and_attributes.cpp	/^    explicit StrIssue(int i) : val{i} {}$/;"	f	struct:StrIssue
StrIssue	tests/test_methods_and_attributes.cpp	/^struct StrIssue {$/;"	s	file:
StringStruct	tests/test_numpy_dtypes.cpp	/^struct StringStruct {$/;"	s	file:
SubAliased	tests/test_class.py	/^    class SubAliased(m.AliasedHasOpNewDelSize):$/;"	c	function:test_operator_new_delete
SubTestObject	tests/test_pytypes.py	/^    class SubTestObject:$/;"	c	function:test_accessors
TEST_SUBMODULE	tests/pybind11_tests.h	17;"	d
TEST_SUBMODULE	tests/test_async.cpp	/^TEST_SUBMODULE(async_module, m) {$/;"	f
TEST_SUBMODULE	tests/test_buffers.cpp	/^TEST_SUBMODULE(buffers, m) {$/;"	f
TEST_SUBMODULE	tests/test_builtin_casters.cpp	/^TEST_SUBMODULE(builtin_casters, m) {$/;"	f
TEST_SUBMODULE	tests/test_call_policies.cpp	/^TEST_SUBMODULE(call_policies, m) {$/;"	f
TEST_SUBMODULE	tests/test_callbacks.cpp	/^TEST_SUBMODULE(callbacks, m) {$/;"	f
TEST_SUBMODULE	tests/test_chrono.cpp	/^TEST_SUBMODULE(chrono, m) {$/;"	f
TEST_SUBMODULE	tests/test_class.cpp	/^TEST_SUBMODULE(class_, m) {$/;"	f
TEST_SUBMODULE	tests/test_const_name.cpp	/^TEST_SUBMODULE(const_name, m) {$/;"	f
TEST_SUBMODULE	tests/test_constants_and_functions.cpp	/^TEST_SUBMODULE(constants_and_functions, m) {$/;"	f
TEST_SUBMODULE	tests/test_copy_move.cpp	/^TEST_SUBMODULE(copy_move_policies, m) {$/;"	f
TEST_SUBMODULE	tests/test_custom_type_casters.cpp	/^TEST_SUBMODULE(custom_type_casters, m) {$/;"	f
TEST_SUBMODULE	tests/test_custom_type_setup.cpp	/^TEST_SUBMODULE(custom_type_setup, m) {$/;"	f
TEST_SUBMODULE	tests/test_docstring_options.cpp	/^TEST_SUBMODULE(docstring_options, m) {$/;"	f
TEST_SUBMODULE	tests/test_eigen_matrix.cpp	/^TEST_SUBMODULE(eigen_matrix, m) {$/;"	f
TEST_SUBMODULE	tests/test_enum.cpp	/^TEST_SUBMODULE(enums, m) {$/;"	f
TEST_SUBMODULE	tests/test_eval.cpp	/^TEST_SUBMODULE(eval_, m) {$/;"	f
TEST_SUBMODULE	tests/test_exceptions.cpp	/^TEST_SUBMODULE(exceptions, m) {$/;"	f
TEST_SUBMODULE	tests/test_factory_constructors.cpp	/^TEST_SUBMODULE(factory_constructors, m) {$/;"	f
TEST_SUBMODULE	tests/test_gil_scoped.cpp	/^TEST_SUBMODULE(gil_scoped, m) {$/;"	f
TEST_SUBMODULE	tests/test_iostream.cpp	/^TEST_SUBMODULE(iostream, m) {$/;"	f
TEST_SUBMODULE	tests/test_kwargs_and_defaults.cpp	/^TEST_SUBMODULE(kwargs_and_defaults, m) {$/;"	f
TEST_SUBMODULE	tests/test_local_bindings.cpp	/^TEST_SUBMODULE(local_bindings, m) {$/;"	f
TEST_SUBMODULE	tests/test_methods_and_attributes.cpp	/^TEST_SUBMODULE(methods_and_attributes, m) {$/;"	f
TEST_SUBMODULE	tests/test_modules.cpp	/^TEST_SUBMODULE(modules, m) {$/;"	f
TEST_SUBMODULE	tests/test_multiple_inheritance.cpp	/^TEST_SUBMODULE(multiple_inheritance, m) {$/;"	f
TEST_SUBMODULE	tests/test_numpy_array.cpp	/^TEST_SUBMODULE(numpy_array, sm) {$/;"	f
TEST_SUBMODULE	tests/test_numpy_dtypes.cpp	/^TEST_SUBMODULE(numpy_dtypes, m) {$/;"	f	class:E1	file:
TEST_SUBMODULE	tests/test_numpy_vectorize.cpp	/^TEST_SUBMODULE(numpy_vectorize, m) {$/;"	f
TEST_SUBMODULE	tests/test_opaque_types.cpp	/^TEST_SUBMODULE(opaque_types, m) {$/;"	f
TEST_SUBMODULE	tests/test_operator_overloading.cpp	/^TEST_SUBMODULE(operators, m) {$/;"	f
TEST_SUBMODULE	tests/test_pickling.cpp	/^TEST_SUBMODULE(pickling, m) {$/;"	f
TEST_SUBMODULE	tests/test_pytypes.cpp	/^TEST_SUBMODULE(pytypes, m) {$/;"	f
TEST_SUBMODULE	tests/test_sequences_and_iterators.cpp	/^TEST_SUBMODULE(sequences_and_iterators, m) {$/;"	f
TEST_SUBMODULE	tests/test_stl.cpp	/^TEST_SUBMODULE(stl, m) {$/;"	f
TEST_SUBMODULE	tests/test_stl_binders.cpp	/^TEST_SUBMODULE(stl_binders, m) {$/;"	f
TEST_SUBMODULE	tests/test_tagbased_polymorphic.cpp	/^TEST_SUBMODULE(tagbased_polymorphic, m) {$/;"	f	struct:Animal
TEST_SUBMODULE	tests/test_thread.cpp	/^TEST_SUBMODULE(thread, m) {$/;"	f
TEST_SUBMODULE	tests/test_type_caster_pyobject_ptr.cpp	/^TEST_SUBMODULE(type_caster_pyobject_ptr, m) {$/;"	f
TEST_SUBMODULE	tests/test_union.cpp	/^TEST_SUBMODULE(union_, m) {$/;"	f
TEST_SUBMODULE	tests/test_unnamed_namespace_a.cpp	/^TEST_SUBMODULE(unnamed_namespace_a, m) {$/;"	f
TEST_SUBMODULE	tests/test_unnamed_namespace_b.cpp	/^TEST_SUBMODULE(unnamed_namespace_b, m) {$/;"	f
TEST_SUBMODULE	tests/test_vector_unique_ptr_member.cpp	/^TEST_SUBMODULE(vector_unique_ptr_member, m) {$/;"	f
TEST_SUBMODULE	tests/test_virtual_functions.cpp	/^TEST_SUBMODULE(virtual_functions, m) {$/;"	f
Test	tests/test_embed/test_trampoline.py	/^    class Test(trampoline_module.test_override_cache_helper):$/;"	c	function:func
Test	tests/test_embed/test_trampoline.py	/^    class Test(trampoline_module.test_override_cache_helper):$/;"	c	function:func2
Test	tests/test_virtual_functions.py	/^        class Test(m.test_override_cache_helper):$/;"	c	function:test_python_override.func
Test	tests/test_virtual_functions.py	/^        class Test(m.test_override_cache_helper):$/;"	c	function:test_python_override.func2
TestFactory1	tests/test_factory_constructors.cpp	/^    TestFactory1() : value("(empty)") { print_default_created(this); }$/;"	f	class:TestFactory1	file:
TestFactory1	tests/test_factory_constructors.cpp	/^    explicit TestFactory1(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory1	file:
TestFactory1	tests/test_factory_constructors.cpp	/^    explicit TestFactory1(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory1	file:
TestFactory1	tests/test_factory_constructors.cpp	/^class TestFactory1 {$/;"	c	file:
TestFactory2	tests/test_factory_constructors.cpp	/^    TestFactory2() : value("(empty2)") { print_default_created(this); }$/;"	f	class:TestFactory2	file:
TestFactory2	tests/test_factory_constructors.cpp	/^    explicit TestFactory2(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory2	file:
TestFactory2	tests/test_factory_constructors.cpp	/^    explicit TestFactory2(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory2	file:
TestFactory2	tests/test_factory_constructors.cpp	/^class TestFactory2 {$/;"	c	file:
TestFactory3	tests/test_factory_constructors.cpp	/^    TestFactory3() : value("(empty3)") { print_default_created(this); }$/;"	f	class:TestFactory3
TestFactory3	tests/test_factory_constructors.cpp	/^    explicit TestFactory3(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory3
TestFactory3	tests/test_factory_constructors.cpp	/^    explicit TestFactory3(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory3
TestFactory3	tests/test_factory_constructors.cpp	/^class TestFactory3 {$/;"	c	file:
TestFactory4	tests/test_factory_constructors.cpp	/^    TestFactory4() : TestFactory3() { print_default_created(this); }$/;"	f	class:TestFactory4
TestFactory4	tests/test_factory_constructors.cpp	/^    explicit TestFactory4(int v) : TestFactory3(v) { print_created(this, v); }$/;"	f	class:TestFactory4
TestFactory4	tests/test_factory_constructors.cpp	/^class TestFactory4 : public TestFactory3 {$/;"	c	file:
TestFactory5	tests/test_factory_constructors.cpp	/^    explicit TestFactory5(int i) : TestFactory3(i) { print_created(this, i); }$/;"	f	class:TestFactory5
TestFactory5	tests/test_factory_constructors.cpp	/^class TestFactory5 : public TestFactory3 {$/;"	c	file:
TestFactory6	tests/test_factory_constructors.cpp	/^    TestFactory6(const TestFactory6 &f) {$/;"	f	class:TestFactory6
TestFactory6	tests/test_factory_constructors.cpp	/^    explicit TestFactory6(int i) : value{i} { print_created(this, i); }$/;"	f	class:TestFactory6
TestFactory6	tests/test_factory_constructors.cpp	/^class TestFactory6 {$/;"	c	file:
TestFactory7	tests/test_factory_constructors.cpp	/^    TestFactory7(const TestFactory7 &f) {$/;"	f	class:TestFactory7
TestFactory7	tests/test_factory_constructors.cpp	/^    explicit TestFactory7(int i) : value{i} { print_created(this, i); }$/;"	f	class:TestFactory7
TestFactory7	tests/test_factory_constructors.cpp	/^class TestFactory7 {$/;"	c	file:
TestFactoryHelper	tests/test_factory_constructors.cpp	/^class TestFactoryHelper {$/;"	c	file:
TestObject	tests/test_pytypes.py	/^    class TestObject:$/;"	c	function:test_accessors
TestPropRVP	tests/test_methods_and_attributes.cpp	/^struct TestPropRVP {$/;"	s	file:
TestProperties	tests/test_methods_and_attributes.cpp	/^struct TestProperties {$/;"	s	file:
TestPropertiesOverride	tests/test_methods_and_attributes.cpp	/^struct TestPropertiesOverride : TestProperties {$/;"	s	file:
TestThread	tests/test_iostream.cpp	/^    TestThread() : stop_{false} {$/;"	f	struct:TestThread
TestThread	tests/test_iostream.cpp	/^struct TestThread {$/;"	s	file:
Thread	tests/test_thread.py	/^class Thread(threading.Thread):$/;"	c
TplCtorClass	tests/test_stl.cpp	/^    explicit TplCtorClass(const T &) {}$/;"	f	struct:TplCtorClass
TplCtorClass	tests/test_stl.cpp	/^struct TplCtorClass {$/;"	s	file:
TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    TypeForHolderWithAddressOf() { print_created(this); }$/;"	f	struct:TypeForHolderWithAddressOf
TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    TypeForHolderWithAddressOf(const TypeForHolderWithAddressOf &) { print_copy_created(this); }$/;"	f	struct:TypeForHolderWithAddressOf
TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^struct TypeForHolderWithAddressOf {$/;"	s	file:
TypeForMoveOnlyHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    explicit TypeForMoveOnlyHolderWithAddressOf(int value) : value{value} { print_created(this); }$/;"	f	struct:TypeForMoveOnlyHolderWithAddressOf
TypeForMoveOnlyHolderWithAddressOf	tests/test_smart_ptr.cpp	/^struct TypeForMoveOnlyHolderWithAddressOf {$/;"	s	file:
UTF_N	include/pybind11/cast.h	/^    static constexpr size_t UTF_N = 8 * sizeof(CharT);$/;"	m	struct:string_caster
UnboundStruct	tests/test_numpy_dtypes.cpp	/^struct UnboundStruct {};$/;"	s	file:
Unhashable	tests/test_pytypes.py	/^    class Unhashable:$/;"	c	function:test_hash
Unhashable	tests/test_pytypes.py	/^    class Unhashable:$/;"	c	function:test_unhashable_exceptions
Unknown	tests/test_tagbased_polymorphic.cpp	/^        Unknown = 0,$/;"	m	class:Animal::Kind	file:
Unordered	tests/conftest.py	/^class Unordered(Output):$/;"	c
UnregisteredBase	tests/test_methods_and_attributes.cpp	/^class UnregisteredBase {$/;"	c	file:
UnregisteredType	tests/pybind11_tests.h	/^struct UnregisteredType {};$/;"	s
UnwrapPyValueHolder	tests/test_numpy_array.py	/^def UnwrapPyValueHolder(vhs):$/;"	f
UserType	tests/pybind11_tests.h	/^    explicit UserType(int i) : i(i) {}$/;"	f	class:UserType
UserType	tests/pybind11_tests.h	/^class UserType {$/;"	c
VARS_BEFORE_ALL_BASIC_TESTS	tests/test_gil_scoped.py	/^VARS_BEFORE_ALL_BASIC_TESTS = dict(vars())  # Make a copy of the dict (critical).$/;"	v
VERSION_FILE	setup.py	/^VERSION_FILE = Path("pybind11\/_version.py")$/;"	v
VERSION_REGEX	setup.py	/^VERSION_REGEX = re.compile($/;"	v
ValueHolder	tests/test_type_caster_pyobject_ptr.py	/^class ValueHolder:$/;"	c
ValuesViewImpl	include/pybind11/stl_bind.h	/^    explicit ValuesViewImpl(Map &map) : map(map) {}$/;"	f	struct:ValuesViewImpl
ValuesViewImpl	include/pybind11/stl_bind.h	/^struct ValuesViewImpl : public ValuesView {$/;"	s
Vanilla	tests/test_multiple_inheritance.cpp	/^struct Vanilla {$/;"	s	namespace:__anon10	file:
VanillaStaticMix1	tests/test_multiple_inheritance.cpp	/^struct VanillaStaticMix1 : Vanilla, WithStatic1, WithStatic2 {$/;"	s	namespace:__anon10	file:
VanillaStaticMix2	tests/test_multiple_inheritance.cpp	/^struct VanillaStaticMix2 : WithStatic1, Vanilla, WithStatic2 {$/;"	s	namespace:__anon10	file:
Vector2	tests/test_operator_overloading.cpp	/^    Vector2(const Vector2 &v) : x(v.x), y(v.y) { print_copy_created(this); }$/;"	f	class:Vector2
Vector2	tests/test_operator_overloading.cpp	/^    Vector2(float x, float y) : x(x), y(y) { print_created(this, toString()); }$/;"	f	class:Vector2
Vector2	tests/test_operator_overloading.cpp	/^class Vector2 {$/;"	c	file:
VectorOwner	tests/test_vector_unique_ptr_member.cpp	/^    explicit VectorOwner(std::vector<std::unique_ptr<DataType>> data) : data_(std::move(data)) {}$/;"	f	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner	file:
VectorOwner	tests/test_vector_unique_ptr_member.cpp	/^struct VectorOwner {$/;"	s	namespace:pybind11_tests::vector_unique_ptr_member	file:
VirtClass	tests/test_gil_scoped.cpp	/^class VirtClass {$/;"	c	file:
WIN	pybind11/setup_helpers.py	/^WIN = sys.platform.startswith("win32") and "mingw" not in sysconfig.get_platform()$/;"	v
WIN	tests/env.py	/^WIN = sys.platform.startswith("win32") or sys.platform.startswith("cygwin")$/;"	v
WIN	tests/extra_setuptools/test_setuphelper.py	/^WIN = sys.platform.startswith("win32") or sys.platform.startswith("cygwin")$/;"	v
WeaklyReferenced	tests/test_pytypes.py	/^    class WeaklyReferenced:$/;"	c	function:test_weakref
Widget	tests/test_embed/test_interpreter.cpp	/^    explicit Widget(std::string message) : message(std::move(message)) {}$/;"	f	class:Widget
Widget	tests/test_embed/test_interpreter.cpp	/^class Widget {$/;"	c	file:
WithStatic1	tests/test_multiple_inheritance.cpp	/^struct WithStatic1 {$/;"	s	namespace:__anon10	file:
WithStatic2	tests/test_multiple_inheritance.cpp	/^struct WithStatic2 {$/;"	s	namespace:__anon10	file:
WrapWithPyValueHolder	tests/test_numpy_array.py	/^def WrapWithPyValueHolder(*values):$/;"	f
XFAIL_CONDITION	tests/test_unnamed_namespace_a.py	/^XFAIL_CONDITION = ($/;"	v
XFAIL_REASON	tests/test_unnamed_namespace_a.py	/^XFAIL_REASON = "Known issues: https:\/\/github.com\/pybind\/pybind11\/pull\/4319"$/;"	v
_	include/pybind11/detail/descr.h	/^constexpr descr<1, Type> _() {$/;"	f
_	include/pybind11/detail/descr.h	/^constexpr descr<N - 1> _(char const (&text)[N]) {$/;"	f
_	include/pybind11/detail/descr.h	/^constexpr enable_if_t<!B, T2> _(const T1 &d1, const T2 &d2) {$/;"	f
_	include/pybind11/detail/descr.h	/^constexpr enable_if_t<!B, descr<N2 - 1>> _(char const (&text1)[N1], char const (&text2)[N2]) {$/;"	f
_	include/pybind11/detail/descr.h	/^constexpr enable_if_t<B, T1> _(const T1 &d1, const T2 &d2) {$/;"	f
_	include/pybind11/detail/descr.h	/^constexpr enable_if_t<B, descr<N1 - 1>> _(char const (&text1)[N1], char const (&text2)[N2]) {$/;"	f
_	tests/test_embed/catch.cpp	12;"	d	file:
_DEBUG	include/pybind11/detail/common.h	228;"	d
_DEBUG	include/pybind11/detail/common.h	297;"	d
__OBJECT_H	tests/object.h	2;"	d
__STDC_WANT_LIB_EXT1__	include/pybind11/detail/common.h	234;"	d
__all__	pybind11/__init__.py	/^__all__ = ($/;"	v
__bool__	tests/test_builtin_casters.py	/^        def __bool__(self):$/;"	m	class:test_bool_caster.A	file:
__call__	tests/conftest.py	/^    def __call__(self, thing):$/;"	m	class:SanitizedString	file:
__call__	tests/test_virtual_functions.py	/^        def __call__(self, data):$/;"	m	class:test_recursive_dispatch_issue.StoreResultVisitor	file:
__call__	tests/test_virtual_functions.py	/^        def __call__(self, first, second, visitor):$/;"	m	class:test_recursive_dispatch_issue.Adder	file:
__contains__	tests/conftest.py	/^    def __contains__(self, item):$/;"	m	class:Capture	file:
__contains__	tests/test_pytypes.py	/^    def __contains__(self, m):$/;"	m	class:CustomContains	file:
__enter__	pybind11/setup_helpers.py	/^    def __enter__(self: S) -> S:$/;"	m	class:ParallelCompile	file:
__enter__	tests/conftest.py	/^    def __enter__(self):$/;"	m	class:Capture	file:
__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Capture	file:
__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Output	file:
__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:SanitizedString	file:
__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Unordered	file:
__exit__	pybind11/setup_helpers.py	/^    def __exit__(self, *args: Any) -> None:$/;"	m	class:ParallelCompile	file:
__exit__	tests/conftest.py	/^    def __exit__(self, *args):$/;"	m	class:Capture	file:
__float__	tests/test_builtin_casters.py	/^        def __float__(self):$/;"	m	class:test_int_convert.Float	file:
__fspath__	tests/test_stl.py	/^        def __fspath__(self):$/;"	m	class:test_fs_path.PseudoBytesPath	file:
__fspath__	tests/test_stl.py	/^        def __fspath__(self):$/;"	m	class:test_fs_path.PseudoStrPath	file:
__getitem__	tests/test_sequences_and_iterators.py	/^        def __getitem__(self, i):$/;"	m	class:test_sequence_length.SequenceLike	file:
__hash__	tests/test_pytypes.py	/^        __hash__ = None$/;"	v	class:test_hash.Unhashable
__hash__	tests/test_pytypes.py	/^        __hash__ = None$/;"	v	class:test_unhashable_exceptions.Unhashable
__hash__	tests/test_pytypes.py	/^        def __hash__(self):$/;"	m	class:test_hash.Hashable	file:
__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.Index	file:
__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.IntAndIndex	file:
__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.RaisingTypeErrorOnIndex	file:
__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.RaisingValueErrorOnIndex	file:
__init__	pybind11/setup_helpers.py	/^    def __init__($/;"	m	class:ParallelCompile
__init__	pybind11/setup_helpers.py	/^    def __init__(self, *args: Any, **kwargs: Any) -> None:$/;"	m	class:Pybind11Extension
__init__	tests/conftest.py	/^    def __init__(self, capfd):$/;"	m	class:Capture
__init__	tests/conftest.py	/^    def __init__(self, sanitizer):$/;"	m	class:SanitizedString
__init__	tests/conftest.py	/^    def __init__(self, string):$/;"	m	class:Output
__init__	tests/test_builtin_casters.py	/^        def __init__(self, x):$/;"	m	class:test_bool_caster.A
__init__	tests/test_call_policies.py	/^        def __init__(self):$/;"	m	class:test_alive_gc_multi_derived.Derived
__init__	tests/test_callbacks.py	/^        def __init__(self, value):$/;"	m	class:test_async_callbacks.Item
__init__	tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_bind_protected_functions.C
__init__	tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_inheritance_init.Python
__init__	tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_inheritance_init.RabbitHamster
__init__	tests/test_embed/test_interpreter.py	/^    def __init__(self, message):$/;"	m	class:DerivedWidget
__init__	tests/test_exceptions.py	/^    def __init__(self, failure_point):$/;"	m	class:FlakyException
__init__	tests/test_factory_constructors.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance.MITest
__init__	tests/test_factory_constructors.py	/^        def __init__(self, *args):$/;"	m	class:test_init_factory_alias.MyTest
__init__	tests/test_factory_constructors.py	/^        def __init__(self, bad):$/;"	m	class:test_invalid_self.BrokenTF1
__init__	tests/test_factory_constructors.py	/^        def __init__(self, bad):$/;"	m	class:test_invalid_self.BrokenTF6
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany117
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany14
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany19
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany58
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany916
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_mix1.Base1
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_mix2.Base2
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI6
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI7
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI8
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI8b
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_mix1.MITypePy
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_mix2.MITypePy
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI1
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI2
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI3
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI4
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI5
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_virtbase.MITypePy
__init__	tests/test_numpy_array.py	/^    def __init__(self, value):$/;"	m	class:PyValueHolder
__init__	tests/test_pytypes.py	/^        def __init__(self, value):$/;"	m	class:test_hash.Hashable
__init__	tests/test_thread.py	/^    def __init__(self, fn):$/;"	m	class:Thread
__init__	tests/test_type_caster_pyobject_ptr.py	/^    def __init__(self, value):$/;"	m	class:ValueHolder
__init__	tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_alias_delay_initialization1.B
__init__	tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_alias_delay_initialization2.B2
__init__	tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_recursive_dispatch_issue.StoreResultVisitor
__init__	tests/test_virtual_functions.py	/^        def __init__(self, state):$/;"	m	class:test_override.ExtendedExampleVirt
__init__	tests/test_virtual_functions.py	/^        def __init__(self, state):$/;"	m	class:test_override.ExtendedExampleVirt2
__init__	tests/test_virtual_functions.py	/^        def __init__(self, value):$/;"	m	class:test_recursive_dispatch_issue.Data
__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.Int	file:
__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.IntAndIndex	file:
__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.RaisingTypeErrorOnIndex	file:
__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.RaisingValueErrorOnIndex	file:
__len__	tests/test_sequences_and_iterators.py	/^        def __len__(self):$/;"	m	class:test_sequence_length.SequenceLike	file:
__nonzero__	tests/test_builtin_casters.py	/^        def __nonzero__(self):$/;"	m	class:test_bool_caster.A	file:
__repr__	tests/test_constants_and_functions.py	/^        def __repr__(self):$/;"	m	class:test_function_record_leaks.RaisingRepr	file:
__repr__	tests/test_exceptions.py	/^        def __repr__(self):$/;"	m	class:test_invalid_repr.MyRepr	file:
__repr__	tests/test_pytypes.py	/^        def __repr__(self):$/;"	m	class:test_str.A	file:
__self	include/pybind11/operators.h	/^inline self_t __self() { return self; }$/;"	f
__slots__	pybind11/setup_helpers.py	/^    __slots__ = ("envvar", "default", "max", "_old", "needs_recompile")$/;"	v	class:ParallelCompile
__slots__	tests/test_pytypes.py	/^        __slots__ = []$/;"	v	class:test_weakref_err.C
__str__	tests/conftest.py	/^    def __str__(self):$/;"	m	class:Capture	file:
__str__	tests/conftest.py	/^    def __str__(self):$/;"	m	class:Output	file:
__str__	tests/test_exceptions.py	/^    def __str__(self):$/;"	m	class:FlakyException	file:
__str__	tests/test_pytypes.py	/^        def __str__(self):$/;"	m	class:test_str.A	file:
__version__	pybind11/_version.py	/^__version__ = "2.11.0.dev1"$/;"	v
_a	include/pybind11/cast.h	/^constexpr arg operator"" _a(const char *name, size_t) { return arg(name); }$/;"	f	namespace:literals
_add_cflags	pybind11/setup_helpers.py	/^    def _add_cflags(self, flags: List[str]) -> None:$/;"	m	class:Pybind11Extension
_add_ldflags	pybind11/setup_helpers.py	/^    def _add_ldflags(self, flags: List[str]) -> None:$/;"	m	class:Pybind11Extension
_dtype_from_pep3118	include/pybind11/numpy.h	/^    static object _dtype_from_pep3118() {$/;"	f
_hexadecimal	tests/conftest.py	/^_hexadecimal = re.compile(r"0x[0-9a-fA-F]+")$/;"	v
_instances	tests/constructor_stats.h	/^    std::unordered_map<void *, int> _instances; \/\/ Need a map rather than set because members can$/;"	m	class:ConstructorStats
_intentional_deadlock	tests/test_gil_scoped.py	/^def _intentional_deadlock():$/;"	f
_long_marker	tests/conftest.py	/^_long_marker = re.compile(r"([0-9])L")$/;"	v
_make_explanation	tests/conftest.py	/^def _make_explanation(a, b):$/;"	f
_run_in_process	tests/test_gil_scoped.py	/^def _run_in_process(target, *args, **kwargs):$/;"	f
_run_in_threads	tests/test_gil_scoped.py	/^def _run_in_threads(test_fn, num_threads, parallel):$/;"	f
_s	include/pybind11/pytypes.h	/^inline str operator"" _s(const char *s, size_t size) { return {s, size}; }$/;"	f	namespace:handle::literals
_sanitize_docstring	tests/conftest.py	/^def _sanitize_docstring(thing):$/;"	f
_sanitize_general	tests/conftest.py	/^def _sanitize_general(s):$/;"	f
_sanitize_message	tests/conftest.py	/^def _sanitize_message(thing):$/;"	f
_single_compile	pybind11/setup_helpers.py	/^            def _single_compile(obj: Any) -> None:$/;"	f	function:ParallelCompile.function.compile_function
_split_and_sort	tests/conftest.py	/^def _split_and_sort(s):$/;"	f
_strip_and_dedent	tests/conftest.py	/^def _strip_and_dedent(s):$/;"	f
_sync	include/pybind11/iostream.h	/^    int _sync() {$/;"	f	class:pythonbuf
_test_flaky_exception_failure_point_init_before_py_3_12	tests/test_exceptions.py	/^def _test_flaky_exception_failure_point_init_before_py_3_12():$/;"	f
_test_flaky_exception_failure_point_init_py_3_12	tests/test_exceptions.py	/^def _test_flaky_exception_failure_point_init_py_3_12():$/;"	f
_to_int	pybind11/_version.py	/^def _to_int(s: str) -> Union[int, str]:$/;"	f
_values	tests/constructor_stats.h	/^    std::list<std::string> _values;             \/\/ Used to track values$/;"	m	class:ConstructorStats
a	tests/test_class.py	/^        a = m.HasOpNewDel()$/;"	v	class:test_operator_new_delete.SubAliased
a	tests/test_eigen_matrix.cpp	/^    Eigen::Matrix4d a = Eigen::Matrix4d::Zero();$/;"	m	struct:CustomOperatorNew	file:
a	tests/test_multiple_inheritance.cpp	/^    int a = 1;$/;"	m	struct:__anon10::I801B1	file:
a	tests/test_numpy_dtypes.cpp	/^    PartialStruct a;$/;"	m	struct:PartialNestedStruct	file:
a	tests/test_numpy_dtypes.cpp	/^    char a[3];$/;"	m	struct:StringStruct	file:
a	tests/test_numpy_dtypes.cpp	/^    char a[3][4];$/;"	m	struct:ArrayStruct	file:
a	tests/test_stl_binders.cpp	/^    int a;$/;"	m	class:El	file:
a	tests/test_virtual_functions.py	/^        a = m.A()$/;"	v	class:test_alias_delay_initialization1.B
a2	tests/test_virtual_functions.py	/^        a2 = m.A2()$/;"	v	class:test_alias_delay_initialization2.B2
a3	tests/test_virtual_functions.py	/^        a3 = m.A2(1)$/;"	v	class:test_alias_delay_initialization2.B2
abs	tests/test_operator_overloading.cpp	/^std::string abs(const Vector2 &) { return "abs(Vector2)"; }$/;"	f
access_by_copy	tests/test_stl.cpp	/^    OptionalEnumValue access_by_copy() { return value; }$/;"	f	class:OptionalProperties
access_by_ref	tests/test_stl.cpp	/^    OptionalEnumValue &access_by_ref() { return value; }$/;"	f	class:OptionalProperties
accessor	include/pybind11/pytypes.h	/^    accessor(handle obj, key_type key) : obj(obj), key(std::move(key)) {}$/;"	f	class:handle::error_fetch_and_normalize::accessor
accessor	include/pybind11/pytypes.h	/^class accessor : public object_api<accessor<Policy>> {$/;"	c	struct:handle::error_fetch_and_normalize
accessor_policies	include/pybind11/pytypes.h	/^namespace accessor_policies {$/;"	n
active	include/pybind11/gil.h	/^    bool active = true;$/;"	m	class:gil_scoped_acquire
active	include/pybind11/gil.h	/^    bool active = true;$/;"	m	class:gil_scoped_release
add	include/pybind11/pytypes.h	/^    bool add(T &&val) \/* py-non-const *\/ {$/;"	f	class:handle::set
add	tests/test_smart_ptr.cpp	/^    void add(const std::shared_ptr<ElementBase> &e) { l.push_back(e); }$/;"	f	struct:ElementList
add1	tests/test_methods_and_attributes.cpp	/^    void add1(ExampleMandA other) { value += other.value; }         \/\/ passing by value$/;"	f	class:ExampleMandA
add10	tests/test_methods_and_attributes.cpp	/^    void add10(const int *other) { value += *other; } \/\/ passing by const pointer$/;"	f	class:ExampleMandA
add2	tests/test_methods_and_attributes.cpp	/^    void add2(ExampleMandA &other) { value += other.value; }        \/\/ passing by reference$/;"	f	class:ExampleMandA
add3	tests/test_methods_and_attributes.cpp	/^    void add3(const ExampleMandA &other) { value += other.value; }  \/\/ passing by const reference$/;"	f	class:ExampleMandA
add4	tests/test_methods_and_attributes.cpp	/^    void add4(ExampleMandA *other) { value += other->value; }       \/\/ passing by pointer$/;"	f	class:ExampleMandA
add5	tests/test_methods_and_attributes.cpp	/^    void add5(const ExampleMandA *other) { value += other->value; } \/\/ passing by const pointer$/;"	f	class:ExampleMandA
add6	tests/test_methods_and_attributes.cpp	/^    void add6(int other) { value += other; }        \/\/ passing by value$/;"	f	class:ExampleMandA
add7	tests/test_methods_and_attributes.cpp	/^    void add7(int &other) { value += other; }       \/\/ passing by reference$/;"	f	class:ExampleMandA
add8	tests/test_methods_and_attributes.cpp	/^    void add8(const int &other) { value += other; } \/\/ passing by const reference$/;"	f	class:ExampleMandA
add9	tests/test_methods_and_attributes.cpp	/^    void add9(int *other) { value += *other; }        \/\/ passing by pointer$/;"	f	class:ExampleMandA
add_base	include/pybind11/attr.h	/^    PYBIND11_NOINLINE void add_base(const std::type_info &base, void *(*caster)(void *) ) {$/;"	f	struct:type_record
add_base	include/pybind11/pybind11.h	/^    static void add_base(detail::type_record &) {}$/;"	f	class:class_
add_base	include/pybind11/pybind11.h	/^    static void add_base(detail::type_record &rec) {$/;"	f	class:class_
add_bindings	tests/test_methods_and_attributes.cpp	/^void add_bindings(py::module &m) {$/;"	f	namespace:pybind11_tests::exercise_is_setter
add_class_method	include/pybind11/pybind11.h	/^inline void add_class_method(object &cls, const char *name_, const cpp_function &cf) {$/;"	f
add_object	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void add_object(const char *name, handle obj, bool overwrite = false) {$/;"	f	class:module_
add_ostream_redirect	include/pybind11/iostream.h	/^add_ostream_redirect(module_ m, const std::string &name = "ostream_redirect") {$/;"	f
add_patient	include/pybind11/detail/class.h	/^inline void add_patient(PyObject *nurse, PyObject *patient) {$/;"	f
add_patient	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE static void add_patient(handle h) {$/;"	f	class:loader_life_support
add_ref	tests/test_custom_type_setup.py	/^    def add_ref(obj):$/;"	f	function:gc_tester
adjust_matrix	tests/test_eigen_matrix.cpp	/^Eigen::MatrixXd adjust_matrix(MatrixArgType m) {$/;"	f
advance	include/pybind11/pytypes.h	/^    void advance() {$/;"	f	class:handle::iterator
advance	include/pybind11/pytypes.h	/^    void advance(ssize_t n) { index += n; }$/;"	f	class:handle::sequence_slow_readwrite
advance	include/pybind11/pytypes.h	/^    void advance(ssize_t n) { ptr += n; }$/;"	f	class:handle::sequence_fast_readonly
alias	tests/test_factory_constructors.cpp	/^    bool alias = false;$/;"	m	class:TestFactory6	file:
alias	tests/test_factory_constructors.cpp	/^    bool alias = false;$/;"	m	class:TestFactory7	file:
alias_constructor	include/pybind11/detail/init.h	/^struct alias_constructor {$/;"	s
alias_factory	include/pybind11/detail/init.h	/^    remove_reference_t<AFunc> alias_factory;$/;"	m	struct:factory
alignment	include/pybind11/numpy.h	/^    int alignment() const { return detail::array_descriptor_proxy(m_ptr)->alignment; }$/;"	f
alignment	include/pybind11/numpy.h	/^    int alignment;$/;"	m	struct:PyArrayDescr_Proxy
alive	tests/constructor_stats.h	/^    int alive() {$/;"	f	class:ConstructorStats
all_files	tests/extra_python_package/test_files.py	/^all_files = src_files | py_files$/;"	v
all_type_info	include/pybind11/detail/type_caster_base.h	/^        : inst{inst}, tinfo(all_type_info(Py_TYPE(inst))) {}$/;"	f	struct:values_and_holders
all_type_info	include/pybind11/detail/type_caster_base.h	/^inline const std::vector<detail::type_info *> &all_type_info(PyTypeObject *type) {$/;"	f
all_type_info_get_cache	include/pybind11/pybind11.h	/^all_type_info_get_cache(PyTypeObject *type) {$/;"	f
all_type_info_populate	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE void all_type_info_populate(PyTypeObject *t, std::vector<type_info *> &bases) {$/;"	f
alloc	include/pybind11/eigen/tensor.h	/^    static Type *alloc(Args &&...args) {$/;"	f	struct:eigen_tensor_helper
allocate_layout	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE void instance::allocate_layout() {$/;"	f	class:instance
always_construct_holder	include/pybind11/cast.h	/^struct always_construct_holder {$/;"	s
answer	tests/test_methods_and_attributes.cpp	/^    int answer = -1;$/;"	m	class:NoneCastTester	file:
answer	tests/test_methods_and_attributes.cpp	/^    int answer = 42;$/;"	m	class:NoneTester	file:
any_container	include/pybind11/detail/common.h	/^    any_container(It first, It last) : v(first, last) {}$/;"	f	class:overload_cast_impl::any_container
any_container	include/pybind11/detail/common.h	/^    any_container(const Container &c) : any_container(std::begin(c), std::end(c)) {}$/;"	f	class:overload_cast_impl::any_container
any_container	include/pybind11/detail/common.h	/^    any_container(const std::initializer_list<TIn> &c) : any_container(c.begin(), c.end()) {}$/;"	f	class:overload_cast_impl::any_container
any_container	include/pybind11/detail/common.h	/^    any_container(std::vector<T> &&v) : v(std::move(v)) {}$/;"	f	class:overload_cast_impl::any_container
any_container	include/pybind11/detail/common.h	/^class any_container {$/;"	c	struct:overload_cast_impl
any_struct	tests/test_unnamed_namespace_a.cpp	/^struct any_struct {};$/;"	s	namespace:__anon6	file:
any_struct	tests/test_unnamed_namespace_b.cpp	/^struct any_struct {};$/;"	s	namespace:__anon7	file:
anyset	include/pybind11/pytypes.h	/^class anyset : public object {$/;"	c	class:handle
api	tools/make_changelog.py	/^api = ghapi.all.GhApi(owner="pybind", repo="pybind11")$/;"	v
append	include/pybind11/pytypes.h	/^    void append(T &&val) \/* py-non-const *\/ {$/;"	f	class:handle::list
append_extents	include/pybind11/numpy.h	/^    static void append_extents(list & \/* shape *\/) {}$/;"	f	struct:array_info_scalar
append_extents	include/pybind11/numpy.h	/^    static void append_extents(list &shape) {$/;"	f	struct:array_info
append_self_arg_if_needed	include/pybind11/attr.h	/^inline void append_self_arg_if_needed(function_record *r) {$/;"	f
apply_exception_translators	include/pybind11/pybind11.h	/^inline bool apply_exception_translators(std::forward_list<ExceptionTranslator> &translators) {$/;"	f
arg	include/pybind11/cast.h	/^    constexpr explicit arg(const char *name = nullptr)$/;"	f	struct:arg
arg	include/pybind11/cast.h	/^struct arg {$/;"	s
arg	tests/test_custom_type_casters.cpp	/^    std::string arg = "(default arg inspector 1)";$/;"	m	class:ArgInspector1	file:
arg	tests/test_custom_type_casters.cpp	/^    std::string arg = "(default arg inspector 2)";$/;"	m	class:ArgInspector2	file:
arg_names	include/pybind11/cast.h	/^    static constexpr auto arg_names = concat(type_descr(make_caster<Args>::name)...);$/;"	m	class:argument_loader
arg_v	include/pybind11/cast.h	/^    arg_v(arg &&base, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v
arg_v	include/pybind11/cast.h	/^    arg_v(const arg &base, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v
arg_v	include/pybind11/cast.h	/^    arg_v(const char *name, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v
arg_v	include/pybind11/cast.h	/^struct arg_v : arg {$/;"	s
argcasters	include/pybind11/cast.h	/^    std::tuple<make_caster<Args>...> argcasters;$/;"	m	class:argument_loader
args	include/pybind11/attr.h	/^    std::vector<argument_record> args;$/;"	m	struct:function_record
args	include/pybind11/cast.h	/^    const tuple &args() const & { return m_args; }$/;"	f	class:simple_collector
args	include/pybind11/cast.h	/^    const tuple &args() const & { return m_args; }$/;"	f	class:unpacking_collector
args	include/pybind11/cast.h	/^    std::vector<handle> args;$/;"	m	struct:function_call
args	include/pybind11/cast.h	/^    tuple args() && { return std::move(m_args); }$/;"	f	class:simple_collector
args	include/pybind11/cast.h	/^    tuple args() && { return std::move(m_args); }$/;"	f	class:unpacking_collector
args	include/pybind11/pytypes.h	/^class args : public tuple {$/;"	c	class:handle
args_any_are_buffer	include/pybind11/stl_bind.h	/^constexpr bool args_any_are_buffer() {$/;"	f
args_are_all_keyword_or_ds	include/pybind11/pytypes.h	/^constexpr bool args_are_all_keyword_or_ds() {$/;"	f	class:handle
args_are_all_positional	include/pybind11/cast.h	/^constexpr bool args_are_all_positional() {$/;"	f
args_convert	include/pybind11/cast.h	/^    std::vector<bool> args_convert;$/;"	m	struct:function_call
args_pos	include/pybind11/cast.h	/^    static constexpr int args_pos = constexpr_last<argument_is_args, Args...>();$/;"	m	class:argument_loader
args_proxy	include/pybind11/pytypes.h	/^    explicit args_proxy(handle h) : handle(h) {}$/;"	f	class:handle::args_proxy
args_proxy	include/pybind11/pytypes.h	/^class args_proxy : public handle {$/;"	c	class:handle
args_ref	include/pybind11/cast.h	/^    object args_ref, kwargs_ref;$/;"	m	struct:function_call
argument_loader	include/pybind11/cast.h	/^class argument_loader {$/;"	c
argument_record	include/pybind11/attr.h	/^    argument_record(const char *name, const char *descr, handle value, bool convert, bool none)$/;"	f	struct:argument_record
argument_record	include/pybind11/attr.h	/^struct argument_record {$/;"	s
argv0	tests/test_embed/test_interpreter.py	/^    def argv0(self):$/;"	m	class:DerivedWidget
arithmetic	include/pybind11/attr.h	/^struct arithmetic {};$/;"	s
arr	tests/test_numpy_array.py	/^def arr():$/;"	f
array_caster	include/pybind11/stl.h	/^struct array_caster {$/;"	s
array_copy_but_one	tests/test_eigen_matrix.py	/^def array_copy_but_one(a, r, c, v):$/;"	f
array_descriptor_proxy	include/pybind11/numpy.h	/^inline PyArrayDescr_Proxy *array_descriptor_proxy(PyObject *ptr) {$/;"	f
array_descriptor_proxy	include/pybind11/numpy.h	/^inline const PyArrayDescr_Proxy *array_descriptor_proxy(const PyObject *ptr) {$/;"	f
array_info	include/pybind11/numpy.h	/^struct array_info : array_info_scalar<T> {};$/;"	s
array_info	include/pybind11/numpy.h	/^struct array_info<T[N]> : array_info<std::array<T, N>> {};$/;"	s
array_info	include/pybind11/numpy.h	/^struct array_info<char[N]> : array_info_scalar<char[N]> {};$/;"	s
array_info	include/pybind11/numpy.h	/^struct array_info<std::array<T, N>> {$/;"	s
array_info	include/pybind11/numpy.h	/^struct array_info<std::array<char, N>> : array_info_scalar<std::array<char, N>> {};$/;"	s
array_info_scalar	include/pybind11/numpy.h	/^struct array_info_scalar {$/;"	s
array_proxy	include/pybind11/numpy.h	/^inline PyArray_Proxy *array_proxy(void *ptr) { return reinterpret_cast<PyArray_Proxy *>(ptr); }$/;"	f
array_proxy	include/pybind11/numpy.h	/^inline const PyArray_Proxy *array_proxy(const void *ptr) {$/;"	f
arrow_proxy	include/pybind11/pytypes.h	/^struct arrow_proxy {$/;"	s	struct:handle::error_fetch_and_normalize
as_unsigned	include/pybind11/pytypes.h	/^Unsigned as_unsigned(PyObject *o) {$/;"	f	class:handle
assert_equal	tests/test_numpy_dtypes.py	/^def assert_equal(actual, expected_data, expected_dtype):$/;"	f
assert_equal_const_funcs	tests/test_eigen_tensor.py	/^assert_equal_const_funcs = [$/;"	v
assert_equal_funcs	tests/test_eigen_tensor.py	/^assert_equal_funcs = [$/;"	v
assert_equal_ref	tests/test_eigen_matrix.py	/^def assert_equal_ref(mat):$/;"	f
assert_equal_tensor_ref	tests/test_eigen_tensor.py	/^def assert_equal_tensor_ref(mat, writeable=True, modified=None):$/;"	f
assert_keeps_alive	tests/test_eigen_matrix.py	/^def assert_keeps_alive(cl, method, *args):$/;"	f
assert_references	tests/test_numpy_array.py	/^    def assert_references(a, b, base=None):$/;"	f	function:test_wrap
assert_sparse_equal_ref	tests/test_eigen_matrix.py	/^def assert_sparse_equal_ref(sparse_mat):$/;"	f
assign_both	tests/test_eigen_matrix.py	/^def assign_both(a1, a2, r, c, v):$/;"	f
asyncio	tests/test_async.py	/^asyncio = pytest.importorskip("asyncio")$/;"	v
at_t	tests/test_numpy_array.cpp	/^py::ssize_t at_t(const arr_t &a, Ix... idx) {$/;"	f
attr	include/pybind11/pytypes.h	/^obj_attr_accessor object_api<D>::attr(handle key) const {$/;"	f	class:handle::object_api
attr	include/pybind11/pytypes.h	/^obj_attr_accessor object_api<D>::attr(object &&key) const {$/;"	f	class:handle::object_api
attr	include/pybind11/pytypes.h	/^str_attr_accessor object_api<D>::attr(const char *key) const {$/;"	f	class:handle::object_api
attr_char	tests/test_pytypes.py	/^        attr_char = 2$/;"	v	class:test_accessors.SubTestObject
attr_obj	tests/test_pytypes.py	/^        attr_obj = 1$/;"	v	class:test_accessors.SubTestObject
author	docs/conf.py	/^author = "Wenzel Jakob"$/;"	v
auto_cpp_level	pybind11/setup_helpers.py	/^def auto_cpp_level(compiler: Any) -> Union[str, int]:$/;"	f
automatic	include/pybind11/detail/common.h	/^    automatic = 0,$/;"	m	class:return_value_policy
automatic_reference	include/pybind11/detail/common.h	/^    automatic_reference,$/;"	m	class:return_value_policy
auxiliaries	tests/test_numpy_array.cpp	/^py::handle auxiliaries(T &&r, T2 &&r2) {$/;"	f
b	tests/test_class.py	/^        b = m.HasOpNewDelSize()$/;"	v	class:test_operator_new_delete.SubAliased
b	tests/test_eigen_matrix.cpp	/^    Eigen::Matrix4d b = Eigen::Matrix4d::Identity();$/;"	m	struct:CustomOperatorNew	file:
b	tests/test_multiple_inheritance.cpp	/^    int b = 2;$/;"	m	struct:__anon10::I801B2	file:
b	tests/test_numpy_dtypes.cpp	/^    int32_t b[2];$/;"	m	struct:ArrayStruct	file:
b	tests/test_numpy_dtypes.cpp	/^    std::array<char, 3> b;$/;"	m	struct:StringStruct	file:
b	tests/test_virtual_functions.py	/^        b = B()$/;"	v	class:test_alias_delay_initialization1.B
b2	tests/test_virtual_functions.py	/^        b2 = B2()$/;"	v	class:test_alias_delay_initialization2.B2
bad_next_call	tests/test_sequences_and_iterators.py	/^    def bad_next_call():$/;"	f	function:test_python_iterator_in_cpp
bar	tests/test_multiple_inheritance.cpp	/^    int bar() const { return i; }$/;"	f	struct:__anon10::Base2a
bar	tests/test_multiple_inheritance.py	/^        def bar(self):$/;"	m	class:test_multiple_inheritance_mix2.Base2
bark	tests/test_tagbased_polymorphic.cpp	/^    std::string bark() const { return Dog::bark() + " and runs in circles"; }$/;"	f	struct:Animal::Chihuahua
bark	tests/test_tagbased_polymorphic.cpp	/^    std::string bark() const { return name_of_kind(kind) + " " + name + " goes " + sound; }$/;"	f	struct:Animal::Dog
base	include/pybind11/attr.h	/^struct base {$/;"	s
base	include/pybind11/numpy.h	/^    PyObject *base;$/;"	m	struct:PyArray_Proxy
base	include/pybind11/numpy.h	/^    PyObject *base;$/;"	m	struct:PyVoidScalarObject_Proxy
bases	include/pybind11/attr.h	/^    list bases;$/;"	m	struct:type_record
basic_attr	tests/test_pytypes.py	/^        basic_attr = 1$/;"	v	class:test_accessors.TestObject
begin	include/pybind11/detail/type_caster_base.h	/^    iterator begin() { return iterator(inst, &tinfo); }$/;"	f	struct:values_and_holders
begin	include/pybind11/pytypes.h	/^    detail::dict_iterator begin() const { return {*this, 0}; }$/;"	f	class:handle::dict
begin	include/pybind11/pytypes.h	/^    detail::list_iterator begin() const { return {*this, 0}; }$/;"	f	class:handle::list
begin	include/pybind11/pytypes.h	/^    detail::sequence_iterator begin() const { return {*this, 0}; }$/;"	f	class:handle::sequence
begin	include/pybind11/pytypes.h	/^    detail::tuple_iterator begin() const { return {*this, 0}; }$/;"	f	class:handle::tuple
begin	include/pybind11/pytypes.h	/^iterator object_api<D>::begin() const {$/;"	f	class:handle::object_api
begin_end	tests/test_pytypes.py	/^        begin_end = [1, 2, 3]$/;"	v	class:test_accessors.TestObject
bind_ConstructorStats	tests/pybind11_tests.cpp	/^void bind_ConstructorStats(py::module_ &m) {$/;"	f
bind_empty0	tests/test_class.cpp	/^void bind_empty0(py::module_ &m) {$/;"	f	namespace:test_class::pr4220_tripped_over_this
bind_local	tests/local_bindings.h	/^py::class_<T> bind_local(Args &&...args) {$/;"	f
bind_map	include/pybind11/stl_bind.h	/^class_<Map, holder_type> bind_map(handle scope, const std::string &name, Args &&...args) {$/;"	f
bind_vector	include/pybind11/stl_bind.h	/^class_<Vector, holder_type> bind_vector(handle scope, std::string const &name, Args &&...args) {$/;"	f
bool_	include/pybind11/pytypes.h	/^    bool_() : object(Py_False, borrowed_t{}) {}$/;"	f	class:handle::bool_
bool_	include/pybind11/pytypes.h	/^    bool_(bool value) : object(value ? Py_True : Py_False, borrowed_t{}) {}$/;"	f	class:handle::bool_
bool_	include/pybind11/pytypes.h	/^class bool_ : public object {$/;"	c	class:handle
bool_	tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:PartialStruct	file:
bool_	tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:SimpleStruct	file:
bool_	tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:SimpleStructReordered	file:
borrowed_t	include/pybind11/pytypes.h	/^    struct borrowed_t {};$/;"	s	class:handle::object
breathe_default_project	docs/conf.py	/^breathe_default_project = "pybind11"$/;"	v
breathe_domain_by_extension	docs/conf.py	/^breathe_domain_by_extension = {"h": "cpp"}$/;"	v
breathe_projects	docs/conf.py	/^breathe_projects = {"pybind11": ".build\/doxygenxml\/"}$/;"	v
buf_size	include/pybind11/iostream.h	/^    const size_t buf_size;$/;"	m	class:pythonbuf
buffer	include/pybind11/iostream.h	/^    detail::pythonbuf buffer;$/;"	m	class:scoped_ostream_redirect
buffer	include/pybind11/pytypes.h	/^class buffer : public object {$/;"	c	class:handle
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(T *ptr, ssize_t size, bool readonly = false)$/;"	f	struct:buffer_info
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(T *ptr,$/;"	f	struct:buffer_info
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(const T *ptr, ssize_t size, bool readonly = true)$/;"	f	struct:buffer_info
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(private_ctr_tag,$/;"	f	struct:buffer_info
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(void *ptr,$/;"	f	struct:buffer_info
buffer_info	include/pybind11/buffer_info.h	/^    explicit buffer_info(Py_buffer *view, bool ownview = true)$/;"	f	struct:buffer_info
buffer_info	include/pybind11/buffer_info.h	/^struct buffer_info {$/;"	s
buffer_protocol	include/pybind11/attr.h	/^    bool buffer_protocol : 1;$/;"	m	struct:type_record
buffer_protocol	include/pybind11/attr.h	/^struct buffer_protocol {};$/;"	s
build	noxfile.py	/^def build(session: nox.Session) -> None:$/;"	f
build_expected_version_hex	setup.py	/^def build_expected_version_hex(matches: Dict[str, str]) -> str:$/;"	f
build_ext	pybind11/setup_helpers.py	/^class build_ext(_build_ext):  # noqa: N801$/;"	c
build_extensions	pybind11/setup_helpers.py	/^    def build_extensions(self) -> None:$/;"	m	class:build_ext
builtin_exception	include/pybind11/detail/common.h	/^class PYBIND11_EXPORT_EXCEPTION builtin_exception : public std::runtime_error {$/;"	c
byte_offset_unsafe	include/pybind11/numpy.h	/^ssize_t byte_offset_unsafe(const Strides &) {$/;"	f
byte_offset_unsafe	include/pybind11/numpy.h	/^ssize_t byte_offset_unsafe(const Strides &strides, ssize_t i, Ix... index) {$/;"	f
bytearray	include/pybind11/pytypes.h	/^    bytearray() : bytearray("", 0) {}$/;"	f	class:handle::bytearray
bytearray	include/pybind11/pytypes.h	/^    bytearray(const char *c, const SzType &n)$/;"	f	class:handle::bytearray
bytearray	include/pybind11/pytypes.h	/^    explicit bytearray(const std::string &s) : bytearray(s.data(), s.size()) {}$/;"	f	class:handle::bytearray
bytearray	include/pybind11/pytypes.h	/^class bytearray : public object {$/;"	c	class:handle
byteorder	include/pybind11/numpy.h	/^    char byteorder() const { return detail::array_descriptor_proxy(m_ptr)->byteorder; }$/;"	f
byteorder	include/pybind11/numpy.h	/^    char byteorder;$/;"	m	struct:PyArrayDescr_Proxy
bytes	include/pybind11/pytypes.h	/^    bytes(T s) : bytes(s.data(), s.size()) {}$/;"	f	class:handle::bytes
bytes	include/pybind11/pytypes.h	/^    bytes(const char *c = "") : object(PYBIND11_BYTES_FROM_STRING(c), stolen_t{}) {$/;"	f	class:handle::bytes
bytes	include/pybind11/pytypes.h	/^    bytes(const char *c, const SzType &n)$/;"	f	class:handle::bytes
bytes	include/pybind11/pytypes.h	/^    bytes(const std::string &s) : bytes(s.data(), s.size()) {}$/;"	f	class:handle::bytes
bytes	include/pybind11/pytypes.h	/^class bytes : public object {$/;"	c	class:handle
bytes	include/pybind11/pytypes.h	/^inline bytes::bytes(const pybind11::str &s) {$/;"	f	class:handle::bytes
c	include/pybind11/complex.h	/^    static constexpr const char c = format_descriptor<T>::c;$/;"	m	struct:format_descriptor
c	include/pybind11/detail/common.h	/^    static constexpr const char c = "?bBhHiIqQfdg"[detail::is_fmt_numeric<T>::index];$/;"	m	struct:format_descriptor
c	include/pybind11/detail/common.h	/^    static constexpr const char c = 'O';$/;"	m	struct:format_descriptor
c	tests/test_class.py	/^        c = m.AliasedHasOpNewDelSize()$/;"	v	class:test_operator_new_delete.SubAliased
c	tests/test_numpy_dtypes.cpp	/^    std::array<uint8_t, 3> c;$/;"	m	struct:ArrayStruct	file:
c2	tests/test_class.py	/^        c2 = SubAliased()$/;"	v	class:test_operator_new_delete.SubAliased
c_str	include/pybind11/detail/internals.h	/^const char *c_str(Args &&...args) {$/;"	f
c_strides	include/pybind11/buffer_info.h	/^inline std::vector<ssize_t> c_strides(const std::vector<ssize_t> &shape, ssize_t itemsize) {$/;"	f
cache	include/pybind11/pytypes.h	/^    mutable object cache;$/;"	m	class:handle::error_fetch_and_normalize::accessor
call	include/pybind11/cast.h	/^    enable_if_t<!std::is_void<Return>::value, Return> call(Func &&f) && {$/;"	f	class:argument_loader
call	include/pybind11/cast.h	/^    enable_if_t<std::is_void<Return>::value, void_type> call(Func &&f) && {$/;"	f	class:argument_loader
call	include/pybind11/cast.h	/^    object call(PyObject *ptr) const {$/;"	f	class:simple_collector
call	include/pybind11/cast.h	/^    object call(PyObject *ptr) const {$/;"	f	class:unpacking_collector
call	include/pybind11/cast.h	/^object object_api<Derived>::call(Args &&...args) const {$/;"	f	class:object_api
call_guard	include/pybind11/attr.h	/^struct call_guard<> {$/;"	s
call_guard	include/pybind11/attr.h	/^struct call_guard<T, Ts...> {$/;"	s
call_guard	include/pybind11/attr.h	/^struct call_guard<T> {$/;"	s
call_impl	include/pybind11/cast.h	/^    Return call_impl(Func &&f, index_sequence<Is...>, Guard &&) && {$/;"	f	class:argument_loader
call_operator_delete	include/pybind11/pybind11.h	/^inline void call_operator_delete(void *p, size_t s, size_t a) {$/;"	f
call_operator_delete	include/pybind11/pybind11.h	/^void call_operator_delete(T *p, size_t s, size_t) {$/;"	f
call_operator_delete	include/pybind11/pybind11.h	/^void call_operator_delete(T *p, size_t, size_t) {$/;"	f
callback	tests/test_pytypes.py	/^    def callback(_):$/;"	f	function:test_weakref
callback	tests/test_pytypes.py	/^    def callback(_):$/;"	f	function:test_weakref_err
cant_convert	tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_bool_caster
cant_convert	tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_int_convert
cant_convert	tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_numpy_bool
capsule	include/pybind11/pytypes.h	/^    capsule(PyObject *ptr, bool is_borrowed)$/;"	f	class:handle::capsule
capsule	include/pybind11/pytypes.h	/^    capsule(const void *value, PyCapsule_Destructor destructor)$/;"	f	class:handle::capsule
capsule	include/pybind11/pytypes.h	/^    capsule(const void *value, const char *name, void (*destructor)(void *)) {$/;"	f	class:handle::capsule
capsule	include/pybind11/pytypes.h	/^    capsule(const void *value, void (*destructor)(void *)) {$/;"	f	class:handle::capsule
capsule	include/pybind11/pytypes.h	/^    explicit capsule(const void *value,$/;"	f	class:handle::capsule
capsule	include/pybind11/pytypes.h	/^    explicit capsule(void (*destructor)()) {$/;"	f	class:handle::capsule
capsule	include/pybind11/pytypes.h	/^class capsule : public object {$/;"	c	class:handle
capture	tests/conftest.py	/^def capture(capsys):$/;"	f
cast	include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster
cast	include/pybind11/cast.h	/^    cast(const StringType &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:string_caster
cast	include/pybind11/cast.h	/^    cast(const std::reference_wrapper<type> &src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster
cast	include/pybind11/cast.h	/^    static handle cast(CharT src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/cast.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	class:tuple_caster
cast	include/pybind11/cast.h	/^    static handle cast(T *src, return_value_policy policy, handle parent) {$/;"	f	class:tuple_caster
cast	include/pybind11/cast.h	/^    static handle cast(T, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:void_caster
cast	include/pybind11/cast.h	/^    static handle cast(bool src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:type_caster
cast	include/pybind11/cast.h	/^    static handle cast(const CharT *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/cast.h	/^    static handle cast(const handle &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:pyobject_caster
cast	include/pybind11/cast.h	/^    static handle cast(const holder_type &src, return_value_policy, handle) {$/;"	f	struct:copyable_holder_caster
cast	include/pybind11/cast.h	/^    static handle cast(const void *ptr, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:type_caster
cast	include/pybind11/cast.h	/^    static handle cast(holder_type &&src, return_value_policy, handle) {$/;"	f	struct:move_only_holder_caster
cast	include/pybind11/cast.h	/^T cast(Handle &&handle) {$/;"	f
cast	include/pybind11/cast.h	/^T cast(Object &&obj) {$/;"	f
cast	include/pybind11/cast.h	/^T cast(const handle &handle) {$/;"	f
cast	include/pybind11/cast.h	/^T handle::cast() const {$/;"	f	class:handle
cast	include/pybind11/cast.h	/^T object::cast() && {$/;"	f	class:object
cast	include/pybind11/cast.h	/^T object::cast() const & {$/;"	f	class:object
cast	include/pybind11/cast.h	/^cast(object &&object) {$/;"	f
cast	include/pybind11/cast.h	/^detail::enable_if_t<detail::is_pyobject<T>::value, T> cast(object &&object) {$/;"	f
cast	include/pybind11/cast.h	/^inline void handle::cast() const {$/;"	f	class:handle
cast	include/pybind11/cast.h	/^inline void object::cast() && {$/;"	f	class:object
cast	include/pybind11/cast.h	/^inline void object::cast() const & {$/;"	f	class:object
cast	include/pybind11/cast.h	/^object cast(T &&value,$/;"	f
cast	include/pybind11/chrono.h	/^    static handle cast(const std::chrono::time_point<std::chrono::system_clock, Duration> &src,$/;"	f	class:type_caster
cast	include/pybind11/chrono.h	/^    static handle cast(const type &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:duration_caster
cast	include/pybind11/complex.h	/^    cast(const std::complex<T> &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:type_caster
cast	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE static handle cast(const void *_src,$/;"	f	class:type_caster_generic
cast	include/pybind11/detail/type_caster_base.h	/^    static handle cast(const itype &src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster_base
cast	include/pybind11/detail/type_caster_base.h	/^    static handle cast(const itype *src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster_base
cast	include/pybind11/detail/type_caster_base.h	/^    static handle cast(itype &&src, return_value_policy, handle parent) {$/;"	f	class:type_caster_base
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(Type &&src, return_value_policy \/* policy *\/, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const MapType &src, return_value_policy policy, handle parent) {$/;"	f	struct:eigen_map_caster
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type &&src, return_value_policy \/* policy *\/, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(MapType &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(MapType &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(MapType *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(Type &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const MapType &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const MapType &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const MapType *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const Type &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	include/pybind11/functional.h	/^    static handle cast(Func &&f_, return_value_policy policy, handle \/* parent *\/) {$/;"	f	struct:type_caster
cast	include/pybind11/pytypes.h	/^    T cast() const {$/;"	f	class:handle::error_fetch_and_normalize::accessor
cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:array_caster
cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:list_caster
cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:map_caster
cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:optional_caster
cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:set_caster
cast	include/pybind11/stl.h	/^    static handle cast(Variant &&src, return_value_policy policy, handle parent) {$/;"	f	struct:variant_caster
cast	include/pybind11/stl/filesystem.h	/^    static handle cast(const T &path, return_value_policy, handle) {$/;"	f	struct:path_caster
cast	include/pybind11/type_caster_pyobject_ptr.h	/^    static handle cast(PyObject *src, return_value_policy policy, handle \/*parent*\/) {$/;"	f	class:type_caster
cast	include/pybind11/type_caster_pyobject_ptr.h	/^    static handle cast(T &&, return_value_policy, handle \/*parent*\/) {$/;"	f	class:type_caster
cast	tests/pybind11_tests.h	/^    static handle cast(RValueCaster &&, return_value_policy, handle) {$/;"	f	class:type_caster
cast	tests/pybind11_tests.h	/^    static handle cast(const RValueCaster &, return_value_policy, handle) {$/;"	f	class:type_caster
cast	tests/test_copy_move.cpp	/^    static handle cast(const CopyOnlyInt &m, return_value_policy r, handle p) {$/;"	f	struct:type_caster
cast	tests/test_copy_move.cpp	/^    static handle cast(const CopyOnlyInt *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast	tests/test_copy_move.cpp	/^    static handle cast(const MoveOnlyInt &m, return_value_policy r, handle p) {$/;"	f	struct:type_caster
cast	tests/test_copy_move.cpp	/^    static handle cast(const MoveOrCopyInt &m, return_value_policy r, handle p) {$/;"	f	struct:type_caster
cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgAlwaysConverts &, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster
cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgInspector1 &src, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster
cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgInspector2 &src, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster
cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const DestructionTester &, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster
cast	tests/test_custom_type_casters.cpp	/^    static py_::handle cast(const MyType &, py_::return_value_policy, py_::handle) {$/;"	f	struct:other_lib::my_caster
cast_error_unable_to_convert_call_arg	include/pybind11/cast.h	/^inline cast_error cast_error_unable_to_convert_call_arg(const std::string &name) {$/;"	f
cast_holder	include/pybind11/detail/type_caster_base.h	/^    static handle cast_holder(const itype *src, const void *holder) {$/;"	f	class:type_caster_base
cast_impl	include/pybind11/cast.h	/^    cast_impl(T &&src, return_value_policy policy, handle parent, index_sequence<Is...>) {$/;"	f	class:tuple_caster
cast_impl	include/pybind11/eigen/matrix.h	/^    static handle cast_impl(CType *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast_impl	include/pybind11/eigen/tensor.h	/^    static handle cast_impl(C *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster
cast_op	include/pybind11/cast.h	/^cast_op(make_caster<T> &&caster) {$/;"	f
cast_op	include/pybind11/cast.h	/^typename make_caster<T>::template cast_op_type<T> cast_op(make_caster<T> &caster) {$/;"	f
cast_ref	include/pybind11/cast.h	/^enable_if_t<!cast_is_temporary_value_reference<T>::value, T> cast_ref(object &&,$/;"	f
cast_ref	include/pybind11/cast.h	/^enable_if_t<cast_is_temporary_value_reference<T>::value, T> cast_ref(object &&o,$/;"	f
cast_safe	include/pybind11/cast.h	/^cast_safe(object &&o) {$/;"	f
cast_safe	include/pybind11/cast.h	/^enable_if_t<cast_is_temporary_value_reference<T>::value, T> cast_safe(object &&) {$/;"	f
cast_safe	include/pybind11/cast.h	/^enable_if_t<std::is_void<T>::value, void> cast_safe(object &&) {}$/;"	f
cb	tests/test_type_caster_pyobject_ptr.py	/^    def cb(obj):$/;"	f	function:test_call_callback_with_pyobject_ptr_arg
cb	tests/test_type_caster_pyobject_ptr.py	/^    def cb(value):$/;"	f	function:test_call_callback_with_object_return
cdbl	tests/test_numpy_dtypes.cpp	/^    std::complex<double> cdbl;$/;"	m	struct:ComplexStruct	file:
cflt	tests/test_numpy_dtypes.cpp	/^    std::complex<float> cflt;$/;"	m	struct:ComplexStruct	file:
change	tools/libsize.py	/^        change = libsize - oldsize$/;"	v
changelog	tools/make_changelog.py	/^    changelog = ENTRY.findall(issue.body or "")$/;"	v
char_	include/pybind11/numpy.h	/^    char char_() const {$/;"	f
check	tests/test_pytypes.cpp	/^bool check(PyObject *o) { return PyFloat_Check(o) != 0; }$/;"	f	namespace:external::detail
check_flags	include/pybind11/numpy.h	/^inline bool check_flags(const void *ptr, int flag) {$/;"	f
check_holder_compat	include/pybind11/cast.h	/^    void check_holder_compat() {$/;"	f	struct:copyable_holder_caster
check_holder_compat	include/pybind11/detail/type_caster_base.h	/^    void check_holder_compat() {}$/;"	f	class:type_caster_generic
check_kw_only_arg	include/pybind11/attr.h	/^inline void check_kw_only_arg(const arg &a, function_record *r) {$/;"	f
check_self	tests/test_methods_and_attributes.py	/^    def check_self(self):$/;"	f	function:test_static_cls
class_	include/pybind11/attr.h	/^    handle class_;$/;"	m	struct:is_method
class_	include/pybind11/pybind11.h	/^    class_(handle scope, const char *name, const Extra &...extra) {$/;"	f	class:class_
class_	include/pybind11/pybind11.h	/^class class_ : public detail::generic_type {$/;"	c
class_factory	include/pybind11/detail/init.h	/^    remove_reference_t<CFunc> class_factory;$/;"	m	struct:factory
class_factory	include/pybind11/detail/init.h	/^    remove_reference_t<Func> class_factory;$/;"	m	struct:factory
clean_type_id	include/pybind11/detail/typeid.h	/^PYBIND11_NOINLINE void clean_type_id(std::string &name) {$/;"	f
clean_type_id	include/pybind11/detail/typeid.h	/^inline std::string clean_type_id(const char *typeid_name) {$/;"	f
clean_up	docs/conf.py	/^def clean_up(app, exception):  # noqa: ARG001$/;"	f
cleanup	tests/test_eigen_tensor.py	/^def cleanup():$/;"	f
cleanupAllInstances	tests/test_smart_ptr.cpp	/^    static void cleanupAllInstances() {$/;"	f	class:__anon9::MyObject4
cleanupAllInstances	tests/test_smart_ptr.cpp	/^    static void cleanupAllInstances() {$/;"	f	class:__anon9::MyObject4a
clear	include/pybind11/pytypes.h	/^    void clear() \/* py-non-const *\/ { PyDict_Clear(ptr()); }$/;"	f	class:handle::dict
clear	include/pybind11/pytypes.h	/^    void clear() \/* py-non-const *\/ { PySet_Clear(m_ptr); }$/;"	f	class:handle::set
clear	include/pybind11/pytypes.h	/^    void clear() {}$/;"	f	class:handle::error_fetch_and_normalize::error_already_set
clear_instance	include/pybind11/detail/class.h	/^inline void clear_instance(PyObject *self) {$/;"	f
clear_patients	include/pybind11/detail/class.h	/^inline void clear_patients(PyObject *self) {$/;"	f
cmake_files	tests/extra_python_package/test_files.py	/^cmake_files = {$/;"	v
code	docs/conf.py	/^    code = compile(f.read(), "..\/pybind11\/_version.py", "exec")$/;"	v
code	setup.py	/^code = compile(VERSION_FILE.read_text(encoding="utf-8"), "pybind11\/_version.py", "exec")$/;"	v
collect_arguments	include/pybind11/cast.h	/^simple_collector<policy> collect_arguments(Args &&...args) {$/;"	f
collect_arguments	include/pybind11/cast.h	/^unpacking_collector<policy> collect_arguments(Args &&...args) {$/;"	f
collect_ignore	tests/conftest.py	/^collect_ignore = []$/;"	v
cols	include/pybind11/eigen/matrix.h	/^    EigenIndex rows = 0, cols = 0;$/;"	m	struct:EigenConformable
cols	include/pybind11/eigen/matrix.h	/^    static constexpr EigenIndex rows = Type::RowsAtCompileTime, cols = Type::ColsAtCompileTime,$/;"	m	struct:EigenProps
compare	include/pybind11/buffer_info.h	/^    static bool compare(const buffer_info &b) {$/;"	f	struct:compare_buffer_info
compare_buffer_info	include/pybind11/buffer_info.h	/^struct compare_buffer_info {$/;"	s
compare_buffer_info	include/pybind11/buffer_info.h	/^struct compare_buffer_info<T, detail::enable_if_t<std::is_integral<T>::value>> {$/;"	s
compile_function	pybind11/setup_helpers.py	/^        def compile_function($/;"	f	function:ParallelCompile.function
compute	include/pybind11/pytypes.h	/^    bool compute($/;"	f	class:handle::slice
compute	include/pybind11/pytypes.h	/^    compute(size_t length, size_t *start, size_t *stop, size_t *step, size_t *slicelength) const {$/;"	f	class:handle::slice
compute_array_flag_from_tensor	include/pybind11/eigen/tensor.h	/^constexpr int compute_array_flag_from_tensor() {$/;"	f
concat	include/pybind11/detail/descr.h	/^    -> decltype(std::declval<descr<N + 2, Ts...>>() + concat(args...)) {$/;"	f
concat	include/pybind11/detail/descr.h	/^constexpr auto concat(const descr<N, Ts...> &d, const Args &...args) {$/;"	f
concat	include/pybind11/detail/descr.h	/^constexpr descr<0> concat() { return {}; }$/;"	f
concat	include/pybind11/detail/descr.h	/^constexpr descr<N, Ts...> concat(const descr<N, Ts...> &descr) {$/;"	f
conformable	include/pybind11/eigen/matrix.h	/^    bool conformable = false;$/;"	m	struct:EigenConformable
conformable	include/pybind11/eigen/matrix.h	/^    static EigenConformable<row_major> conformable(const array &a) {$/;"	f	struct:EigenProps
constRefQualified	tests/test_methods_and_attributes.cpp	/^    int constRefQualified(int other) const & { return value + other; }$/;"	f	struct:RefQualified
const_	include/pybind11/detail/common.h	/^static constexpr auto const_ = std::true_type{};$/;"	m	struct:overload_cast_impl
const_name	include/pybind11/detail/descr.h	/^constexpr descr<0> const_name(char const (&)[1]) { return {}; }$/;"	f
const_name	include/pybind11/detail/descr.h	/^constexpr descr<1, Type> const_name() {$/;"	f
const_name	include/pybind11/detail/descr.h	/^constexpr descr<N - 1> const_name(char const (&text)[N]) {$/;"	f
const_name	include/pybind11/detail/descr.h	/^constexpr enable_if_t<!B, T2> const_name(const T1 &, const T2 &d) {$/;"	f
const_name	include/pybind11/detail/descr.h	/^constexpr enable_if_t<!B, descr<N2 - 1>> const_name(char const (&)[N1], char const (&text2)[N2]) {$/;"	f
const_name	include/pybind11/detail/descr.h	/^constexpr enable_if_t<B, T1> const_name(const T1 &d, const T2 &) {$/;"	f
const_name	include/pybind11/detail/descr.h	/^constexpr enable_if_t<B, descr<N1 - 1>> const_name(char const (&text1)[N1], char const (&)[N2]) {$/;"	f
constants	include/pybind11/numpy.h	/^    enum constants {$/;"	g	struct:npy_api
constexpr_first	include/pybind11/detail/common.h	/^constexpr int constexpr_first() {$/;"	f
constexpr_last	include/pybind11/detail/common.h	/^constexpr int constexpr_last() {$/;"	f
constexpr_sum	include/pybind11/detail/common.h	/^constexpr size_t constexpr_sum() { return 0; }$/;"	f
constexpr_sum	include/pybind11/detail/common.h	/^constexpr size_t constexpr_sum(T n, Ts... ns) {$/;"	f
constexpr_sum	include/pybind11/detail/common.h	/^constexpr size_t constexpr_sum(Ts... ns) {$/;"	f
construct	include/pybind11/detail/init.h	/^void construct(...) {$/;"	f
construct	include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Alias<Class> &&result, bool) {$/;"	f
construct	include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Alias<Class> *alias_ptr, bool) {$/;"	f
construct	include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Cpp<Class> &&result, bool need_alias) {$/;"	f
construct	include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Cpp<Class> *ptr, bool need_alias) {$/;"	f
construct	include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Holder<Class> holder, bool need_alias) {$/;"	f
construct1	tests/test_factory_constructors.cpp	/^    static TestFactory1 *construct1() { return new TestFactory1(); }$/;"	f	class:TestFactoryHelper
construct1	tests/test_factory_constructors.cpp	/^    static std::unique_ptr<TestFactory1> construct1(int a) {$/;"	f	class:TestFactoryHelper
construct1_string	tests/test_factory_constructors.cpp	/^    static TestFactory1 *construct1_string(std::string a) {$/;"	f	class:TestFactoryHelper
construct2	tests/test_factory_constructors.cpp	/^    static TestFactory2 *construct2() { return new TestFactory2(); }$/;"	f	class:TestFactoryHelper
construct2	tests/test_factory_constructors.cpp	/^    static TestFactory2 construct2(std::string a) { return TestFactory2(std::move(a)); }$/;"	f	class:TestFactoryHelper
construct2	tests/test_factory_constructors.cpp	/^    static std::unique_ptr<TestFactory2> construct2(int a) {$/;"	f	class:TestFactoryHelper
construct3	tests/test_factory_constructors.cpp	/^    static TestFactory3 *construct3() { return new TestFactory3(); }$/;"	f	class:TestFactoryHelper
construct3	tests/test_factory_constructors.cpp	/^    static std::shared_ptr<TestFactory3> construct3(int a) {$/;"	f	class:TestFactoryHelper
construct_alias_from_cpp	include/pybind11/detail/init.h	/^[[noreturn]] void construct_alias_from_cpp(std::false_type \/*!is_alias_constructible*\/,$/;"	f
construct_alias_from_cpp	include/pybind11/detail/init.h	/^void construct_alias_from_cpp(std::true_type \/*is_alias_constructible*\/,$/;"	f
construct_or_initialize	include/pybind11/detail/init.h	/^inline Class *construct_or_initialize(Args &&...args) {$/;"	f
constructor	include/pybind11/detail/init.h	/^struct constructor {$/;"	s
consume_str	tests/test_methods_and_attributes.cpp	/^    void consume_str(std::string &&) {}$/;"	f	class:ExampleMandA
container_mapped_type_traits	include/pybind11/detail/type_caster_base.h	/^struct container_mapped_type_traits {$/;"	s
container_mapped_type_traits	include/pybind11/detail/type_caster_base.h	/^struct container_mapped_type_traits<$/;"	s
container_traits	include/pybind11/stl_bind.h	/^struct container_traits {$/;"	s
container_value_type_traits	include/pybind11/detail/type_caster_base.h	/^struct container_value_type_traits : std::false_type {$/;"	s
container_value_type_traits	include/pybind11/detail/type_caster_base.h	/^struct container_value_type_traits<$/;"	s
contains	include/pybind11/pytypes.h	/^    bool contains(T &&key) const {$/;"	f	class:handle::dict
contains	include/pybind11/pytypes.h	/^    bool contains(T &&val) const {$/;"	f	class:handle::anyset
contains	include/pybind11/pytypes.h	/^bool object_api<D>::contains(T &&item) const {$/;"	f	class:handle::object_api
conv	tests/test_pytypes.cpp	/^PyObject *conv(PyObject *o) {$/;"	f	namespace:external::detail
convert	include/pybind11/attr.h	/^    bool convert : 1;  \/\/\/< True if the argument is allowed to convert when loading$/;"	m	struct:argument_record
convert_dsizes_to_vector	include/pybind11/eigen/tensor.h	/^std::vector<T> convert_dsizes_to_vector(const Eigen::DSizes<T, size> &arr) {$/;"	f
copy	include/pybind11/detail/common.h	/^    copy,$/;"	m	class:return_value_policy
copy_assignments	tests/constructor_stats.h	/^    int copy_assignments = 0;$/;"	m	class:ConstructorStats
copy_constructions	tests/constructor_stats.h	/^    int copy_constructions = 0;$/;"	m	class:ConstructorStats
copy_created	tests/constructor_stats.h	/^    void copy_created(void *inst) {$/;"	f	class:ConstructorStats
copy_or_ref	include/pybind11/eigen/matrix.h	/^    Array copy_or_ref;$/;"	m	struct:type_caster
copyable_holder_caster	include/pybind11/cast.h	/^struct copyable_holder_caster : public type_caster_base<type> {$/;"	s
copyright	docs/conf.py	/^copyright = "2017, Wenzel Jakob"$/;"	v
copysign	include/pybind11/detail/common.h	288;"	d
costream	include/pybind11/iostream.h	/^    std::ostream &costream;$/;"	m	class:scoped_ostream_redirect
cpp_flag_cache	pybind11/setup_helpers.py	/^cpp_flag_cache = None$/;"	v
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Func &&f, const Extra &...extra) {$/;"	f	class:cpp_function
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Return (*f)(Args...), const Extra &...extra) {$/;"	f	class:cpp_function
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(std::nullptr_t) {}$/;"	f	class:cpp_function
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(std::nullptr_t, const is_setter &) {}$/;"	f	class:cpp_function
cpp_function	include/pybind11/pybind11.h	/^class cpp_function : public function {$/;"	c
cpp_function	include/pybind11/pytypes.h	/^    handle cpp_function() const {$/;"	f	class:handle::function
cpp_std	tests/pybind11_tests.cpp	/^const char *cpp_std() {$/;"	f
cpp_version	setup.py	/^cpp_version = "{MAJOR}.{MINOR}.{PATCH}".format(**matches)$/;"	v
cpptype	include/pybind11/detail/internals.h	/^    const std::type_info *cpptype;$/;"	m	struct:type_info
cpptype	include/pybind11/detail/type_caster_base.h	/^    const std::type_info *cpptype = nullptr;$/;"	m	class:type_caster_generic
create_and_destroy	tests/test_factory_constructors.py	/^def create_and_destroy(*args):$/;"	f
create_extension_module	include/pybind11/pybind11.h	/^    static module_ create_extension_module(const char *name, const char *doc, module_def *def) {$/;"	f	class:module_
create_recarray	tests/test_numpy_dtypes.cpp	/^py::array_t<S, 0> create_recarray(size_t n) {$/;"	f	class:E1	file:
create_zoo	tests/test_tagbased_polymorphic.cpp	/^std::vector<std::unique_ptr<Animal>> create_zoo() {$/;"	f	struct:Animal
created	tests/constructor_stats.h	/^    void created(void *inst) { ++_instances[inst]; }$/;"	f	class:ConstructorStats
curr	include/pybind11/detail/type_caster_base.h	/^              curr(inst \/* instance *\/,$/;"	f	struct:values_and_holders::iterator
curr	include/pybind11/detail/type_caster_base.h	/^        value_and_holder curr;$/;"	m	struct:values_and_holders::iterator
custom_type_setup	include/pybind11/attr.h	/^    explicit custom_type_setup(callback value) : value(std::move(value)) {}$/;"	f	struct:custom_type_setup
custom_type_setup	include/pybind11/attr.h	/^struct custom_type_setup {$/;"	s
custom_type_setup_callback	include/pybind11/attr.h	/^    custom_type_setup::callback custom_type_setup_callback;$/;"	m	struct:type_record
custom_unique_ptr	tests/test_smart_ptr.cpp	/^    explicit custom_unique_ptr(T *p) : impl(p) {}$/;"	f	class:__anon9::custom_unique_ptr
custom_unique_ptr	tests/test_smart_ptr.cpp	/^class custom_unique_ptr {$/;"	c	namespace:__anon9	file:
cxx_std	pybind11/setup_helpers.py	/^    def cxx_std(self) -> int:$/;"	m	class:Pybind11Extension
cxx_std	pybind11/setup_helpers.py	/^    def cxx_std(self, level: int) -> None:$/;"	m	class:Pybind11Extension
d	tests/test_class.py	/^        d = m.HasOpNewDelBoth()$/;"	v	class:test_operator_new_delete.SubAliased
d	tests/test_exceptions.cpp	/^    py::dict d;$/;"	m	struct:PythonCallInDestructor	file:
d	tests/test_numpy_dtypes.cpp	/^    std::array<float, 2> d[4];$/;"	m	struct:ArrayStruct	file:
d	tests/test_pytypes.py	/^        d = {"operator[object]": 1, "operator[char *]": 2}$/;"	v	class:test_accessors.TestObject
d	tests/test_pytypes.py	/^    d = {"key": None}$/;"	v	class:CustomContains
d_buffer	include/pybind11/iostream.h	/^    std::unique_ptr<char[]> d_buffer;$/;"	m	class:pythonbuf
data	include/pybind11/attr.h	/^    void *data[3] = {};$/;"	m	struct:function_record
data	include/pybind11/eigen/matrix.h	/^    Scalar *data(Array &a) {$/;"	f	struct:type_caster
data	include/pybind11/eigen/matrix.h	/^    const Scalar *data(Array &a) {$/;"	f	struct:type_caster
data	include/pybind11/numpy.h	/^    char *data;$/;"	m	struct:PyArray_Proxy
data	tests/test_numpy_array.cpp	/^arr data(const arr &a, Ix... index) {$/;"	f
data_	tests/test_vector_unique_ptr_member.cpp	/^    const std::vector<std::unique_ptr<DataType>> data_;$/;"	m	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner	file:
data_i	tests/test_numpy_array.cpp	/^static int data_i = 42;$/;"	v	file:
data_size	tests/test_vector_unique_ptr_member.cpp	/^    std::size_t data_size() const { return data_.size(); }$/;"	f	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner
data_t	tests/test_numpy_array.cpp	/^arr data_t(const arr_t &a, Ix... index) {$/;"	f
dealloc	include/pybind11/attr.h	/^    void (*dealloc)(detail::value_and_holder &) = nullptr;$/;"	m	struct:type_record
dealloc	include/pybind11/detail/internals.h	/^    void (*dealloc)(value_and_holder &v_h);$/;"	m	struct:type_info
dealloc	include/pybind11/pybind11.h	/^    static void dealloc(detail::value_and_holder &v_h) {$/;"	f	class:class_
deallocate_layout	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE void instance::deallocate_layout() {$/;"	f	class:instance
decRef	tests/object.h	/^    void decRef(bool dealloc = true) const {$/;"	f	class:Object
dec_ref	include/pybind11/gil.h	/^    PYBIND11_NOINLINE void dec_ref() {$/;"	f	class:gil_scoped_acquire
decltype	include/pybind11/cast.h	/^    static auto get(const T &p) -> decltype(p.get()) { return p.get(); }$/;"	f	struct:holder_helper
decltype	include/pybind11/detail/common.h	/^    constexpr auto operator()(Return (*pf)(Args...)) const noexcept -> decltype(pf) {$/;"	f	struct:overload_cast_impl
decltype	include/pybind11/detail/type_caster_base.h	/^        -> decltype(new T(std::declval<T &&>()), Constructor{}) {$/;"	f	class:type_caster_base
decltype	include/pybind11/detail/type_caster_base.h	/^        -> decltype(new T(std::declval<const T>()), Constructor{}) {$/;"	f	class:type_caster_base
declval	include/pybind11/stl_bind.h	/^    test_comparable(decltype(std::declval<const T2 &>() == std::declval<const T2 &>()) *);$/;"	m	class:container_traits::std
decode_utfN	include/pybind11/cast.h	/^    static handle decode_utfN(const char *buffer, ssize_t nbytes) {$/;"	f	struct:string_caster
decrement	include/pybind11/pytypes.h	/^    void decrement() { --index; }$/;"	f	class:handle::sequence_slow_readwrite
decrement	include/pybind11/pytypes.h	/^    void decrement() { --ptr; }$/;"	f	class:handle::sequence_fast_readonly
def	include/pybind11/attr.h	/^    PyMethodDef *def = nullptr;$/;"	m	struct:function_record
def	include/pybind11/pybind11.h	/^    class_ &def(const T &op, const Extra &...extra) {$/;"	f	class:class_
def	include/pybind11/pybind11.h	/^    class_ &def(const char *name_, Func &&f, const Extra &...extra) {$/;"	f	class:class_
def	include/pybind11/pybind11.h	/^    class_ &def(const detail::initimpl::alias_constructor<Args...> &init, const Extra &...extra) {$/;"	f	class:class_
def	include/pybind11/pybind11.h	/^    class_ &def(const detail::initimpl::constructor<Args...> &init, const Extra &...extra) {$/;"	f	class:class_
def	include/pybind11/pybind11.h	/^    class_ &def(detail::initimpl::factory<Args...> &&init, const Extra &...extra) {$/;"	f	class:class_
def	include/pybind11/pybind11.h	/^    class_ &def(detail::initimpl::pickle_factory<Args...> &&pf, const Extra &...extra) {$/;"	f	class:class_
def	include/pybind11/pybind11.h	/^    module_ &def(const char *name_, Func &&f, const Extra &...extra) {$/;"	f	class:module_
def_buffer	include/pybind11/pybind11.h	/^    class_ &def_buffer(Func &&func) {$/;"	f	class:class_
def_cast	include/pybind11/pybind11.h	/^    class_ &def_cast(const T &op, const Extra &...extra) {$/;"	f	class:class_
def_index_fn	tests/test_numpy_array.cpp	135;"	d	file:
def_property	include/pybind11/pybind11.h	/^    class_ &def_property(const char *name,$/;"	f	class:class_
def_property	include/pybind11/pybind11.h	/^    def_property(const char *name, const Getter &fget, const Setter &fset, const Extra &...extra) {$/;"	f	class:class_
def_property_readonly	include/pybind11/pybind11.h	/^    class_ &def_property_readonly(const char *name, const Getter &fget, const Extra &...extra) {$/;"	f	class:class_
def_property_readonly	include/pybind11/pybind11.h	/^    def_property_readonly(const char *name, const cpp_function &fget, const Extra &...extra) {$/;"	f	class:class_
def_property_readonly_static	include/pybind11/pybind11.h	/^    class_ &def_property_readonly_static(const char *name,$/;"	f	class:class_
def_property_readonly_static	include/pybind11/pybind11.h	/^    def_property_readonly_static(const char *name, const Getter &fget, const Extra &...extra) {$/;"	f	class:class_
def_property_static	include/pybind11/pybind11.h	/^    class_ &def_property_static(const char *name,$/;"	f	class:class_
def_property_static_impl	include/pybind11/pybind11.h	/^    void def_property_static_impl(const char *name,$/;"	f	class:generic_type
def_readonly	include/pybind11/pybind11.h	/^    class_ &def_readonly(const char *name, const D C::*pm, const Extra &...extra) {$/;"	f	class:class_
def_readonly_static	include/pybind11/pybind11.h	/^    class_ &def_readonly_static(const char *name, const D *pm, const Extra &...extra) {$/;"	f	class:class_
def_readwrite	include/pybind11/pybind11.h	/^    class_ &def_readwrite(const char *name, D C::*pm, const Extra &...extra) {$/;"	f	class:class_
def_readwrite_static	include/pybind11/pybind11.h	/^    class_ &def_readwrite_static(const char *name, D *pm, const Extra &...extra) {$/;"	f	class:class_
def_static	include/pybind11/pybind11.h	/^    class_ &def_static(const char *name_, Func &&f, const Extra &...extra) {$/;"	f	class:class_
def_submodule	include/pybind11/pybind11.h	/^    module_ def_submodule(const char *name, const char *doc = nullptr) {$/;"	f	class:module_
default_constructed	tests/test_pytypes.cpp	/^PyObject *default_constructed() { return PyFloat_FromDouble(0.0); }$/;"	f	namespace:external::detail
default_constructions	tests/constructor_stats.h	/^    int default_constructions = 0;$/;"	m	class:ConstructorStats
default_created	tests/constructor_stats.h	/^    void default_created(void *inst) {$/;"	f	class:ConstructorStats
default_holder	include/pybind11/attr.h	/^    bool default_holder : 1;$/;"	m	struct:type_record
default_holder	include/pybind11/detail/internals.h	/^    bool default_holder : 1;$/;"	m	struct:type_info
default_metaclass	include/pybind11/detail/internals.h	/^    PyTypeObject *default_metaclass;$/;"	m	struct:internals
default_role	docs/conf.py	/^default_role = "any"$/;"	v
deferred_type	include/pybind11/detail/common.h	/^struct deferred_type {$/;"	s
delattr	include/pybind11/pytypes.h	/^inline void delattr(handle obj, const char *name) {$/;"	f	struct:handle::error_fetch_and_normalize
delattr	include/pybind11/pytypes.h	/^inline void delattr(handle obj, handle name) {$/;"	f	struct:handle::error_fetch_and_normalize
deprecated_call	tests/env.py	/^def deprecated_call():$/;"	f
dereference	include/pybind11/pytypes.h	/^    reference dereference() const { return *ptr; }$/;"	f	class:handle::sequence_fast_readonly
dereference	include/pybind11/pytypes.h	/^    reference dereference() const { return {key, value}; }$/;"	f	class:handle::dict_readonly
dereference	include/pybind11/pytypes.h	/^    reference dereference() const { return {obj, static_cast<size_t>(index)}; }$/;"	f	class:handle::sequence_slow_readwrite
deregister_instance	include/pybind11/detail/class.h	/^inline bool deregister_instance(instance *self, void *valptr, const type_info *tinfo) {$/;"	f
deregister_instance_impl	include/pybind11/detail/class.h	/^inline bool deregister_instance_impl(void *ptr, instance *self) {$/;"	f
derived	include/pybind11/pytypes.h	/^    const Derived &derived() const { return static_cast<const Derived &>(*this); }$/;"	f	class:object_api
derived	tests/test_methods_and_attributes.py	/^        derived = cls()$/;"	v	class:test_dynamic_attributes.PythonDerivedDynamicClass
descr	include/pybind11/attr.h	/^    const char *descr; \/\/\/< Human-readable version of the argument value$/;"	m	struct:argument_record
descr	include/pybind11/cast.h	/^    const char *descr;$/;"	m	struct:arg_v
descr	include/pybind11/detail/descr.h	/^    constexpr descr(char c, Chars... cs) : text{c, static_cast<char>(cs)..., '\\0'} {}$/;"	f	struct:descr
descr	include/pybind11/detail/descr.h	/^    constexpr descr(char const (&s)[N + 1]) : descr(s, make_index_sequence<N>()) {}$/;"	f	struct:descr
descr	include/pybind11/detail/descr.h	/^    constexpr descr(char const (&s)[N + 1], index_sequence<Is...>) : text{s[Is]..., '\\0'} {}$/;"	f	struct:descr
descr	include/pybind11/detail/descr.h	/^struct descr {$/;"	s
descr	include/pybind11/numpy.h	/^    PyArrayDescr_Proxy *descr;$/;"	m	struct:PyVoidScalarObject_Proxy
descr	include/pybind11/numpy.h	/^    PyObject *descr;$/;"	m	struct:PyArray_Proxy
descriptor	include/pybind11/eigen/matrix.h	/^    static constexpr auto descriptor$/;"	m	struct:EigenProps
destroyed	tests/constructor_stats.h	/^    void destroyed(void *inst) {$/;"	f	class:ConstructorStats
destruct	include/pybind11/pybind11.h	/^    static void destruct(detail::function_record *rec, bool free_strings = true) {$/;"	f	class:cpp_function
detail	tests/test_custom_type_casters.cpp	/^namespace detail {$/;"	n	namespace:PYBIND11_NAMESPACE	file:
detail	tests/test_pytypes.cpp	/^namespace detail {$/;"	n	namespace:external	file:
detail	tests/test_stl.cpp	/^namespace detail {$/;"	n	namespace:PYBIND11_NAMESPACE	file:
detail	tests/test_stl_binders.cpp	/^namespace detail {$/;"	n	namespace:pybind11	file:
detail	tests/test_vector_unique_ptr_member.cpp	/^namespace detail {$/;"	n	namespace:pybind11	file:
detail_headers	tests/extra_python_package/test_files.py	/^detail_headers = {$/;"	v
details	include/pybind11/eigen/tensor.h	/^    static constexpr auto details$/;"	m	struct:get_tensor_descriptor
dict	include/pybind11/pytypes.h	/^    dict() : object(PyDict_New(), stolen_t{}) {$/;"	f	class:handle::dict
dict	include/pybind11/pytypes.h	/^    explicit dict(Args &&...args) : dict(collector(std::forward<Args>(args)...).kwargs()) {}$/;"	f	class:handle::dict
dict	include/pybind11/pytypes.h	/^class dict : public object {$/;"	c	class:handle
dict_getitem	include/pybind11/pytypes.h	/^inline PyObject *dict_getitem(PyObject *v, PyObject *key) {$/;"	f	struct:handle::error_fetch_and_normalize
dict_getitemstring	include/pybind11/pytypes.h	/^inline PyObject *dict_getitemstring(PyObject *v, const char *key) {$/;"	f	struct:handle::error_fetch_and_normalize
dict_readonly	include/pybind11/pytypes.h	/^    dict_readonly(handle obj, ssize_t pos) : obj(obj), pos(pos) { increment(); }$/;"	f	class:handle::dict_readonly
dict_readonly	include/pybind11/pytypes.h	/^class dict_readonly {$/;"	c	class:handle
different_resolutions	tests/test_chrono.cpp	/^struct different_resolutions {$/;"	s	file:
digits	include/pybind11/detail/descr.h	/^    static constexpr auto digits = descr<sizeof...(Digits)>(('0' + Digits)...);$/;"	m	struct:int_to_str
dimensions	include/pybind11/numpy.h	/^    ssize_t *dimensions;$/;"	m	struct:PyArray_Proxy
dimensions_descriptor	include/pybind11/eigen/tensor.h	/^    static constexpr auto dimensions_descriptor = concat(const_name<Indices>()...);$/;"	m	struct:eigen_tensor_helper
dimensions_descriptor	include/pybind11/eigen/tensor.h	/^    static constexpr auto dimensions_descriptor$/;"	m	struct:eigen_tensor_helper
direct_conversions	include/pybind11/detail/internals.h	/^    std::vector<bool (*)(PyObject *, void *&)> *direct_conversions;$/;"	m	struct:type_info
direct_conversions	include/pybind11/detail/internals.h	/^    type_map<std::vector<bool (*)(PyObject *, void *&)>> direct_conversions;$/;"	m	struct:internals
disable_enum_members_docstring	include/pybind11/options.h	/^    options &disable_enum_members_docstring() & {$/;"	f	class:options
disable_function_signatures	include/pybind11/options.h	/^    options &disable_function_signatures() & {$/;"	f	class:options
disable_user_defined_docstrings	include/pybind11/options.h	/^    options &disable_user_defined_docstrings() & {$/;"	f	class:options
disarm	include/pybind11/gil.h	/^    PYBIND11_NOINLINE void disarm() { active = false; }$/;"	f	class:gil_scoped_acquire
disarm	include/pybind11/gil.h	/^    PYBIND11_NOINLINE void disarm() { active = false; }$/;"	f	class:gil_scoped_release
disassoc	include/pybind11/gil.h	/^    bool disassoc;$/;"	m	class:gil_scoped_release
discard_as_unraisable	include/pybind11/pytypes.h	/^    void discard_as_unraisable(const char *err_context) {$/;"	f	class:handle::error_fetch_and_normalize::error_already_set
discard_as_unraisable	include/pybind11/pytypes.h	/^    void discard_as_unraisable(object err_context) {$/;"	f	class:handle::error_fetch_and_normalize::error_already_set
dispatch	tests/test_virtual_functions.py	/^        def dispatch(self):$/;"	m	class:test_dispatch_issue.PyClass1
dispatch	tests/test_virtual_functions.py	/^        def dispatch(self):$/;"	m	class:test_dispatch_issue.PyClass2
dispatcher	include/pybind11/pybind11.h	/^    static PyObject *dispatcher(PyObject *self, PyObject *args_in, PyObject *kwargs_in) {$/;"	f	class:cpp_function
distance_to	include/pybind11/pytypes.h	/^    ssize_t distance_to(const sequence_fast_readonly &b) const { return ptr - b.ptr; }$/;"	f	class:handle::sequence_fast_readonly
distance_to	include/pybind11/pytypes.h	/^    ssize_t distance_to(const sequence_slow_readwrite &b) const { return index - b.index; }$/;"	f	class:handle::sequence_slow_readwrite
do_nothing	tests/test_methods_and_attributes.cpp	/^    void do_nothing() const {}$/;"	f	class:UnregisteredBase
do_stderr_	include/pybind11/iostream.h	/^    bool do_stderr_;$/;"	m	class:OstreamRedirect
do_stdout_	include/pybind11/iostream.h	/^    bool do_stdout_;$/;"	m	class:OstreamRedirect
doc	include/pybind11/attr.h	/^    char *doc = nullptr;$/;"	m	struct:function_record
doc	include/pybind11/attr.h	/^    const char *doc = nullptr;$/;"	m	struct:type_record
doc	include/pybind11/attr.h	/^    explicit doc(const char *value) : value(value) {}$/;"	f	struct:doc
doc	include/pybind11/attr.h	/^struct doc {$/;"	s
doc	include/pybind11/pytypes.h	/^str_attr_accessor object_api<D>::doc() const {$/;"	f	class:handle::object_api
doc	tests/conftest.py	/^def doc():$/;"	f
docs	noxfile.py	/^def docs(session: nox.Session) -> None:$/;"	f
double	tests/test_callbacks.py	/^        def double(self, val):$/;"	m	class:test_bound_method_callback.MyClass
dt_fmt	tests/test_numpy_dtypes.py	/^def dt_fmt():$/;"	f
dtype_ptr	include/pybind11/numpy.h	/^    PyObject *dtype_ptr;$/;"	m	struct:numpy_type_info
dummy1	tests/test_numpy_dtypes.cpp	/^    uint64_t dummy1;$/;"	m	struct:PartialNestedStruct	file:
dummy2	tests/test_numpy_dtypes.cpp	/^    uint64_t dummy2;$/;"	m	struct:PartialNestedStruct	file:
dummy2	tests/test_numpy_dtypes.cpp	/^    uint64_t dummy2;$/;"	m	struct:PartialStruct	file:
dummy_function	tests/test_callbacks.cpp	/^int dummy_function(int i) { return i + 1; }$/;"	f
duration_caster	include/pybind11/chrono.h	/^class duration_caster {$/;"	c
dynamic	include/pybind11/eigen/matrix.h	/^        dynamic = !fixed_rows && !fixed_cols;             \/\/ Fully-dynamic size$/;"	m	struct:EigenProps
dynamic_attr	include/pybind11/attr.h	/^    bool dynamic_attr : 1;$/;"	m	struct:type_record
dynamic_attr	include/pybind11/attr.h	/^struct dynamic_attr {};$/;"	s
dynamic_stride	include/pybind11/eigen/matrix.h	/^    static constexpr bool dynamic_stride$/;"	m	struct:EigenProps
eigen_array_cast	include/pybind11/eigen/matrix.h	/^eigen_array_cast(typename props::Type const &src, handle base = handle(), bool writeable = true) {$/;"	f
eigen_encapsulate	include/pybind11/eigen/matrix.h	/^handle eigen_encapsulate(Type *src) {$/;"	f
eigen_extract_stride	include/pybind11/eigen/matrix.h	/^struct eigen_extract_stride {$/;"	s
eigen_extract_stride	include/pybind11/eigen/matrix.h	/^struct eigen_extract_stride<Eigen::Map<PlainObjectType, MapOptions, StrideType>> {$/;"	s
eigen_extract_stride	include/pybind11/eigen/matrix.h	/^struct eigen_extract_stride<Eigen::Ref<PlainObjectType, Options, StrideType>> {$/;"	s
eigen_headers	tests/extra_python_package/test_files.py	/^eigen_headers = {$/;"	v
eigen_map_caster	include/pybind11/eigen/matrix.h	/^struct eigen_map_caster {$/;"	s
eigen_ref_array	include/pybind11/eigen/matrix.h	/^handle eigen_ref_array(Type &src, handle parent = none()) {$/;"	f
eigen_tensor	tests/test_eigen_tensor.py	/^eigen_tensor = pytest.importorskip("pybind11_tests.eigen_tensor")$/;"	v
eigen_tensor_helper	include/pybind11/eigen/tensor.h	/^struct eigen_tensor_helper {};$/;"	s
eigen_tensor_helper	include/pybind11/eigen/tensor.h	/^struct eigen_tensor_helper<$/;"	s
eigen_tensor_helper	include/pybind11/eigen/tensor.h	/^struct eigen_tensor_helper<Eigen::Tensor<Scalar_, NumIndices_, Options_, IndexType>> {$/;"	s
elapsed	docs/benchmark.py	/^        elapsed = (n2 - n1).total_seconds()$/;"	v
ellipsis	include/pybind11/pytypes.h	/^    ellipsis() : object(Py_Ellipsis, borrowed_t{}) {}$/;"	f	class:handle::ellipsis
ellipsis	include/pybind11/pytypes.h	/^class ellipsis : public object {$/;"	c	class:handle
elsize	include/pybind11/numpy.h	/^    int elsize;$/;"	m	struct:PyArrayDescr_Proxy
embedded_module	include/pybind11/embed.h	/^    embedded_module(const char *name, init_t init) {$/;"	f	struct:embedded_module
embedded_module	include/pybind11/embed.h	/^struct embedded_module {$/;"	s
emplace	tests/test_stl.cpp	/^    T &emplace(Args &&...args) {$/;"	f	class:ReferenceSensitiveOptional
empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:handle::anyset
empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:handle::dict
empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:handle::list
empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:handle::sequence
empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:handle::tuple
empty	tests/test_copy_move.cpp	/^struct empty {$/;"	s	file:
enable_buffer_protocol	include/pybind11/detail/class.h	/^inline void enable_buffer_protocol(PyHeapTypeObject *heap_type) {$/;"	f
enable_dynamic_attributes	include/pybind11/detail/class.h	/^inline void enable_dynamic_attributes(PyHeapTypeObject *heap_type) {$/;"	f
enable_enum_members_docstring	include/pybind11/options.h	/^    options &enable_enum_members_docstring() & {$/;"	f	class:options
enable_function_signatures	include/pybind11/options.h	/^    options &enable_function_signatures() & {$/;"	f	class:options
enable_user_defined_docstrings	include/pybind11/options.h	/^    options &enable_user_defined_docstrings() & {$/;"	f	class:options
enabled	tests/test_call_policies.cpp	/^    static bool enabled;$/;"	m	struct:CustomGuard	file:
enabled	tests/test_call_policies.cpp	/^    static bool enabled;$/;"	m	struct:DependentGuard	file:
enabled	tests/test_call_policies.cpp	/^bool CustomGuard::enabled = false;$/;"	m	class:CustomGuard	file:
enabled	tests/test_call_policies.cpp	/^bool DependentGuard::enabled = false;$/;"	m	class:DependentGuard	file:
end	include/pybind11/detail/type_caster_base.h	/^    iterator end() { return iterator(tinfo.size()); }$/;"	f	struct:values_and_holders
end	include/pybind11/pybind11.h	/^    Sentinel end;$/;"	m	struct:iterator_state
end	include/pybind11/pytypes.h	/^    detail::dict_iterator end() const { return {}; }$/;"	f	class:handle::dict
end	include/pybind11/pytypes.h	/^    detail::list_iterator end() const { return {*this, PyList_GET_SIZE(m_ptr)}; }$/;"	f	class:handle::list
end	include/pybind11/pytypes.h	/^    detail::sequence_iterator end() const { return {*this, PySequence_Size(m_ptr)}; }$/;"	f	class:handle::sequence
end	include/pybind11/pytypes.h	/^    detail::tuple_iterator end() const { return {*this, PyTuple_GET_SIZE(m_ptr)}; }$/;"	f	class:handle::tuple
end	include/pybind11/pytypes.h	/^iterator object_api<D>::end() const {$/;"	f	class:handle::object_api
ensure_builtins_in_globals	include/pybind11/eval.h	/^inline void ensure_builtins_in_globals(object &global) {$/;"	f
ensure_object	include/pybind11/pytypes.h	/^    static object ensure_object(handle h) { return reinterpret_borrow<object>(h); }$/;"	f	class:handle::error_fetch_and_normalize::accessor
ensure_object	include/pybind11/pytypes.h	/^    static object ensure_object(object &&o) { return std::move(o); }$/;"	f	class:handle::error_fetch_and_normalize::accessor
enter	include/pybind11/iostream.h	/^    void enter() {$/;"	f	class:OstreamRedirect
enum_	include/pybind11/pybind11.h	/^    enum_(const handle &scope, const char *name, const Extra &...extra)$/;"	f	class:enum_
enum_	include/pybind11/pybind11.h	/^class enum_ : public class_<Type> {$/;"	c
enum_base	include/pybind11/pybind11.h	/^    enum_base(const handle &base, const handle &parent) : m_base(base), m_parent(parent) {}$/;"	f	struct:enum_base
enum_base	include/pybind11/pybind11.h	/^struct enum_base {$/;"	s
enum_name	include/pybind11/pybind11.h	/^inline str enum_name(handle arg) {$/;"	f
equal	include/pybind11/pytypes.h	/^    bool equal(const dict_readonly &b) const { return pos == b.pos; }$/;"	f	class:handle::dict_readonly
equal	include/pybind11/pytypes.h	/^    bool equal(const sequence_fast_readonly &b) const { return ptr == b.ptr; }$/;"	f	class:handle::sequence_fast_readonly
equal	include/pybind11/pytypes.h	/^    bool equal(const sequence_slow_readwrite &b) const { return index == b.index; }$/;"	f	class:handle::sequence_slow_readwrite
equal	include/pybind11/pytypes.h	/^    bool equal(object_api const &other) const { return rich_compare(other, Py_EQ); }$/;"	f	class:object_api
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer {};$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<false, 1> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<false, 2> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<false, 4> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<false, 8> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<true, 1> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<true, 2> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<true, 4> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<true, 8> {$/;"	s
erase_all	include/pybind11/detail/typeid.h	/^inline void erase_all(std::string &string, const std::string &search) {$/;"	f
error_already_set	include/pybind11/pytypes.h	/^    error_already_set()$/;"	f	class:handle::error_fetch_and_normalize::error_already_set
error_already_set	include/pybind11/pytypes.h	/^class PYBIND11_EXPORT_EXCEPTION error_already_set : public std::exception {$/;"	c	struct:handle::error_fetch_and_normalize
error_fetch_and_normalize	include/pybind11/pytypes.h	/^    explicit error_fetch_and_normalize(const char *called) {$/;"	f	struct:handle::error_fetch_and_normalize
error_fetch_and_normalize	include/pybind11/pytypes.h	/^struct error_fetch_and_normalize {$/;"	s	class:handle
error_scope	include/pybind11/detail/common.h	/^    error_scope() { PyErr_Fetch(&type, &value, &trace); }$/;"	f	struct:error_scope
error_scope	include/pybind11/detail/common.h	/^struct error_scope {$/;"	s
error_string	include/pybind11/pytypes.h	/^inline std::string error_string() {$/;"	f	struct:handle::error_fetch_and_normalize
eval	include/pybind11/eval.h	/^object eval(const char (&s)[N], object global = globals(), object local = object()) {$/;"	f
eval	include/pybind11/eval.h	/^object eval(const str &expr, object global = globals(), object local = object()) {$/;"	f
eval_expr	include/pybind11/eval.h	/^    eval_expr,$/;"	e	enum:eval_mode
eval_file	include/pybind11/eval.h	/^object eval_file(str fname, object global = globals(), object local = object()) {$/;"	f
eval_file	include/pybind11/eval.h	/^object eval_file(str) {$/;"	f
eval_file	include/pybind11/eval.h	/^object eval_file(str, object) {$/;"	f
eval_file	include/pybind11/eval.h	/^object eval_file(str, object, object) {$/;"	f
eval_mode	include/pybind11/eval.h	/^enum eval_mode {$/;"	g
eval_single_statement	include/pybind11/eval.h	/^    eval_single_statement,$/;"	e	enum:eval_mode
eval_statements	include/pybind11/eval.h	/^    eval_statements$/;"	e	enum:eval_mode
event_loop	tests/test_async.py	/^def event_loop():$/;"	f
exactly_one	include/pybind11/detail/common.h	/^struct exactly_one {$/;"	s
exactly_one	include/pybind11/detail/common.h	/^struct exactly_one<P, Default> {$/;"	s
exception	include/pybind11/pybind11.h	/^    exception(handle scope, const char *name, handle base = PyExc_Exception) {$/;"	f	class:exception
exception	include/pybind11/pybind11.h	/^class exception : public object {$/;"	c
excitement	tests/test_tagbased_polymorphic.cpp	/^    int excitement;$/;"	m	struct:Animal::Labrador	file:
exclude_patterns	docs/conf.py	/^exclude_patterns = [".build", "release.rst"]$/;"	v
exec	include/pybind11/eval.h	/^inline void exec(const str &expr, object global = globals(), object local = object()) {$/;"	f
exec	include/pybind11/eval.h	/^void exec(const char (&s)[N], object global = globals(), object local = object()) {$/;"	f
execute	include/pybind11/detail/init.h	/^    static void execute(Class &cl, const Extra &...extra) {$/;"	f	struct:alias_constructor
execute	include/pybind11/detail/init.h	/^    static void execute(Class &cl, const Extra &...extra) {$/;"	f	struct:constructor
execute	include/pybind11/detail/init.h	/^    void execute(Class &cl, const Extra &...extra) && {$/;"	f	struct:factory
execute	include/pybind11/detail/init.h	/^    void execute(Class &cl, const Extra &...extra) && {$/;"	f	struct:pickle_factory
execute	include/pybind11/operators.h	/^    void execute(Class &cl, const Extra &...extra) const {$/;"	f	struct:op_
execute_cast	include/pybind11/operators.h	/^    void execute_cast(Class &cl, const Extra &...extra) const {$/;"	f	struct:op_
exercise_is_setter	tests/test_methods_and_attributes.cpp	/^namespace exercise_is_setter {$/;"	n	namespace:pybind11_tests	file:
exercise_trampoline	tests/test_pickling.cpp	/^namespace exercise_trampoline {$/;"	n	file:
exit	include/pybind11/iostream.h	/^    void exit() {$/;"	f	class:OstreamRedirect
exp_version_hex	setup.py	/^exp_version_hex = build_expected_version_hex(matches)$/;"	v
expected_num_args	include/pybind11/attr.h	/^constexpr bool expected_num_args(size_t nargs, bool has_args, bool has_kwargs) {$/;"	f
export_values	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void export_values() {$/;"	f	struct:enum_base
export_values	include/pybind11/pybind11.h	/^    enum_ &export_values() {$/;"	f	class:enum_
extensions	docs/conf.py	/^extensions = [$/;"	v
extent	include/pybind11/numpy.h	/^    static constexpr size_t extent = N;$/;"	m	struct:array_info
extents	include/pybind11/numpy.h	/^    static constexpr auto extents = const_name("");$/;"	m	struct:array_info_scalar
extents	include/pybind11/numpy.h	/^    static constexpr auto extents = const_name<array_info<T>::is_array>($/;"	m	struct:array_info
external	tests/test_pytypes.cpp	/^namespace external {$/;"	n	file:
f	tests/pybind11_tests.h	/^    float f;$/;"	m	union:IntFloat
f	tests/test_callbacks.py	/^    def f(*args, **kwargs):$/;"	f	function:test_keyword_args_and_generalized_unpacking
f	tests/test_virtual_functions.py	/^        def f(self):$/;"	m	class:test_alias_delay_initialization1.B
f	tests/test_virtual_functions.py	/^        def f(self):$/;"	m	class:test_alias_delay_initialization2.B2
f4	tests/test_constants_and_functions.cpp	/^int f4(int x) throw() { return x + 4; } \/\/ Deprecated equivalent to noexcept(true)$/;"	f	namespace:test_exc_sp
f_	tests/test_embed/test_interpreter.cpp	/^    std::function<void()> f_;$/;"	m	struct:scope_exit	file:
f_strides	include/pybind11/buffer_info.h	/^inline std::vector<ssize_t> f_strides(const std::vector<ssize_t> &shape, ssize_t itemsize) {$/;"	f
factory	include/pybind11/detail/init.h	/^    factory(CFunc &&c, AFunc &&a)$/;"	f	struct:factory
factory	include/pybind11/detail/init.h	/^    factory(Func &&f) : class_factory(std::forward<Func>(f)) {}$/;"	f	struct:factory
factory	include/pybind11/detail/init.h	/^struct factory<CFunc, AFunc, CReturn(CArgs...), AReturn(AArgs...)> {$/;"	s
factory	include/pybind11/detail/init.h	/^struct factory<Func, void_type (*)(), Return(Args...)> {$/;"	s
false_type	include/pybind11/detail/common.h	/^    constexpr auto operator()(Return (Class::*pmf)(Args...), std::false_type = {}) const noexcept$/;"	m	class:overload_cast_impl::std
fields	include/pybind11/numpy.h	/^    PyObject *fields;$/;"	m	struct:PyArrayDescr_Proxy
final	tests/test_embed/test_interpreter.cpp	/^class PyWidget final : public Widget {$/;"	c	file:
finalize_interpreter	include/pybind11/embed.h	/^inline void finalize_interpreter() {$/;"	f
find	include/pybind11/detail/type_caster_base.h	/^    iterator find(const type_info *find_type) {$/;"	f	struct:values_and_holders
find_registered_python_instance	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE handle find_registered_python_instance(void *src,$/;"	f
first	include/pybind11/detail/common.h	/^constexpr int first(int i) { return i; }$/;"	f
first	include/pybind11/detail/common.h	/^constexpr int first(int i, T v, Ts... vs) {$/;"	f
first_or_done	include/pybind11/pybind11.h	/^    bool first_or_done;$/;"	m	struct:iterator_state
fixed	include/pybind11/eigen/matrix.h	/^                          fixed = size != Eigen::Dynamic, \/\/ Fully-fixed size$/;"	m	struct:EigenProps
fixed_cols	include/pybind11/eigen/matrix.h	/^        fixed_rows = rows != Eigen::Dynamic, fixed_cols = cols != Eigen::Dynamic,$/;"	m	struct:EigenProps
fixed_rows	include/pybind11/eigen/matrix.h	/^        fixed_rows = rows != Eigen::Dynamic, fixed_cols = cols != Eigen::Dynamic,$/;"	m	struct:EigenProps
flag_noconvert	include/pybind11/cast.h	/^    bool flag_noconvert : 1; \/\/\/< If set, do not allow conversion (requires a supporting type$/;"	m	struct:arg
flag_none	include/pybind11/cast.h	/^    bool flag_none : 1;      \/\/\/< If set (the default), allow None to be passed to this argument$/;"	m	struct:arg
flags	include/pybind11/numpy.h	/^    char flags() const { return detail::array_descriptor_proxy(m_ptr)->flags; }$/;"	f
flags	include/pybind11/numpy.h	/^    char flags;$/;"	m	struct:PyArrayDescr_Proxy
flags	include/pybind11/numpy.h	/^    int flags;$/;"	m	struct:PyArray_Proxy
flags	include/pybind11/numpy.h	/^    int flags;$/;"	m	struct:PyVoidScalarObject_Proxy
float_	include/pybind11/pytypes.h	/^    float_(double value = .0) : object(PyFloat_FromDouble((double) value), stolen_t{}) {$/;"	f	class:handle::float_
float_	include/pybind11/pytypes.h	/^    float_(float value) : object(PyFloat_FromDouble((double) value), stolen_t{}) {$/;"	f	class:handle::float_
float_	include/pybind11/pytypes.h	/^class float_ : public object {$/;"	c	class:handle
float_	tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:PartialStruct	file:
float_	tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:SimpleStruct	file:
float_	tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:SimpleStructReordered	file:
float_	tests/test_pytypes.cpp	/^    float_() : py::object(external::detail::default_constructed(), stolen_t{}) {}$/;"	f	class:external::float_	file:
float_	tests/test_pytypes.cpp	/^class float_ : public py::object {$/;"	c	namespace:external	file:
foo	tests/test_class.py	/^        def foo(self):$/;"	m	class:test_bind_protected_functions.C
foo	tests/test_multiple_inheritance.cpp	/^    int foo() const { return i; }$/;"	f	struct:__anon10::Base1a
foo	tests/test_multiple_inheritance.py	/^        def foo(self):$/;"	m	class:test_multiple_inheritance_mix1.Base1
format	include/pybind11/buffer_info.h	/^    std::string format;           \/\/ For homogeneous buffers, this should be set to$/;"	m	struct:buffer_info
format	include/pybind11/complex.h	/^    static std::string format() { return std::string(value); }$/;"	f	struct:format_descriptor
format	include/pybind11/detail/common.h	/^    static std::string format() { return std::string(1, c); }$/;"	f	struct:format_descriptor
format	include/pybind11/pytypes.h	/^    str format(Args &&...args) const {$/;"	f	class:handle::str
format_descriptor	include/pybind11/complex.h	/^struct format_descriptor<std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>> {$/;"	s
format_descriptor	include/pybind11/detail/common.h	/^struct format_descriptor {};$/;"	s
format_descriptor	include/pybind11/detail/common.h	/^struct format_descriptor<$/;"	s
format_descriptor	include/pybind11/detail/common.h	/^struct format_descriptor<T, detail::enable_if_t<std::is_arithmetic<T>::value>> {$/;"	s
format_ptrs	tests/constructor_stats.h	/^inline const char *format_ptrs(const char *p) { return p; }$/;"	f
format_ptrs	tests/constructor_stats.h	/^py::str format_ptrs(T *p) {$/;"	f
format_str	include/pybind11/numpy.h	/^    std::string format_str;$/;"	m	struct:numpy_type_info
forward	include/pybind11/pybind11.h	/^auto method_adaptor(F &&f) -> decltype(std::forward<F>(f)) {$/;"	f
forward	include/pybind11/pytypes.h	/^auto object_or_cast(T &&o) -> decltype(std::forward<T>(o)) {$/;"	f	struct:handle::error_fetch_and_normalize
forward	tests/constructor_stats.h	/^auto format_ptrs(T &&x) -> decltype(std::forward<T>(x)) {$/;"	f
forward_like	include/pybind11/stl.h	/^constexpr forwarded_type<T, U> forward_like(U &&u) {$/;"	f
found	include/pybind11/detail/common.h	/^    static constexpr auto found = constexpr_sum(Predicate<Ts>::value...);$/;"	m	struct:exactly_one
free	include/pybind11/eigen/tensor.h	/^    static void free(Type *tensor) { delete tensor; }$/;"	f	struct:eigen_tensor_helper
free	include/pybind11/eigen/tensor.h	/^    static void free(Type *tensor) {$/;"	f	struct:eigen_tensor_helper
free_data	include/pybind11/attr.h	/^    void (*free_data)(function_record *ptr) = nullptr;$/;"	m	struct:function_record
from_buffer	include/pybind11/pytypes.h	/^    static memoryview from_buffer(T *ptr,$/;"	f	class:handle::memoryview
from_buffer	include/pybind11/pytypes.h	/^    static memoryview from_buffer(const T *ptr,$/;"	f	class:handle::memoryview
from_buffer	include/pybind11/pytypes.h	/^    static memoryview from_buffer(const void *ptr,$/;"	f	class:handle::memoryview
from_buffer	include/pybind11/pytypes.h	/^inline memoryview memoryview::from_buffer(void *ptr,$/;"	f	class:handle::memoryview
from_const	tests/test_pytypes.cpp	/^bool from_const() {$/;"	f	namespace:handle_from_move_only_type_with_operator_PyObject
from_memory	include/pybind11/pytypes.h	/^    static memoryview from_memory(const void *mem, ssize_t size) {$/;"	f	class:handle::memoryview
from_memory	include/pybind11/pytypes.h	/^    static memoryview from_memory(std::string_view mem) {$/;"	f	class:handle::memoryview
from_memory	include/pybind11/pytypes.h	/^    static memoryview from_memory(void *mem, ssize_t size, bool readonly = false) {$/;"	f	class:handle::memoryview
from_ncnst	tests/test_pytypes.cpp	/^bool from_ncnst() {$/;"	f	namespace:handle_from_move_only_type_with_operator_PyObject
frozenset	include/pybind11/pytypes.h	/^class frozenset : public anyset {$/;"	c	class:handle
func	include/pybind11/cast.h	/^    const function_record &func;$/;"	m	struct:function_call
func	tests/test_embed/test_interpreter.cpp	/^    virtual int func() { return 0; }$/;"	f	class:test_override_cache_helper
func	tests/test_embed/test_trampoline.py	/^        def func(self):$/;"	m	class:func.Test
func	tests/test_embed/test_trampoline.py	/^def func():$/;"	f
func	tests/test_pytypes.py	/^        def func(self, x, *args):$/;"	m	class:test_accessors.TestObject
func	tests/test_virtual_functions.cpp	/^    virtual int func() { return 0; }$/;"	f	class:test_override_cache_helper
func	tests/test_virtual_functions.py	/^            def func(self):$/;"	m	class:test_python_override.func.Test
func	tests/test_virtual_functions.py	/^    def func():$/;"	f	function:test_python_override
func1	tests/test_callbacks.py	/^    def func1():$/;"	f	function:test_callbacks
func1	tests/test_methods_and_attributes.cpp	/^    std::size_t func1(std::string &&s) { return s.size(); }$/;"	f	struct:RValueRefParam
func2	tests/test_callbacks.py	/^    def func2(a, b, c, d):$/;"	f	function:test_callbacks
func2	tests/test_embed/test_trampoline.py	/^def func2():$/;"	f
func2	tests/test_methods_and_attributes.cpp	/^    std::size_t func2(std::string &&s) const { return s.size(); }$/;"	f	struct:RValueRefParam
func2	tests/test_virtual_functions.py	/^    def func2():$/;"	f	function:test_python_override
func3	tests/test_callbacks.py	/^    def func3(a):$/;"	f	function:test_callbacks
func3	tests/test_methods_and_attributes.cpp	/^    std::size_t func3(std::string &&s) & { return s.size(); }$/;"	f	struct:RValueRefParam
func4	tests/test_methods_and_attributes.cpp	/^    std::size_t func4(std::string &&s) const & { return s.size(); }$/;"	f	struct:RValueRefParam
function	include/pybind11/pytypes.h	/^class function : public object {$/;"	c	class:handle
function	pybind11/setup_helpers.py	/^    def function(self) -> CCompilerMethod:$/;"	m	class:ParallelCompile
function_call	include/pybind11/attr.h	/^inline function_call::function_call(const function_record &f, handle p) : func(f), parent(p) {$/;"	f	class:function_call
function_call	include/pybind11/cast.h	/^struct function_call {$/;"	s
function_record	include/pybind11/attr.h	/^    function_record()$/;"	f	struct:function_record
function_record	include/pybind11/attr.h	/^struct function_record {$/;"	s
function_record_capsule_name	include/pybind11/detail/internals.h	/^    std::string function_record_capsule_name = internals_function_record_capsule_name;$/;"	m	struct:internals
functions	include/pybind11/numpy.h	/^    enum functions {$/;"	g	struct:npy_api
g	tests/test_multiple_inheritance.py	/^        g = 7$/;"	v	class:test_python_inherit_from_mi.PyMVF
gc	tests/constructor_stats.h	/^    static void gc() {$/;"	f	class:ConstructorStats
gc_collect	tests/conftest.py	/^def gc_collect():$/;"	f
gc_tester	tests/test_custom_type_setup.py	/^def gc_tester():$/;"	f
gen_f	tests/test_callbacks.py	/^    def gen_f():$/;"	f	function:test_async_callbacks
generate_doxygen_xml	docs/conf.py	/^def generate_doxygen_xml(app):$/;"	f
generate_dummy_code_boost	docs/benchmark.py	/^def generate_dummy_code_boost(nclasses=10):$/;"	f
generate_dummy_code_pybind11	docs/benchmark.py	/^def generate_dummy_code_pybind11(nclasses=10):$/;"	f
generic_item	include/pybind11/pytypes.h	/^struct generic_item {$/;"	s	struct:handle::error_fetch_and_normalize
generic_iterator	include/pybind11/pytypes.h	/^    generic_iterator(handle seq, ssize_t index) : Policy(seq, index) {}$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
generic_iterator	include/pybind11/pytypes.h	/^class generic_iterator : public Policy {$/;"	c	struct:handle::error_fetch_and_normalize
generic_type	include/pybind11/pybind11.h	/^class generic_type : public object {$/;"	c
get	include/pybind11/detail/init.h	/^    remove_reference_t<Get> get;$/;"	m	struct:pickle_factory
get	include/pybind11/detail/type_caster_base.h	/^    static const void *get(const itype *src, const std::type_info *&) { return src; }$/;"	f	struct:polymorphic_type_hook_base
get	include/pybind11/detail/type_caster_base.h	/^    static const void *get(const itype *src, const std::type_info *&type) {$/;"	f	struct:polymorphic_type_hook_base
get	include/pybind11/numpy.h	/^    static npy_api &get() {$/;"	f	struct:npy_api
get	include/pybind11/pytypes.h	/^    static object get(handle obj, const IdxType &index) {$/;"	f	struct:handle::error_fetch_and_normalize::list_item
get	include/pybind11/pytypes.h	/^    static object get(handle obj, const IdxType &index) {$/;"	f	struct:handle::error_fetch_and_normalize::sequence_item
get	include/pybind11/pytypes.h	/^    static object get(handle obj, const IdxType &index) {$/;"	f	struct:handle::error_fetch_and_normalize::tuple_item
get	include/pybind11/pytypes.h	/^    static object get(handle obj, const char *key) { return getattr(obj, key); }$/;"	f	struct:handle::error_fetch_and_normalize::str_attr
get	include/pybind11/pytypes.h	/^    static object get(handle obj, handle key) { return getattr(obj, key); }$/;"	f	struct:handle::error_fetch_and_normalize::obj_attr
get	include/pybind11/pytypes.h	/^    static object get(handle obj, handle key) {$/;"	f	struct:handle::error_fetch_and_normalize::generic_item
get	tests/constructor_stats.h	/^    static ConstructorStats &get() {$/;"	f	class:ConstructorStats
get	tests/constructor_stats.h	/^    static ConstructorStats &get(py::object class_) {$/;"	f	class:ConstructorStats
get	tests/constructor_stats.h	/^    static ConstructorStats &get(std::type_index type) {$/;"	f	class:ConstructorStats
get	tests/test_factory_constructors.cpp	/^    virtual int get() { return value; }$/;"	f	class:TestFactory6
get	tests/test_factory_constructors.cpp	/^    virtual int get() { return value; }$/;"	f	class:TestFactory7
get	tests/test_factory_constructors.py	/^        def get(self):$/;"	m	class:test_init_factory_alias.MyTest
get	tests/test_factory_constructors.py	/^        def get(self):$/;"	m	class:test_init_factory_dual.PythFactory7
get	tests/test_methods_and_attributes.cpp	/^    int get() const { return value; }$/;"	f	struct:TestProperties
get	tests/test_sequences_and_iterators.cpp	/^    int get() const { return value_; }$/;"	f	class:NonCopyableInt
get	tests/test_smart_ptr.cpp	/^    T *get() const { return impl.get(); }$/;"	f	class:__anon9::custom_unique_ptr
get	tests/test_smart_ptr.cpp	/^    T *get() const { return impl.get(); }$/;"	f	class:__anon9::shared_ptr_with_addressof_operator
get	tests/test_smart_ptr.cpp	/^    T *get() const { return impl.get(); }$/;"	f	class:__anon9::unique_ptr_with_addressof_operator
get	tests/test_smart_ptr.cpp	/^    T *get() { return ptr.get(); }$/;"	f	class:__anon9::huge_unique_ptr
get	tests/test_tagbased_polymorphic.cpp	/^    static const void *get(const itype *src, const std::type_info *&type) {$/;"	f	struct:Animal::PYBIND11_NAMESPACE::polymorphic_type_hook
get1	tests/test_methods_and_attributes.cpp	/^    const UserType &get1() const { return v1; }$/;"	f	struct:TestPropRVP
get2	tests/test_methods_and_attributes.cpp	/^    const UserType &get2() const { return v2; }$/;"	f	struct:TestPropRVP
getRefCount	tests/object.h	/^    int getRefCount() const { return m_refCount; };$/;"	f	class:Object
get_and_replace	setup.py	/^def get_and_replace($/;"	f
get_array_data_for_type	include/pybind11/eigen/tensor.h	/^StoragePointerType get_array_data_for_type(array &arr) {$/;"	f
get_await_result	tests/test_async.py	/^async def get_await_result(x):$/;"	f
get_buffer	include/pybind11/detail/internals.h	/^    buffer_info *(*get_buffer)(PyObject *, void *) = nullptr;$/;"	m	struct:type_info
get_buffer_data	include/pybind11/detail/internals.h	/^    void *get_buffer_data = nullptr;$/;"	m	struct:type_info
get_cache	include/pybind11/pytypes.h	/^    object &get_cache() const {$/;"	f	class:handle::error_fetch_and_normalize::accessor
get_cm	tests/test_eigen_matrix.cpp	/^Eigen::MatrixXd &get_cm() {$/;"	f
get_cmake_dir	pybind11/commands.py	/^def get_cmake_dir() -> str:$/;"	f
get_concrete_dtype_checks	tests/test_numpy_array.cpp	/^std::vector<DtypeCheck> get_concrete_dtype_checks() {$/;"	f
get_double	tests/test_methods_and_attributes.cpp	/^    double get_double() const { return ro_value; }$/;"	f	class:UnregisteredBase
get_dtype_check	tests/test_numpy_array.cpp	/^DtypeCheck get_dtype_check(const char *name) {$/;"	f
get_dtype_size_check	tests/test_numpy_array.cpp	/^DtypeSizeCheck get_dtype_size_check() {$/;"	f
get_duration	include/pybind11/chrono.h	/^    get_duration(const std::chrono::duration<rep, period> &src) {$/;"	f	class:duration_caster
get_duration	include/pybind11/chrono.h	/^    get_duration(const std::chrono::time_point<Clock, std::chrono::duration<rep, period>> &src) {$/;"	f	class:duration_caster
get_elem	tests/test_eigen_matrix.cpp	/^double get_elem(const Eigen::Ref<const Eigen::MatrixXd> &m) { return m(2, 1); };$/;"	f
get_exception_object	include/pybind11/pybind11.h	/^exception<CppException> &get_exception_object() {$/;"	f
get_fully_qualified_tp_name	include/pybind11/detail/class.h	/^inline std::string get_fully_qualified_tp_name(PyTypeObject *type) {$/;"	f
get_function	include/pybind11/pytypes.h	/^inline handle get_function(handle value) {$/;"	f	struct:handle::error_fetch_and_normalize
get_function_record	include/pybind11/pybind11.h	/^    static detail::function_record *get_function_record(handle h) {$/;"	f	class:class_
get_function_record_capsule_name	include/pybind11/detail/internals.h	/^inline const char *get_function_record_capsule_name() {$/;"	f
get_g_g	tests/test_multiple_inheritance.py	/^        def get_g_g(self):$/;"	m	class:test_python_inherit_from_mi.PyMVF
get_global_type_info	include/pybind11/detail/type_caster_base.h	/^inline detail::type_info *get_global_type_info(const std::type_index &tp) {$/;"	f
get_include	pybind11/commands.py	/^def get_include(user: bool = False) -> str:  # noqa: ARG001$/;"	f
get_int	tests/test_methods_and_attributes.cpp	/^    int get_int() const { return rw_value; }$/;"	f	class:UnregisteredBase
get_internals	include/pybind11/detail/internals.h	/^PYBIND11_NOINLINE internals &get_internals() {$/;"	f
get_internals_obj_from_state_dict	include/pybind11/detail/internals.h	/^inline object get_internals_obj_from_state_dict(handle state_dict) {$/;"	f
get_internals_pp	include/pybind11/detail/internals.h	/^inline internals **&get_internals_pp() {$/;"	f
get_internals_pp_from_capsule	include/pybind11/detail/internals.h	/^inline internals **get_internals_pp_from_capsule(handle obj) {$/;"	f
get_local_internals	include/pybind11/detail/internals.h	/^inline local_internals &get_local_internals() {$/;"	f
get_local_type_info	include/pybind11/detail/type_caster_base.h	/^inline detail::type_info *get_local_type_info(const std::type_index &tp) {$/;"	f
get_movable	tests/test_virtual_functions.py	/^        def get_movable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt
get_movable	tests/test_virtual_functions.py	/^        def get_movable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt2
get_msg	tests/test_class.cpp	/^std::string get_msg(const T &) {$/;"	f	namespace:test_class::pr4220_tripped_over_this
get_name_in_error_scope	include/pybind11/pytypes.h	/^    static const char *get_name_in_error_scope(PyObject *o) {$/;"	f	class:handle::capsule
get_noncopyable	tests/test_virtual_functions.cpp	/^    virtual NonCopyable get_noncopyable(int a, int b) { return NonCopyable(a, b); }$/;"	f	class:NCVirt
get_noncopyable	tests/test_virtual_functions.py	/^        def get_noncopyable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt
get_noncopyable	tests/test_virtual_functions.py	/^        def get_noncopyable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt2
get_numpy_internals	include/pybind11/numpy.h	/^inline numpy_internals &get_numpy_internals() {$/;"	f
get_object_handle	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE handle get_object_handle(const void *ptr, const detail::type_info *type) {$/;"	f
get_one	tests/test_copy_move.cpp	/^    static const derived &get_one() { return instance_; }$/;"	f	struct:empty
get_or_create_shared_data	include/pybind11/detail/internals.h	/^T &get_or_create_shared_data(const std::string &name) {$/;"	f
get_overload	include/pybind11/pybind11.h	/^inline function get_overload(const T *this_ptr, const char *name) {$/;"	f
get_override	include/pybind11/pybind11.h	/^function get_override(const T *this_ptr, const char *name) {$/;"	f
get_pkgconfig_dir	pybind11/commands.py	/^def get_pkgconfig_dir() -> str:$/;"	f
get_platform_dtype_size_checks	tests/test_numpy_array.cpp	/^std::vector<DtypeSizeCheck> get_platform_dtype_size_checks() {$/;"	f
get_pointer	include/pybind11/pytypes.h	/^    T *get_pointer() const {$/;"	f	class:handle::capsule
get_ptr	tests/object.h	/^    T *get_ptr() { return m_ptr; }$/;"	f	class:ref
get_ptr	tests/object.h	/^    const T *get_ptr() const { return m_ptr; }$/;"	f	class:ref
get_python_state_dict	include/pybind11/detail/internals.h	/^inline object get_python_state_dict() {$/;"	f
get_rm	tests/test_eigen_matrix.cpp	/^MatrixXdR &get_rm() {$/;"	f
get_rvalue	tests/test_methods_and_attributes.cpp	/^    UserType get_rvalue() const { return v2; }$/;"	f	struct:TestPropRVP
get_shape	include/pybind11/eigen/tensor.h	/^    get_shape(const Type & \/*f*\/) {$/;"	f	struct:eigen_tensor_helper
get_shape	include/pybind11/eigen/tensor.h	/^    static Eigen::DSizes<typename Type::Index, Type::NumIndices> get_shape(const Type &f) {$/;"	f	struct:eigen_tensor_helper
get_shape	include/pybind11/eigen/tensor.h	/^    static constexpr Eigen::DSizes<typename Type::Index, Type::NumIndices> get_shape() {$/;"	f	struct:eigen_tensor_helper
get_shape_for_array	include/pybind11/eigen/tensor.h	/^Eigen::DSizes<T, size> get_shape_for_array(const array &arr) {$/;"	f
get_shared_data	include/pybind11/detail/internals.h	/^PYBIND11_NOINLINE void *get_shared_data(const std::string &name) {$/;"	f
get_stack_pp	include/pybind11/detail/type_caster_base.h	/^    static loader_life_support **get_stack_pp() {$/;"	f	class:loader_life_support
get_stack_tls_key	include/pybind11/detail/type_caster_base.h	/^    static PYBIND11_TLS_KEY_REF get_stack_tls_key() {$/;"	f	class:loader_life_support
get_stack_top	include/pybind11/detail/type_caster_base.h	/^    static loader_life_support *get_stack_top() { return *get_stack_pp(); }$/;"	f	class:loader_life_support
get_stack_top	include/pybind11/detail/type_caster_base.h	/^    static loader_life_support *get_stack_top() {$/;"	f	class:loader_life_support
get_storage_pointer_type	include/pybind11/eigen/tensor.h	/^struct get_storage_pointer_type<MapType, void_t<typename MapType::PointerArgType>> {$/;"	s
get_storage_pointer_type	include/pybind11/eigen/tensor.h	/^struct get_storage_pointer_type<MapType, void_t<typename MapType::StoragePointerType>> {$/;"	s
get_string1	tests/test_virtual_functions.cpp	/^    virtual const std::string &get_string1() { return str1; }$/;"	f	class:ExampleVirt
get_string1	tests/test_virtual_functions.py	/^        def get_string1(self):$/;"	m	class:test_override.ExtendedExampleVirt
get_string2	tests/test_virtual_functions.cpp	/^    virtual const std::string *get_string2() { return &str2; }$/;"	f	class:ExampleVirt
get_string2	tests/test_virtual_functions.py	/^        def get_string2(self):$/;"	m	class:test_override.ExtendedExampleVirt2
get_sys_path_size	tests/test_embed/test_interpreter.cpp	/^size_t get_sys_path_size() {$/;"	f
get_tensor_descriptor	include/pybind11/eigen/tensor.h	/^struct get_tensor_descriptor {$/;"	s
get_thread_state_unchecked	include/pybind11/detail/type_caster_base.h	/^inline PyThreadState *get_thread_state_unchecked() {$/;"	f
get_type	include/pybind11/pytypes.h	/^handle object_api<D>::get_type() const {$/;"	f	class:handle::object_api
get_type_handle	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE handle get_type_handle(const std::type_info &tp, bool throw_if_missing) {$/;"	f
get_type_info	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE detail::type_info *get_type_info(PyTypeObject *type) {$/;"	f
get_type_info	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE detail::type_info *get_type_info(const std::type_index &tp,$/;"	f
get_type_info	include/pybind11/numpy.h	/^    numpy_type_info *get_type_info(bool throw_if_missing = true) {$/;"	f	struct:numpy_internals
get_type_info	include/pybind11/numpy.h	/^    numpy_type_info *get_type_info(const std::type_info &tinfo, bool throw_if_missing = true) {$/;"	f	struct:numpy_internals
get_type_overload	include/pybind11/pybind11.h	/^get_type_overload(const void *this_ptr, const detail::type_info *this_type, const char *name) {$/;"	f
get_type_override	include/pybind11/pybind11.h	/^get_type_override(const void *this_ptr, const type_info *this_type, const char *name) {$/;"	f
get_value	tests/test_pytypes.cpp	/^    double get_value() const { return PyFloat_AsDouble(this->ptr()); }$/;"	f	class:external::float_	file:
get_value	tests/test_virtual_functions.cpp	/^    std::string get_value() const { return std::to_string(value); }$/;"	f	class:Movable
get_value	tests/test_virtual_functions.cpp	/^    std::string get_value() const {$/;"	f	class:NonCopyable
get_value_and_holder	include/pybind11/detail/type_caster_base.h	/^instance::get_value_and_holder(const type_info *find_type \/*= nullptr default in common.h*\/,$/;"	f	class:instance
getattr	include/pybind11/pytypes.h	/^inline object getattr(handle obj, const char *name) {$/;"	f	struct:handle::error_fetch_and_normalize
getattr	include/pybind11/pytypes.h	/^inline object getattr(handle obj, const char *name, handle default_) {$/;"	f	struct:handle::error_fetch_and_normalize
getattr	include/pybind11/pytypes.h	/^inline object getattr(handle obj, handle name) {$/;"	f	struct:handle::error_fetch_and_normalize
getattr	include/pybind11/pytypes.h	/^inline object getattr(handle obj, handle name, handle default_) {$/;"	f	struct:handle::error_fetch_and_normalize
gil_acquire	tests/cross_module_gil_utils.cpp	/^void gil_acquire() { py::gil_scoped_acquire gil; }$/;"	f	namespace:__anon3
gil_acquire_inner	tests/cross_module_gil_utils.cpp	/^void gil_acquire_inner() {$/;"	f	namespace:__anon3
gil_acquire_nested	tests/cross_module_gil_utils.cpp	/^void gil_acquire_nested() {$/;"	f	namespace:__anon3
gil_multi_acquire_release	tests/cross_module_gil_utils.cpp	/^std::string gil_multi_acquire_release(unsigned bits) {$/;"	f	namespace:__anon3
gil_scoped_acquire	include/pybind11/gil.h	/^    PYBIND11_NOINLINE gil_scoped_acquire() {$/;"	f	class:gil_scoped_acquire
gil_scoped_acquire	include/pybind11/gil.h	/^class gil_scoped_acquire {$/;"	c
gil_scoped_release	include/pybind11/gil.h	/^    explicit gil_scoped_release(bool disassoc = false) : disassoc(disassoc) {$/;"	f	class:gil_scoped_release
gil_scoped_release	include/pybind11/gil.h	/^class gil_scoped_release {$/;"	c
global_sdist	setup.py	/^global_sdist = os.environ.get("PYBIND11_GLOBAL_SDIST", False)$/;"	v
global_state	include/pybind11/options.h	/^    static state &global_state() {$/;"	f	class:options
globals	include/pybind11/pybind11.h	/^inline dict globals() {$/;"	f
gstate	tests/cross_module_gil_utils.cpp	/^    PyGILState_STATE gstate;$/;"	m	struct:__anon3::CustomAutoGIL	file:
handle	include/pybind11/pytypes.h	/^    handle(T &obj) : m_ptr(obj) {}$/;"	f	class:handle
handle	include/pybind11/pytypes.h	/^    handle(T ptr) : m_ptr(ptr) {}$/;"	f	class:handle
handle	include/pybind11/pytypes.h	/^    object(object &&other) noexcept : handle(other) { other.m_ptr = nullptr; }$/;"	f	class:handle::object
handle	include/pybind11/pytypes.h	/^class handle : public detail::object_api<handle> {$/;"	c
handle	include/pybind11/pytypes.h	/^inline bool isinstance<handle>(handle) = delete;$/;"	m	struct:handle::error_fetch_and_normalize
handle_from_move_only_type_with_operator_PyObject	tests/test_pytypes.cpp	/^namespace handle_from_move_only_type_with_operator_PyObject {$/;"	n	file:
handle_nested_exception	include/pybind11/detail/internals.h	/^bool handle_nested_exception(const T &exc, const std::exception_ptr &p) {$/;"	f
handle_of	include/pybind11/cast.h	/^handle type::handle_of() {$/;"	f	class:type
handle_of	include/pybind11/pytypes.h	/^    static handle handle_of(handle h) { return handle((PyObject *) Py_TYPE(h.ptr())); }$/;"	f	class:handle::type
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<args> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<bool_> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<bytes> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<float_> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<int_> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<iterable> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<iterator> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<kwargs> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<none> {$/;"	s
handle_type_name	include/pybind11/numpy.h	/^struct handle_type_name<array> {$/;"	s
has_alias	include/pybind11/pybind11.h	/^    constexpr static bool has_alias = !std::is_void<type_alias>::value;$/;"	m	class:class_
has_alias	tests/test_factory_constructors.cpp	/^    bool has_alias() const { return alias; }$/;"	f	class:TestFactory6
has_alias	tests/test_factory_constructors.cpp	/^    bool has_alias() const { return alias; }$/;"	f	class:TestFactory7
has_args	include/pybind11/attr.h	/^    bool has_args : 1;$/;"	m	struct:function_record
has_fields	include/pybind11/numpy.h	/^    bool has_fields() const { return detail::array_descriptor_proxy(m_ptr)->names != nullptr; }$/;"	f
has_flag	pybind11/setup_helpers.py	/^def has_flag(compiler: Any, flag: str) -> bool:$/;"	f
has_kwargs	include/pybind11/attr.h	/^    bool has_kwargs : 1;$/;"	m	struct:function_record
has_kwargs	include/pybind11/cast.h	/^    static constexpr bool has_kwargs = kwargs_pos != -1;$/;"	m	class:argument_loader
has_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_mapped_type = false;$/;"	m	struct:container_mapped_type_traits
has_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_mapped_type = true;$/;"	m	struct:container_mapped_type_traits
has_operator_delete	include/pybind11/pybind11.h	/^struct has_operator_delete : std::false_type {};$/;"	s
has_operator_delete	include/pybind11/pybind11.h	/^struct has_operator_delete<T, void_t<decltype(static_cast<void (*)(void *)>(T::operator delete))>>$/;"	s
has_operator_delete_size	include/pybind11/pybind11.h	/^struct has_operator_delete_size : std::false_type {};$/;"	s
has_operator_delete_size	include/pybind11/pybind11.h	/^struct has_operator_delete_size<$/;"	s
has_patients	include/pybind11/detail/common.h	/^    bool has_patients : 1;$/;"	m	struct:instance
has_pybind11_internals_static	tests/test_embed/test_interpreter.cpp	/^bool has_pybind11_internals_static() {$/;"	f
has_recursive_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_mapped_type = false;$/;"	m	struct:container_mapped_type_traits
has_recursive_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_mapped_type = true;$/;"	m	struct:container_mapped_type_traits
has_recursive_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_value_type = false;$/;"	m	struct:container_value_type_traits
has_recursive_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_value_type = true;$/;"	m	struct:container_value_type_traits
has_state_dict_internals_obj	tests/test_embed/test_interpreter.cpp	/^bool has_state_dict_internals_obj() {$/;"	f
has_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_value_type = false;$/;"	m	struct:container_value_type_traits
has_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_value_type = true;$/;"	m	struct:container_value_type_traits
hasattr	include/pybind11/pytypes.h	/^inline bool hasattr(handle obj, const char *name) {$/;"	f	struct:handle::error_fetch_and_normalize
hasattr	include/pybind11/pytypes.h	/^inline bool hasattr(handle obj, handle name) {$/;"	f	struct:handle::error_fetch_and_normalize
hash	include/pybind11/pytypes.h	/^inline ssize_t hash(handle obj) {$/;"	f	struct:handle::error_fetch_and_normalize
hash	tests/test_operator_overloading.cpp	/^struct hash<HashMe> {$/;"	s	namespace:std	file:
hash	tests/test_operator_overloading.cpp	/^struct hash<Vector2> {$/;"	s	namespace:std	file:
hash	tests/test_stl.cpp	/^struct hash<TplCtorClass> {$/;"	s	namespace:std	file:
headers	tests/extra_python_package/test_files.py	/^headers = main_headers | detail_headers | eigen_headers | stl_headers$/;"	v
helper	include/pybind11/eigen/tensor.h	/^    struct helper {};$/;"	s	struct:eigen_tensor_helper
helper	include/pybind11/eigen/tensor.h	/^    struct helper<index_sequence<Is...>> {$/;"	s	struct:eigen_tensor_helper
highlight_language	docs/conf.py	/^highlight_language = "cpp"$/;"	v
holder	include/pybind11/cast.h	/^    holder_type holder;$/;"	m	struct:copyable_holder_caster
holder	include/pybind11/detail/type_caster_base.h	/^    H &holder() const {$/;"	f	struct:value_and_holder
holder_constructed	include/pybind11/detail/type_caster_base.h	/^    bool holder_constructed() const {$/;"	f	struct:value_and_holder
holder_helper	include/pybind11/cast.h	/^struct holder_helper {$/;"	s
holder_size	include/pybind11/attr.h	/^    size_t holder_size = 0;$/;"	m	struct:type_record
holder_size_in_ptrs	include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info
hook	tests/test_exceptions.py	/^        def hook(unraisable_hook_args):$/;"	f	function:test_python_alreadyset_in_destructor
html_css_files	docs/conf.py	/^html_css_files = [$/;"	v
html_static_path	docs/conf.py	/^html_static_path = ["_static"]$/;"	v
html_theme	docs/conf.py	/^html_theme = "furo"$/;"	v
htmlhelp_basename	docs/conf.py	/^htmlhelp_basename = "pybind11doc"$/;"	v
huge_unique_ptr	tests/test_smart_ptr.cpp	/^    explicit huge_unique_ptr(T *p) : ptr(p) {}$/;"	f	class:__anon9::huge_unique_ptr
huge_unique_ptr	tests/test_smart_ptr.cpp	/^class huge_unique_ptr {$/;"	c	namespace:__anon9	file:
i	tests/local_bindings.h	/^    int i = -1;$/;"	m	class:LocalBase
i	tests/local_bindings.h	/^    int i;$/;"	m	struct:MixGL
i	tests/local_bindings.h	/^    int i;$/;"	m	struct:MixGL2
i	tests/pybind11_tests.h	/^    int i = -1;$/;"	m	class:UserType
i	tests/pybind11_tests.h	/^    int i;$/;"	m	union:IntFloat
i	tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:__anon10::Base1a	file:
i	tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:__anon10::Base2a	file:
i	tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:__anon10::BaseN	file:
ignoreOldStyleInitWarnings	tests/pybind11_tests.h	/^void ignoreOldStyleInitWarnings(F &&body) {$/;"	f
ignore_pytest_unraisable_warning	tests/test_exceptions.py	/^def ignore_pytest_unraisable_warning(f):$/;"	f
impl	include/pybind11/attr.h	/^    handle (*impl)(function_call &) = nullptr;$/;"	m	struct:function_record
impl	tests/test_smart_ptr.cpp	/^    std::shared_ptr<T> impl;$/;"	m	class:__anon9::shared_ptr_with_addressof_operator	file:
impl	tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> impl;$/;"	m	class:__anon9::custom_unique_ptr	file:
impl	tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> impl;$/;"	m	class:__anon9::unique_ptr_with_addressof_operator	file:
impl_recursive_container_traits	include/pybind11/detail/type_caster_base.h	/^struct impl_recursive_container_traits {$/;"	s
impl_recursive_container_traits	include/pybind11/detail/type_caster_base.h	/^struct impl_recursive_container_traits<$/;"	s
impl_type_to_check_recursively	include/pybind11/detail/type_caster_base.h	/^struct impl_type_to_check_recursively {$/;"	s
impl_type_to_check_recursively	include/pybind11/detail/type_caster_base.h	/^struct impl_type_to_check_recursively<std::pair<A, B>, \/* is_this_a_map = *\/ true> {$/;"	s
implicit_cast	include/pybind11/cast.h	/^    type implicit_cast(index_sequence<Is...>) & {$/;"	f	class:tuple_caster
implicit_cast	include/pybind11/cast.h	/^    type implicit_cast(index_sequence<Is...>) && {$/;"	f	class:tuple_caster
implicit_casts	include/pybind11/detail/internals.h	/^    std::vector<std::pair<const std::type_info *, void *(*) (void *)>> implicit_casts;$/;"	m	struct:type_info
implicit_conversion_from_0_to_handle	tests/test_pytypes.cpp	/^namespace implicit_conversion_from_0_to_handle {$/;"	n	file:
implicit_conversions	include/pybind11/detail/internals.h	/^    std::vector<PyObject *(*) (PyObject *, PyTypeObject *)> implicit_conversions;$/;"	m	struct:type_info
implicitly_convertible	include/pybind11/pybind11.h	/^void implicitly_convertible() {$/;"	f
import	include/pybind11/pybind11.h	/^    static module_ import(const char *name) {$/;"	f	class:module_
inactive_override_cache	include/pybind11/detail/internals.h	/^        inactive_override_cache;$/;"	m	struct:internals
incRef	tests/object.h	/^    void incRef() const { ++m_refCount; }$/;"	f	class:Object
inc_ref	include/pybind11/gil.h	/^    void inc_ref() { ++tstate->gilstate_counter; }$/;"	f	class:gil_scoped_acquire
inc_ref	include/pybind11/pytypes.h	/^    const handle &inc_ref() const & {$/;"	f	class:handle
increase_value	tests/test_methods_and_attributes.cpp	/^    void increase_value() {$/;"	f	class:UnregisteredBase
increment	include/pybind11/pytypes.h	/^    void increment() { ++index; }$/;"	f	class:handle::sequence_slow_readwrite
increment	include/pybind11/pytypes.h	/^    void increment() { ++ptr; }$/;"	f	class:handle::sequence_fast_readonly
increment	include/pybind11/pytypes.h	/^    void increment() {$/;"	f	class:handle::dict_readonly
index	include/pybind11/complex.h	/^    static constexpr int index = is_fmt_numeric<T>::index + 3;$/;"	m	struct:is_fmt_numeric
index	include/pybind11/detail/common.h	/^    static constexpr auto index = found ? constexpr_first<Predicate, Ts...>() : 0;$/;"	m	struct:exactly_one
index	include/pybind11/detail/common.h	/^    static constexpr int index$/;"	m	struct:is_fmt_numeric
index	include/pybind11/detail/type_caster_base.h	/^    size_t index = 0u;$/;"	m	struct:value_and_holder
index	include/pybind11/pytypes.h	/^    ssize_t index;$/;"	m	class:handle::sequence_slow_readwrite
index_at	tests/test_numpy_array.cpp	/^py::ssize_t index_at(const arr &a, Ix... idx) {$/;"	f
index_at_t	tests/test_numpy_array.cpp	/^py::ssize_t index_at_t(const arr_t &a, Ix... idx) {$/;"	f
index_to_object	include/pybind11/pytypes.h	/^    static object index_to_object(T index) {$/;"	f	class:handle::slice
indices	tests/test_eigen_tensor.py	/^indices = (2, 3, 1)$/;"	v
init	include/pybind11/attr.h	/^    static void init(const Args &...args, function_record *r) {$/;"	f	struct:process_attributes
init	include/pybind11/attr.h	/^    static void init(const Args &...args, type_record *r) {$/;"	f	struct:process_attributes
init	include/pybind11/attr.h	/^    static void init(const T &, function_record *) {}$/;"	f	struct:process_attribute_default
init	include/pybind11/attr.h	/^    static void init(const T &, type_record *) {}$/;"	f	struct:process_attribute_default
init	include/pybind11/attr.h	/^    static void init(const arg &a, function_record *r) {$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const arg_v &a, function_record *r) {$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const base<T> &, type_record *r) { r->add_base(typeid(T), nullptr); }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const buffer_protocol &, type_record *r) { r->buffer_protocol = true; }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const char *d, function_record *r) { r->doc = const_cast<char *>(d); }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const char *d, type_record *r) { r->doc = d; }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const custom_type_setup &value, type_record *r) {$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const doc &n, function_record *r) { r->doc = const_cast<char *>(n.value); }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const dynamic_attr &, type_record *r) { r->dynamic_attr = true; }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const handle &h, type_record *r) { r->bases.append(h); }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const is_final &, type_record *r) { r->is_final = true; }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const is_method &s, function_record *r) {$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const is_new_style_constructor &, function_record *r) {$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const is_operator &, function_record *r) { r->is_operator = true; }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const is_setter &, function_record *r) { r->is_setter = true; }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const kw_only &, function_record *r) {$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const metaclass &m, type_record *r) { r->metaclass = m.value; }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const module_local &l, type_record *r) { r->module_local = l.value; }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const multiple_inheritance &, type_record *r) {$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const name &n, function_record *r) { r->name = const_cast<char *>(n.value); }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const pos_only &, function_record *r) {$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const prepend &, function_record *r) { r->prepend = true; }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const return_value_policy &p, function_record *r) { r->policy = p; }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const scope &s, function_record *r) { r->scope = s.value; }$/;"	f	struct:process_attribute
init	include/pybind11/attr.h	/^    static void init(const sibling &s, function_record *r) { r->sibling = s.value; }$/;"	f	struct:process_attribute
init	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void init(bool is_arithmetic, bool is_convertible) {$/;"	f	struct:enum_base
init	include/pybind11/pybind11.h	/^Ret init(CFunc &&c, AFunc &&a) {$/;"	f
init	include/pybind11/pybind11.h	/^Ret init(Func &&f) {$/;"	f
init	include/pybind11/pybind11.h	/^detail::initimpl::constructor<Args...> init() {$/;"	f
init_alias	include/pybind11/pybind11.h	/^detail::initimpl::alias_constructor<Args...> init_alias() {$/;"	f
init_holder	include/pybind11/pybind11.h	/^    static void init_holder(detail::instance *inst,$/;"	f	class:class_
init_holder_from_existing	include/pybind11/pybind11.h	/^    static void init_holder_from_existing(const detail::value_and_holder &v_h,$/;"	f	class:class_
init_instance	include/pybind11/attr.h	/^    void (*init_instance)(instance *, const void *) = nullptr;$/;"	m	struct:type_record
init_instance	include/pybind11/detail/internals.h	/^    void (*init_instance)(instance *, const void *);$/;"	m	struct:type_info
init_instance	include/pybind11/pybind11.h	/^    static void init_instance(detail::instance *inst, const void *holder_ptr) {$/;"	f	class:class_
init_self	include/pybind11/cast.h	/^    handle init_self;$/;"	m	struct:function_call
initialize	include/pybind11/pybind11.h	/^    void initialize(Func &&f, Return (*)(Args...), const Extra &...extra) {$/;"	f	class:cpp_function
initialize	include/pybind11/pybind11.h	/^    void initialize(const type_record &rec) {$/;"	f	class:generic_type
initialize_generic	include/pybind11/pybind11.h	/^    void initialize_generic(unique_function_record &&unique_rec,$/;"	f	class:cpp_function
initialize_inherited_virtuals	tests/test_virtual_functions.cpp	/^void initialize_inherited_virtuals(py::module_ &m) {$/;"	f
initialize_interpreter	include/pybind11/embed.h	/^inline void initialize_interpreter(PyConfig *config,$/;"	f
initialize_interpreter	include/pybind11/embed.h	/^inline void initialize_interpreter(bool init_signal_handlers = true,$/;"	f
initialize_interpreter_pre_pyconfig	include/pybind11/embed.h	/^inline void initialize_interpreter_pre_pyconfig(bool init_signal_handlers,$/;"	f
initialize_with_void_ptr_destructor	include/pybind11/pytypes.h	/^    void initialize_with_void_ptr_destructor(const void *value,$/;"	f	class:handle::capsule
initializers	tests/pybind11_tests.cpp	/^std::list<std::function<void(py::module_ &)>> &initializers() {$/;"	f
inner_stride	include/pybind11/eigen/matrix.h	/^    static constexpr EigenIndex inner_stride$/;"	m	struct:EigenProps
insert	include/pybind11/pytypes.h	/^    void insert(const IdxType &index, ValType &&val) \/* py-non-const *\/ {$/;"	f	class:handle::list
inst	include/pybind11/detail/type_caster_base.h	/^        instance *inst = nullptr;$/;"	m	struct:values_and_holders::iterator
inst	include/pybind11/detail/type_caster_base.h	/^    instance *inst = nullptr;$/;"	m	struct:value_and_holder
inst	include/pybind11/detail/type_caster_base.h	/^    instance *inst;$/;"	m	struct:values_and_holders
install	pybind11/setup_helpers.py	/^    def install(self: S) -> S:$/;"	m	class:ParallelCompile
instance	include/pybind11/detail/common.h	/^struct instance {$/;"	s
instance_	tests/test_copy_move.cpp	/^    static derived instance_;$/;"	m	struct:empty	file:
instance_	tests/test_copy_move.cpp	/^lacking_copy_ctor empty<lacking_copy_ctor>::instance_ = {};$/;"	m	class:empty	file:
instance_	tests/test_copy_move.cpp	/^lacking_move_ctor empty<lacking_move_ctor>::instance_ = {};$/;"	m	class:empty	file:
instance_base	include/pybind11/detail/internals.h	/^    PyObject *instance_base;$/;"	m	struct:internals
instance_registered	include/pybind11/detail/type_caster_base.h	/^    bool instance_registered() const {$/;"	f	struct:value_and_holder
instance_simple_holder_in_ptrs	include/pybind11/detail/common.h	/^constexpr size_t instance_simple_holder_in_ptrs() {$/;"	f
int_	include/pybind11/pytypes.h	/^    int_() : object(PyLong_FromLong(0), stolen_t{}) {}$/;"	f	class:handle::int_
int_	include/pybind11/pytypes.h	/^    int_(T value) {$/;"	f	class:handle::int_
int_	include/pybind11/pytypes.h	/^class int_ : public object {$/;"	c	class:handle
int_to_str	include/pybind11/detail/descr.h	/^struct int_to_str : int_to_str<Rem \/ 10, Rem % 10, Digits...> {};$/;"	s
int_to_str	include/pybind11/detail/descr.h	/^struct int_to_str<0, Digits...> {$/;"	s
int_value	tests/test_methods_and_attributes.cpp	/^    int int_value() const { return int_value_; }$/;"	f	struct:pybind11_tests::exercise_is_setter::FieldBase
int_value_	tests/test_methods_and_attributes.cpp	/^    int int_value_ = -99;$/;"	m	struct:pybind11_tests::exercise_is_setter::FieldBase	file:
interleaved_error_already_set	tests/cross_module_interleaved_error_already_set.cpp	/^void interleaved_error_already_set() {$/;"	f	namespace:__anon4
internal1	tests/test_methods_and_attributes.cpp	/^    int internal1() const { return value; }        \/\/ return by value$/;"	f	class:ExampleMandA
internal2	tests/test_methods_and_attributes.cpp	/^    int &internal2() { return value; }             \/\/ return by reference$/;"	f	class:ExampleMandA
internal3	tests/test_methods_and_attributes.cpp	/^    const int &internal3() const { return value; } \/\/ return by const reference$/;"	f	class:ExampleMandA
internal4	tests/test_methods_and_attributes.cpp	/^    int *internal4() { return &value; }            \/\/ return by pointer$/;"	f	class:ExampleMandA
internal5	tests/test_methods_and_attributes.cpp	/^    const int *internal5() { return &value; }      \/\/ return by const pointer$/;"	f	class:ExampleMandA
internals	include/pybind11/detail/internals.h	/^struct internals {$/;"	s
internals_function_record_capsule_name	include/pybind11/detail/internals.h	/^constexpr const char *internals_function_record_capsule_name = "pybind11_function_record_capsule";$/;"	v
intree_extensions	pybind11/setup_helpers.py	/^def intree_extensions($/;"	f
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<T &&> {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<T &> {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<T *> {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<T[N]> {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<const T> {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<const T[N]> {$/;"	s
is	include/pybind11/pytypes.h	/^    bool is(object_api const &other) const { return derived().ptr() == other.derived().ptr(); }$/;"	f	class:object_api
is_alias	include/pybind11/detail/init.h	/^bool is_alias(Cpp<Class> *ptr) {$/;"	f
is_alias	include/pybind11/detail/init.h	/^constexpr bool is_alias(void *) {$/;"	f
is_array	include/pybind11/numpy.h	/^    static constexpr bool is_array = false;$/;"	m	struct:array_info_scalar
is_array	include/pybind11/numpy.h	/^    static constexpr bool is_array = true;$/;"	m	struct:array_info
is_comparable	include/pybind11/stl_bind.h	/^    static constexpr const bool is_comparable$/;"	m	struct:container_traits
is_comparable	include/pybind11/stl_bind.h	/^struct is_comparable : std::false_type {};$/;"	s
is_comparable	include/pybind11/stl_bind.h	/^struct is_comparable<$/;"	s
is_comparable	include/pybind11/stl_bind.h	/^struct is_comparable<T, enable_if_t<container_traits<T>::is_pair>> {$/;"	s
is_comparable	include/pybind11/stl_bind.h	/^struct is_comparable<T, enable_if_t<container_traits<T>::is_vector>>$/;"	s
is_comparable	include/pybind11/stl_bind.h	/^struct is_comparable<recursive_bottom> : std::true_type {};$/;"	s
is_complex	include/pybind11/numpy.h	/^struct is_complex : std::false_type {};$/;"	s
is_complex	include/pybind11/numpy.h	/^struct is_complex<std::complex<T>> : std::true_type {};$/;"	s
is_constructor	include/pybind11/attr.h	/^    bool is_constructor : 1;$/;"	m	struct:function_record
is_copy_assignable	include/pybind11/detail/type_caster_base.h	/^struct is_copy_assignable$/;"	s
is_copy_assignable	include/pybind11/detail/type_caster_base.h	/^struct is_copy_assignable<recursive_bottom> : std::true_type {};$/;"	s
is_copy_assignable	include/pybind11/detail/type_caster_base.h	/^struct is_copy_assignable<std::pair<T1, T2>>$/;"	s
is_copy_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_copy_constructible$/;"	s
is_copy_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_copy_constructible<recursive_bottom> : std::true_type {};$/;"	s
is_copy_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_copy_constructible<std::pair<T1, T2>>$/;"	s
is_copy_constructible	tests/test_vector_unique_ptr_member.cpp	/^struct is_copy_constructible<pybind11_tests::vector_unique_ptr_member::VectorOwner>$/;"	s	namespace:pybind11::detail	file:
is_correct_shape	include/pybind11/eigen/tensor.h	/^    is_correct_shape(const Eigen::DSizes<typename Type::Index, Type::NumIndices> & \/*shape*\/) {$/;"	f	struct:eigen_tensor_helper
is_correct_shape	include/pybind11/eigen/tensor.h	/^    is_correct_shape(const Eigen::DSizes<typename Type::Index, Type::NumIndices> &shape) {$/;"	f	struct:eigen_tensor_helper
is_cpp_function	include/pybind11/pytypes.h	/^    bool is_cpp_function() const { return (bool) cpp_function(); }$/;"	f	class:handle::function
is_element	include/pybind11/stl_bind.h	/^    static constexpr const bool is_element = !is_pair && !is_vector;$/;"	m	struct:container_traits
is_empty	include/pybind11/numpy.h	/^    static constexpr bool is_empty = (N == 0) || array_info<T>::is_empty;$/;"	m	struct:array_info
is_empty	include/pybind11/numpy.h	/^    static constexpr bool is_empty = false;$/;"	m	struct:array_info_scalar
is_final	include/pybind11/attr.h	/^    bool is_final : 1;$/;"	m	struct:type_record
is_final	include/pybind11/attr.h	/^struct is_final {};$/;"	s
is_fmt_numeric	include/pybind11/complex.h	/^struct is_fmt_numeric<std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>> {$/;"	s
is_fmt_numeric	include/pybind11/detail/common.h	/^struct is_fmt_numeric {$/;"	s
is_fmt_numeric	include/pybind11/detail/common.h	/^struct is_fmt_numeric<T, enable_if_t<std::is_arithmetic<T>::value>> {$/;"	s
is_function_record_capsule	include/pybind11/detail/internals.h	/^inline bool is_function_record_capsule(const capsule &cap) {$/;"	f
is_holder_type	include/pybind11/cast.h	/^struct is_holder_type$/;"	s
is_holder_type	include/pybind11/cast.h	/^struct is_holder_type<base, std::unique_ptr<base, deleter>> : std::true_type {};$/;"	s
is_input_iterator	include/pybind11/detail/common.h	/^struct is_input_iterator : std::false_type {};$/;"	s
is_input_iterator	include/pybind11/detail/common.h	/^struct is_input_iterator<T,$/;"	s
is_instantiation	include/pybind11/detail/common.h	/^struct is_instantiation : std::false_type {};$/;"	s
is_instantiation	include/pybind11/detail/common.h	/^struct is_instantiation<Class, Class<Us...>> : std::true_type {};$/;"	s
is_method	include/pybind11/attr.h	/^    bool is_method : 1;$/;"	m	struct:function_record
is_method	include/pybind11/attr.h	/^    explicit is_method(const handle &c) : class_(c) {}$/;"	f	struct:is_method
is_method	include/pybind11/attr.h	/^struct is_method {$/;"	s
is_move_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_move_constructible$/;"	s
is_move_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_move_constructible<recursive_bottom> : std::true_type {};$/;"	s
is_move_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_move_constructible<std::pair<T1, T2>>$/;"	s
is_move_constructible	tests/test_vector_unique_ptr_member.cpp	/^struct is_move_constructible<pybind11_tests::vector_unique_ptr_member::VectorOwner>$/;"	s	namespace:pybind11::detail	file:
is_new_style_constructor	include/pybind11/attr.h	/^    bool is_new_style_constructor : 1;$/;"	m	struct:function_record
is_new_style_constructor	include/pybind11/attr.h	/^struct is_new_style_constructor {};$/;"	s
is_none	include/pybind11/pytypes.h	/^    bool is_none() const { return derived().ptr() == Py_None; }$/;"	f	class:object_api
is_operator	include/pybind11/attr.h	/^    bool is_operator : 1;$/;"	m	struct:function_record
is_operator	include/pybind11/attr.h	/^struct is_operator {};$/;"	s
is_pair	include/pybind11/stl_bind.h	/^    static constexpr const bool is_pair$/;"	m	struct:container_traits
is_recursive	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool is_recursive$/;"	m	struct:impl_recursive_container_traits
is_setter	include/pybind11/attr.h	/^    bool is_setter : 1;$/;"	m	struct:function_record
is_setter	include/pybind11/attr.h	/^struct is_setter {};$/;"	s
is_stateless	include/pybind11/attr.h	/^    bool is_stateless : 1;$/;"	m	struct:function_record
is_std_array	include/pybind11/numpy.h	/^struct is_std_array : std::false_type {};$/;"	s
is_std_array	include/pybind11/numpy.h	/^struct is_std_array<std::array<T, N>> : std::true_type {};$/;"	s
is_template_base_of_impl	include/pybind11/detail/common.h	/^struct is_template_base_of_impl {$/;"	s
is_tensor_aligned	include/pybind11/eigen/tensor.h	/^inline bool is_tensor_aligned(const void *data) {$/;"	f
is_valid	include/pybind11/embed.h	/^    bool is_valid = true;$/;"	m	class:scoped_interpreter
is_valid_class_option	include/pybind11/pybind11.h	/^    struct is_valid_class_option : detail::any_of<is_holder<T>, is_subtype<T>, is_base<T>> {};$/;"	s	class:class_
is_vector	include/pybind11/stl_bind.h	/^    static constexpr const bool is_vector$/;"	m	struct:container_traits
isalnum	include/pybind11/detail/common.h	278;"	d
isalpha	include/pybind11/detail/common.h	279;"	d
isinstance	include/pybind11/pytypes.h	/^bool isinstance(handle obj) {$/;"	f	struct:handle::error_fetch_and_normalize
isinstance	include/pybind11/pytypes.h	/^inline bool isinstance(handle obj, handle type) {$/;"	f	struct:handle::error_fetch_and_normalize
isinstance	include/pybind11/pytypes.h	/^inline bool isinstance<object>(handle obj) {$/;"	f	struct:handle::error_fetch_and_normalize
isinstance_generic	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE bool isinstance_generic(handle obj, const std::type_info &tp) {$/;"	f
islower	include/pybind11/detail/common.h	280;"	d
isspace	include/pybind11/detail/common.h	281;"	d
issues	tools/make_changelog.py	/^issues = (issue for page in issues_pages for issue in page)$/;"	v
issues_pages	tools/make_changelog.py	/^issues_pages = ghapi.page.paged($/;"	v
istate	include/pybind11/detail/internals.h	/^    PyInterpreterState *istate = nullptr;$/;"	m	struct:internals
isupper	include/pybind11/detail/common.h	282;"	d
it	include/pybind11/pybind11.h	/^    Iterator it;$/;"	m	struct:iterator_state
item_type_is_equivalent_to	include/pybind11/buffer_info.h	/^    bool item_type_is_equivalent_to() const {$/;"	f	struct:buffer_info
items_view	include/pybind11/stl_bind.h	/^struct items_view {$/;"	s
itemsize	include/pybind11/buffer_info.h	/^    ssize_t itemsize = 0;         \/\/ Size of individual items in bytes$/;"	m	struct:buffer_info
iter	include/pybind11/pytypes.h	/^inline iterator iter(handle obj) {$/;"	f	class:handle
iterable	include/pybind11/pytypes.h	/^class iterable : public object {$/;"	c	class:handle
iterator	include/pybind11/detail/type_caster_base.h	/^        explicit iterator(size_t end) : curr(end) {}$/;"	f	struct:values_and_holders::iterator
iterator	include/pybind11/detail/type_caster_base.h	/^        iterator(instance *inst, const type_vec *tinfo)$/;"	f	struct:values_and_holders::iterator
iterator	include/pybind11/detail/type_caster_base.h	/^    struct iterator {$/;"	s	struct:values_and_holders
iterator	include/pybind11/pytypes.h	/^class iterator : public object {$/;"	c	class:handle
iterator_access	include/pybind11/pybind11.h	/^struct iterator_access {$/;"	s
iterator_key_access	include/pybind11/pybind11.h	/^class iterator_key_access {$/;"	c
iterator_state	include/pybind11/pybind11.h	/^struct iterator_state {$/;"	s
iterator_value_access	include/pybind11/pybind11.h	/^class iterator_value_access {$/;"	c
join	tests/test_iostream.cpp	/^    void join() const {$/;"	f	struct:TestThread
join	tests/test_thread.py	/^    def join(self):$/;"	m	class:Thread
kModuleName	tests/cross_module_gil_utils.cpp	/^constexpr char kModuleName[] = "cross_module_gil_utils";$/;"	m	namespace:__anon3	file:
kModuleName	tests/cross_module_interleaved_error_already_set.cpp	/^constexpr char kModuleName[] = "cross_module_interleaved_error_already_set";$/;"	m	namespace:__anon4	file:
kSet	tests/test_stl.cpp	/^    kSet = 42,$/;"	m	class:EnumType	file:
kUnset	tests/test_stl.cpp	/^    kUnset = 85,$/;"	m	class:EnumType	file:
keep_alive	include/pybind11/attr.h	/^struct keep_alive {};$/;"	s
keep_alive	include/pybind11/detail/type_caster_base.h	/^    std::unordered_set<PyObject *> keep_alive;$/;"	m	class:loader_life_support
keep_alive_impl	include/pybind11/pybind11.h	/^PYBIND11_NOINLINE void keep_alive_impl(handle nurse, handle patient) {$/;"	f
keep_alive_impl	include/pybind11/pybind11.h	/^keep_alive_impl(size_t Nurse, size_t Patient, function_call &call, handle ret) {$/;"	f
key	include/pybind11/pytypes.h	/^    PyObject *key = nullptr, *value = nullptr;$/;"	m	class:handle::dict_readonly
key	include/pybind11/pytypes.h	/^    key_type key;$/;"	m	class:handle::error_fetch_and_normalize::accessor
keys_view	include/pybind11/stl_bind.h	/^struct keys_view {$/;"	s
kind	include/pybind11/numpy.h	/^    char kind() const { return detail::array_descriptor_proxy(m_ptr)->kind; }$/;"	f
kind	include/pybind11/numpy.h	/^    char kind;$/;"	m	struct:PyArrayDescr_Proxy
kind	tests/test_tagbased_polymorphic.cpp	/^    const Kind kind;$/;"	m	class:Animal::Kind	file:
kw_only	include/pybind11/cast.h	/^struct kw_only {};$/;"	s
kwargs	include/pybind11/cast.h	/^    const dict &kwargs() const & { return m_kwargs; }$/;"	f	class:unpacking_collector
kwargs	include/pybind11/cast.h	/^    dict kwargs() && { return std::move(m_kwargs); }$/;"	f	class:unpacking_collector
kwargs	include/pybind11/cast.h	/^    dict kwargs() const { return {}; }$/;"	f	class:simple_collector
kwargs	include/pybind11/pytypes.h	/^class kwargs : public dict {$/;"	c	class:handle
kwargs_pos	include/pybind11/cast.h	/^    static constexpr auto kwargs_pos = constexpr_last<argument_is_kwargs, Args...>();$/;"	m	class:argument_loader
kwargs_proxy	include/pybind11/pytypes.h	/^    explicit kwargs_proxy(handle h) : handle(h) {}$/;"	f	class:handle::kwargs_proxy
kwargs_proxy	include/pybind11/pytypes.h	/^class kwargs_proxy : public handle {$/;"	c	class:handle
kwargs_ref	include/pybind11/cast.h	/^    object args_ref, kwargs_ref;$/;"	m	struct:function_call
l	tests/test_smart_ptr.cpp	/^    std::vector<std::shared_ptr<ElementBase>> l;$/;"	m	struct:ElementList	file:
lacking_copy_ctor	tests/test_copy_move.cpp	/^struct lacking_copy_ctor : public empty<lacking_copy_ctor> {$/;"	s	file:
lacking_move_ctor	tests/test_copy_move.cpp	/^struct lacking_move_ctor : public empty<lacking_move_ctor> {$/;"	s	file:
language	docs/conf.py	/^language = None$/;"	v
last	include/pybind11/detail/common.h	/^constexpr int last(int \/*i*\/, int result) { return result; }$/;"	f
last	include/pybind11/detail/common.h	/^constexpr int last(int i, int result, T v, Ts... vs) {$/;"	f
latex_documents	docs/conf.py	/^latex_documents = [$/;"	v
latex_elements	docs/conf.py	/^latex_elements = {$/;"	v
latex_engine	docs/conf.py	/^latex_engine = "pdflatex"$/;"	v
ldbl_	tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:PartialStruct	file:
ldbl_	tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:SimpleStruct	file:
ldbl_	tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:SimpleStructReordered	file:
len	include/pybind11/numpy.h	/^        int len;$/;"	m	struct:npy_api::PyArray_Dims
len	include/pybind11/pytypes.h	/^inline size_t len(handle h) {$/;"	f	class:handle
len_hint	include/pybind11/pytypes.h	/^inline size_t len_hint(handle h) {$/;"	f	class:handle
lib	tools/libsize.py	/^lib = sys.argv[1]$/;"	v
libsize	tools/libsize.py	/^libsize = os.path.getsize(lib)$/;"	v
lint	noxfile.py	/^def lint(session: nox.Session) -> None:$/;"	f
list	include/pybind11/pytypes.h	/^    explicit list(SzType size = 0) : object(PyList_New(ssize_t_cast(size)), stolen_t{}) {$/;"	f	class:handle::list
list	include/pybind11/pytypes.h	/^class list : public object {$/;"	c	class:handle
list_caster	include/pybind11/stl.h	/^struct list_caster {$/;"	s
list_item	include/pybind11/pytypes.h	/^struct list_item {$/;"	s	struct:handle::error_fetch_and_normalize
literals	include/pybind11/cast.h	/^inline namespace literals {$/;"	n
literals	include/pybind11/pytypes.h	/^inline namespace literals {$/;"	n	class:handle
load	include/pybind11/cast.h	/^    bool load(handle h, bool) {$/;"	f	class:type_caster
load	include/pybind11/cast.h	/^    bool load(handle src, bool \/* convert *\/) {$/;"	f	struct:pyobject_caster
load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) { return subcaster.load(src, convert); }$/;"	f	class:type_caster
load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	class:tuple_caster
load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	class:type_caster
load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:copyable_holder_caster
load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster
load	include/pybind11/cast.h	/^    bool load(handle src, bool) {$/;"	f	struct:string_caster
load	include/pybind11/cast.h	/^    bool load(handle src, bool) {$/;"	f	struct:void_caster
load	include/pybind11/chrono.h	/^    bool load(handle src, bool) {$/;"	f	class:duration_caster
load	include/pybind11/chrono.h	/^    bool load(handle src, bool) {$/;"	f	class:type_caster
load	include/pybind11/complex.h	/^    bool load(handle src, bool convert) {$/;"	f	class:type_caster
load	include/pybind11/detail/init.h	/^    bool load(handle h, bool) {$/;"	f	class:type_caster
load	include/pybind11/detail/type_caster_base.h	/^    bool load(handle src, bool convert) { return load_impl<type_caster_generic>(src, convert); }$/;"	f	class:type_caster_generic
load	include/pybind11/eigen/matrix.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster
load	include/pybind11/eigen/matrix.h	/^    bool load(handle src, bool) {$/;"	f	struct:type_caster
load	include/pybind11/eigen/tensor.h	/^    bool load(handle src, bool \/*convert*\/) {$/;"	f	struct:type_caster
load	include/pybind11/eigen/tensor.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster
load	include/pybind11/functional.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:array_caster
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:list_caster
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:map_caster
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:optional_caster
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:set_caster
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:variant_caster
load	include/pybind11/stl/filesystem.h	/^    bool load(handle handle, bool) {$/;"	f	struct:path_caster
load	include/pybind11/type_caster_pyobject_ptr.h	/^    bool load(handle src, bool) {$/;"	f	class:type_caster
load	tests/test_builtin_casters.cpp	/^    bool load(handle, bool) { return true; }$/;"	f	class:type_caster
load	tests/test_copy_move.cpp	/^    bool load(handle src, bool) {$/;"	f	struct:type_caster
load	tests/test_custom_type_casters.cpp	/^    bool load(handle src, bool convert) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster
load	tests/test_custom_type_casters.cpp	/^    bool load(handle, bool convert) { return convert; }$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster
load	tests/test_custom_type_casters.cpp	/^    bool load(handle, bool) { return true; }$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster
load	tests/test_custom_type_casters.cpp	/^    bool load(py_::handle, bool) { return true; }$/;"	f	struct:other_lib::my_caster
load_alternative	include/pybind11/stl.h	/^    bool load_alternative(handle src, bool convert, type_list<U, Us...>) {$/;"	f	struct:variant_caster
load_alternative	include/pybind11/stl.h	/^    bool load_alternative(handle, bool, type_list<>) { return false; }$/;"	f	struct:variant_caster
load_args	include/pybind11/cast.h	/^    bool load_args(function_call &call) { return load_impl_sequence(call, indices{}); }$/;"	f	class:argument_loader
load_impl	include/pybind11/cast.h	/^    bool load_impl(const sequence &seq, bool convert, index_sequence<Is...>) {$/;"	f	class:tuple_caster
load_impl	include/pybind11/cast.h	/^    static constexpr bool load_impl(const sequence &, bool, index_sequence<>) { return true; }$/;"	f	class:tuple_caster
load_impl	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE bool load_impl(handle src, bool convert) {$/;"	f	class:type_caster_generic
load_impl_sequence	include/pybind11/cast.h	/^    bool load_impl_sequence(function_call &call, index_sequence<Is...>) {$/;"	f	class:argument_loader
load_impl_sequence	include/pybind11/cast.h	/^    static bool load_impl_sequence(function_call &, index_sequence<>) { return true; }$/;"	f	class:argument_loader
load_numpy_internals	include/pybind11/numpy.h	/^PYBIND11_NOINLINE void load_numpy_internals(numpy_internals *&ptr) {$/;"	f
load_raw	include/pybind11/cast.h	/^    bool load_raw(enable_if_t<!std::is_same<C, char>::value, handle>) {$/;"	f	struct:string_caster
load_raw	include/pybind11/cast.h	/^    bool load_raw(enable_if_t<std::is_same<C, char>::value, handle> src) {$/;"	f	struct:string_caster
load_type	include/pybind11/cast.h	/^make_caster<T> load_type(const handle &handle) {$/;"	f
load_type	include/pybind11/cast.h	/^type_caster<T, SFINAE> &load_type(type_caster<T, SFINAE> &conv, const handle &handle) {$/;"	f
load_value	include/pybind11/cast.h	/^    bool load_value(value_and_holder &&v_h) {$/;"	f	struct:copyable_holder_caster
load_value	include/pybind11/detail/type_caster_base.h	/^    void load_value(value_and_holder &&v_h) {$/;"	f	class:type_caster_generic
loader_life_support	include/pybind11/detail/type_caster_base.h	/^    loader_life_support() : parent{get_stack_top()} { set_stack_top(this); }$/;"	f	class:loader_life_support
loader_life_support	include/pybind11/detail/type_caster_base.h	/^class loader_life_support {$/;"	c
loc	docs/conf.py	/^loc = {}$/;"	v
local_internals	include/pybind11/detail/internals.h	/^    local_internals() {$/;"	f	struct:local_internals
local_internals	include/pybind11/detail/internals.h	/^struct local_internals {$/;"	s
local_load	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE static void *local_load(PyObject *src, const type_info *ti) {$/;"	f	class:type_caster_generic
local_sdist_files	tests/extra_python_package/test_files.py	/^local_sdist_files = {$/;"	v
localtime_thread_safe	include/pybind11/chrono.h	/^inline std::tm *localtime_thread_safe(const std::time_t *time, std::tm *buf) {$/;"	f
log2	include/pybind11/detail/common.h	/^inline static constexpr int log2(size_t n, int k = 0) {$/;"	f
lookup	include/pybind11/numpy.h	/^    static npy_api lookup() {$/;"	f	struct:npy_api
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.BT
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CCR
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CCT
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CR
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.DR
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.DT
m	tests/test_async.py	/^m = pytest.importorskip("pybind11_tests.async_module")$/;"	v
m	tests/test_constants_and_functions.py	/^m = pytest.importorskip("pybind11_tests.constants_and_functions")$/;"	v
m	tests/test_eigen_matrix.py	/^m = pytest.importorskip("pybind11_tests.eigen_matrix")$/;"	v
m	tests/test_smart_ptr.py	/^m = pytest.importorskip("pybind11_tests.smart_ptr")$/;"	v
m	tests/test_virtual_functions.py	/^m = pytest.importorskip("pybind11_tests.virtual_functions")$/;"	v
m7	tests/test_constants_and_functions.cpp	/^    int m7(int x) throw() { return x - 7; }$/;"	f	struct:test_exc_sp::C
m8	tests/test_constants_and_functions.cpp	/^    int m8(int x) const throw() { return x - 8; }$/;"	f	struct:test_exc_sp::C
m_args	include/pybind11/cast.h	/^    tuple m_args;$/;"	m	class:simple_collector
m_args	include/pybind11/cast.h	/^    tuple m_args;$/;"	m	class:unpacking_collector
m_base	include/pybind11/pybind11.h	/^    detail::enum_base m_base;$/;"	m	class:enum_
m_base	include/pybind11/pybind11.h	/^    handle m_base;$/;"	m	struct:enum_base
m_defs	tests/test_pytypes.cpp	/^void m_defs(py::module_ &m) {$/;"	f	namespace:handle_from_move_only_type_with_operator_PyObject
m_fetched_error	include/pybind11/pytypes.h	/^    std::shared_ptr<detail::error_fetch_and_normalize> m_fetched_error;$/;"	m	class:handle::error_fetch_and_normalize::error_already_set
m_fetched_error_deleter	include/pybind11/pybind11.h	/^error_already_set::m_fetched_error_deleter(detail::error_fetch_and_normalize *raw_ptr) {$/;"	f	class:error_already_set
m_kwargs	include/pybind11/cast.h	/^    dict m_kwargs;$/;"	m	class:unpacking_collector
m_parent	include/pybind11/pybind11.h	/^    handle m_parent;$/;"	m	struct:enum_base
m_ptr	tests/object.h	/^    T *m_ptr;$/;"	m	class:ref
m_ptr	tests/object.h	/^    ref(ref &&r) noexcept : m_ptr(r.m_ptr) {$/;"	f	class:ref
m_view	include/pybind11/buffer_info.h	/^    Py_buffer *m_view = nullptr;$/;"	m	struct:buffer_info
main	pybind11/__main__.py	/^def main() -> None:$/;"	f
main	tests/test_cmake_build/embed.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_embed/catch.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main_headers	tests/extra_python_package/test_files.py	/^main_headers = {$/;"	v
make_changelog	noxfile.py	/^def make_changelog(session: nox.Session) -> None:$/;"	f
make_copy_constructor	include/pybind11/detail/type_caster_base.h	/^    static Constructor make_copy_constructor(...) { return nullptr; }$/;"	f	class:type_caster_base
make_default_metaclass	include/pybind11/detail/class.h	/^inline PyTypeObject *make_default_metaclass() {$/;"	f
make_function_record	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE unique_function_record make_function_record() {$/;"	f	class:cpp_function
make_iterator	include/pybind11/pybind11.h	/^iterator make_iterator(Iterator first, Sentinel last, Extra &&...extra) {$/;"	f
make_iterator	include/pybind11/pybind11.h	/^iterator make_iterator(Type &value, Extra &&...extra) {$/;"	f
make_iterator_impl	include/pybind11/pybind11.h	/^iterator make_iterator_impl(Iterator first, Sentinel last, Extra &&...extra) {$/;"	f
make_key_iterator	include/pybind11/pybind11.h	/^iterator make_key_iterator(Iterator first, Sentinel last, Extra &&...extra) {$/;"	f
make_key_iterator	include/pybind11/pybind11.h	/^iterator make_key_iterator(Type &value, Extra &&...extra) {$/;"	f
make_move_constructor	include/pybind11/detail/type_caster_base.h	/^    static Constructor make_move_constructor(...) { return nullptr; }$/;"	f	class:type_caster_base
make_new_instance	include/pybind11/detail/class.h	/^inline PyObject *make_new_instance(PyTypeObject *type) {$/;"	f
make_new_python_type	include/pybind11/detail/class.h	/^inline PyObject *make_new_python_type(const type_record &rec) {$/;"	f
make_object_base_type	include/pybind11/detail/class.h	/^inline PyObject *make_object_base_type(PyTypeObject *metaclass) {$/;"	f
make_release_tree	setup.py	/^    def make_release_tree(self, base_dir: str, files: List[str]) -> None:$/;"	m	class:SDist
make_simple_namespace	include/pybind11/pybind11.h	/^object make_simple_namespace(Args &&...args_) {$/;"	f
make_static_property_type	include/pybind11/detail/class.h	/^inline PyTypeObject *make_static_property_type() {$/;"	f
make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex outer, EigenIndex inner) {$/;"	f	struct:type_caster
make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex outer, EigenIndex) {$/;"	f	struct:type_caster
make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex, EigenIndex inner) {$/;"	f	struct:type_caster
make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex, EigenIndex) {$/;"	f	struct:type_caster
make_tuple	include/pybind11/cast.h	/^tuple make_tuple() {$/;"	f
make_tuple	include/pybind11/cast.h	/^tuple make_tuple(Args &&...args_) {$/;"	f
make_value_iterator	include/pybind11/pybind11.h	/^iterator make_value_iterator(Iterator first, Sentinel last, Extra &&...extra) {$/;"	f
make_value_iterator	include/pybind11/pybind11.h	/^iterator make_value_iterator(Type &value, Extra &&...extra) {$/;"	f
make_vector_pyobject_ptr	tests/test_type_caster_pyobject_ptr.cpp	/^std::vector<PyObject *> make_vector_pyobject_ptr(const py::object &ValueHolder) {$/;"	f	namespace:__anon1
man_pages	docs/conf.py	/^man_pages = [(master_doc, "pybind11", "pybind11 Documentation", [author], 1)]$/;"	v
map	include/pybind11/eigen/matrix.h	/^    std::unique_ptr<MapType> map;$/;"	m	struct:type_caster
map	include/pybind11/stl_bind.h	/^    Map &map;$/;"	m	struct:ItemsViewImpl
map	include/pybind11/stl_bind.h	/^    Map &map;$/;"	m	struct:KeysViewImpl
map	include/pybind11/stl_bind.h	/^    Map &map;$/;"	m	struct:ValuesViewImpl
map_assignment	include/pybind11/stl_bind.h	/^void map_assignment($/;"	f
map_assignment	include/pybind11/stl_bind.h	/^void map_assignment(const Args &...) {}$/;"	f
map_assignment	include/pybind11/stl_bind.h	/^void map_assignment(enable_if_t<!is_copy_assignable<typename Map::mapped_type>::value$/;"	f
map_caster	include/pybind11/stl.h	/^struct map_caster {$/;"	s
map_if_insertion_operator	include/pybind11/stl_bind.h	/^void map_if_insertion_operator(const Args &...) {}$/;"	f
mark	tools/check-style.sh	/^function mark(pattern, string) { sub(pattern, "\\033[01;31m&\\033[0m", string); return string }$/;"	f
mark_parents_nonsimple	include/pybind11/pybind11.h	/^    void mark_parents_nonsimple(PyTypeObject *value) {$/;"	f	class:generic_type
master_doc	docs/conf.py	/^master_doc = "index"$/;"	v
matches	include/pybind11/pytypes.h	/^    bool matches(handle exc) const { return m_fetched_error->matches(exc); }$/;"	f	class:handle::error_fetch_and_normalize::error_already_set
matches	setup.py	/^matches = dict(VERSION_REGEX.findall(COMMON_FILE.read_text(encoding="utf8")))$/;"	v
member	tests/test_operator_overloading.cpp	/^    std::string member;$/;"	m	struct:HashMe	file:
member	tests/test_stl.cpp	/^    OptionalImpl<T> member = T{};$/;"	m	struct:OptionalHolder	file:
member_initialized	tests/test_stl.cpp	/^    bool member_initialized() const { return member && member->initialized; }$/;"	f	struct:OptionalHolder
memoryview	include/pybind11/pytypes.h	/^    explicit memoryview(const buffer_info &info) {$/;"	f	class:handle::memoryview
memoryview	include/pybind11/pytypes.h	/^class memoryview : public object {$/;"	c	class:handle
message	tests/local_bindings.h	/^    std::string message = "";$/;"	m	class:LocalException
message	tests/local_bindings.h	/^    std::string message = "";$/;"	m	class:LocalSimpleException
message	tests/test_embed/test_interpreter.cpp	/^    std::string message;$/;"	m	class:Widget	file:
message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException	file:
message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException2	file:
message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException3	file:
message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException4	file:
message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException6	file:
metaclass	include/pybind11/attr.h	/^    explicit metaclass(handle value) : value(value) {}$/;"	f	struct:metaclass
metaclass	include/pybind11/attr.h	/^    handle metaclass;$/;"	m	struct:type_record
metaclass	include/pybind11/attr.h	/^struct metaclass {$/;"	s
missing	tools/make_changelog.py	/^missing = []$/;"	v
mkarray_via_buffer	tests/test_numpy_dtypes.cpp	/^py::array mkarray_via_buffer(size_t n) {$/;"	f	class:E1	file:
module_	include/pybind11/pybind11.h	/^    explicit module_(const char *name, const char *doc = nullptr) {$/;"	f	class:module_
module_	include/pybind11/pybind11.h	/^class module_ : public object {$/;"	c
module_local	include/pybind11/attr.h	/^    bool module_local : 1;$/;"	m	struct:type_record
module_local	include/pybind11/attr.h	/^    constexpr explicit module_local(bool v = true) : value(v) {}$/;"	f	struct:module_local
module_local	include/pybind11/attr.h	/^struct module_local {$/;"	s
module_local	include/pybind11/detail/internals.h	/^    bool module_local : 1;$/;"	m	struct:type_info
module_local_load	include/pybind11/detail/internals.h	/^    void *(*module_local_load)(PyObject *, const type_info *) = nullptr;$/;"	m	struct:type_info
moduledef	tests/cross_module_gil_utils.cpp	/^struct PyModuleDef moduledef = {$/;"	m	namespace:__anon3	typeref:struct:__anon3::PyModuleDef	file:
moduledef	tests/cross_module_interleaved_error_already_set.cpp	/^struct PyModuleDef moduledef = {$/;"	m	namespace:__anon4	typeref:struct:__anon4::PyModuleDef	file:
molly	tests/test_class.py	/^        molly = [cls("Molly") for _ in range(10)]$/;"	v	class:test_class_refcount.PyDog
move	include/pybind11/cast.h	/^detail::enable_if_t<!detail::move_never<T>::value, T> move(object &&obj) {$/;"	f
move	include/pybind11/detail/common.h	/^    move,$/;"	m	class:return_value_policy
move	tests/test_factory_constructors.cpp	/^    PyTF6(PyTF6 &&f) noexcept : TestFactory6(std::move(f)) { print_move_created(this); }$/;"	f	class:PyTF6
move	tests/test_factory_constructors.cpp	/^    PyTF7(PyTF7 &&f) noexcept : TestFactory7(std::move(f)) { print_move_created(this); }$/;"	f	class:PyTF7
move_always	include/pybind11/cast.h	/^struct move_always : std::false_type {};$/;"	s
move_always	include/pybind11/cast.h	/^struct move_always<$/;"	s
move_assignments	tests/constructor_stats.h	/^    int move_assignments = 0;$/;"	m	class:ConstructorStats
move_constructions	tests/constructor_stats.h	/^    int move_constructions = 0;$/;"	m	class:ConstructorStats
move_created	tests/constructor_stats.h	/^    void move_created(void *inst) {$/;"	f	class:ConstructorStats
move_if_unreferenced	include/pybind11/cast.h	/^struct move_if_unreferenced : std::false_type {};$/;"	s
move_if_unreferenced	include/pybind11/cast.h	/^struct move_if_unreferenced<$/;"	s
move_only_holder_caster	include/pybind11/cast.h	/^struct move_only_holder_caster {$/;"	s
msg	pybind11/__init__.py	/^    msg = "pybind11 does not support Python < 3.6. 2.9 was the last release supporting Python 2.7 and 3.5."$/;"	v
msg	setup.py	/^    msg = f"PYBIND11_VERSION_HEX {version_hex} does not match expected value {exp_version_hex}!"$/;"	v
msg	setup.py	/^    msg = f"Python version {version} does not match C++ version {cpp_version}!"$/;"	v
msg	tests/conftest.py	/^def msg():$/;"	f
msg	tests/test_eigen_tensor.py	/^    msg = ($/;"	v
msg	tools/make_changelog.py	/^            msg = "* " + msg$/;"	v
msg	tools/make_changelog.py	/^    msg = "## Suggested changelog entry:\\n\\n```rst\\n\\n```"$/;"	v
multiple_inheritance	include/pybind11/attr.h	/^    bool multiple_inheritance : 1;$/;"	m	struct:type_record
multiple_inheritance	include/pybind11/attr.h	/^struct multiple_inheritance {};$/;"	s
multiple_values_error	include/pybind11/cast.h	/^    [[noreturn]] static void multiple_values_error() {$/;"	f	class:unpacking_collector
multiple_values_error	include/pybind11/cast.h	/^    [[noreturn]] static void multiple_values_error(const std::string &name) {$/;"	f	class:unpacking_collector
mutate_at_t	tests/test_numpy_array.cpp	/^arr_t &mutate_at_t(arr_t &a, Ix... idx) {$/;"	f
mutate_data	tests/test_numpy_array.cpp	/^arr &mutate_data(arr &a, Ix... index) {$/;"	f
mutate_data_t	tests/test_numpy_array.cpp	/^arr_t &mutate_data_t(arr_t &a, Ix... index) {$/;"	f
my_caster	tests/test_custom_type_casters.cpp	/^struct my_caster {$/;"	s	namespace:other_lib	file:
my_func	tests/test_numpy_vectorize.cpp	/^double my_func(int x, float y, double z) {$/;"	f
myobject4_instances	tests/test_smart_ptr.cpp	/^std::unordered_set<MyObject4 *> myobject4_instances;$/;"	m	namespace:__anon9	file:
myobject4a_instances	tests/test_smart_ptr.cpp	/^std::unordered_set<MyObject4a *> myobject4a_instances;$/;"	m	namespace:__anon9	file:
n1	docs/benchmark.py	/^        n1 = dt.datetime.now()$/;"	v
n2	docs/benchmark.py	/^        n2 = dt.datetime.now()$/;"	v
naive_recompile	pybind11/setup_helpers.py	/^def naive_recompile(obj: str, src: str) -> bool:$/;"	f
name	include/pybind11/attr.h	/^    char *name = nullptr; \/* why no C++ strings? They generate heavier code.. *\/$/;"	m	struct:function_record
name	include/pybind11/attr.h	/^    const char *name = nullptr;$/;"	m	struct:type_record
name	include/pybind11/attr.h	/^    const char *name;  \/\/\/< Argument name$/;"	m	struct:argument_record
name	include/pybind11/attr.h	/^    explicit name(const char *value) : value(value) {}$/;"	f	struct:name
name	include/pybind11/attr.h	/^struct name {$/;"	s
name	include/pybind11/cast.h	/^    const char *name;        \/\/\/< If non-null, this is a named kwargs argument$/;"	m	struct:arg
name	include/pybind11/cast.h	/^    static constexpr auto name = caster_t::name;$/;"	m	class:type_caster
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("**kwargs");$/;"	m	struct:handle_type_name
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("*args");$/;"	m	struct:handle_type_name
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("Iterable");$/;"	m	struct:handle_type_name
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("Iterator");$/;"	m	struct:handle_type_name
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("None");$/;"	m	struct:handle_type_name
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("bool");$/;"	m	struct:handle_type_name
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("capsule");$/;"	m	class:type_caster
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("float");$/;"	m	struct:handle_type_name
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("int");$/;"	m	struct:handle_type_name
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name(PYBIND11_BYTES_NAME);$/;"	m	struct:handle_type_name
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name(PYBIND11_STRING_NAME);$/;"	m	struct:type_caster
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name<T>();$/;"	m	struct:handle_type_name
name	include/pybind11/cast.h	/^    static constexpr auto name = type_caster_base<type>::name;$/;"	m	struct:move_only_holder_caster
name	include/pybind11/cast.h	/^    static constexpr auto name$/;"	m	class:tuple_caster
name	include/pybind11/detail/init.h	/^    static constexpr auto name = const_name<value_and_holder>();$/;"	m	class:type_caster
name	include/pybind11/detail/type_caster_base.h	/^    static constexpr auto name = const_name<type>();$/;"	m	class:type_caster_base
name	include/pybind11/eigen/matrix.h	/^    static constexpr auto name = props::descriptor;$/;"	m	struct:eigen_map_caster
name	include/pybind11/eigen/matrix.h	/^    static constexpr auto name = props::descriptor;$/;"	m	struct:type_caster
name	include/pybind11/eigen/tensor.h	/^    static constexpr auto name = get_tensor_descriptor<Type, true, needs_writeable>::value;$/;"	m	struct:type_caster
name	include/pybind11/numpy.h	/^    static constexpr auto name = const_name("numpy.ndarray");$/;"	m	struct:handle_type_name
name	include/pybind11/pybind11.h	/^    object name() const { return attr("__name__"); }$/;"	f	class:cpp_function
name	include/pybind11/pytypes.h	/^    const char *name() const {$/;"	f	class:handle::capsule
name	include/pybind11/type_caster_pyobject_ptr.h	/^    static constexpr auto name = const_name("object"); \/\/ See discussion under PR #4601.$/;"	m	class:type_caster
name	tests/local_bindings.h	/^    const std::string &name() const { return name_; }$/;"	f	class:pets::Pet
name	tests/test_builtin_casters.cpp	/^    static constexpr auto name = const_name<ConstRefCasted>();$/;"	m	class:type_caster	file:
name	tests/test_copy_move.cpp	/^    static constexpr auto name = const_name("CopyOnlyInt");$/;"	m	struct:type_caster	file:
name	tests/test_tagbased_polymorphic.cpp	/^    const std::string name;$/;"	m	class:Animal::Kind	file:
name_	tests/local_bindings.h	/^    std::string name_;$/;"	m	class:pets::Pet
name_of_kind	tests/test_tagbased_polymorphic.cpp	/^std::string Animal::name_of_kind(Kind kind) {$/;"	f	class:Animal::Animal
nameless_argument_error	include/pybind11/cast.h	/^    [[noreturn]] static void nameless_argument_error() {$/;"	f	class:unpacking_collector
nameless_argument_error	include/pybind11/cast.h	/^    [[noreturn]] static void nameless_argument_error(const std::string &type) {$/;"	f	class:unpacking_collector
names	include/pybind11/numpy.h	/^    PyObject *names;$/;"	m	struct:PyArrayDescr_Proxy
nargs	docs/benchmark.py	/^nargs = 4  # Arguments per function$/;"	v
nargs	include/pybind11/attr.h	/^    std::uint16_t nargs;$/;"	m	struct:function_record
nargs_pos	include/pybind11/attr.h	/^    std::uint16_t nargs_pos = 0;$/;"	m	struct:function_record
nargs_pos_only	include/pybind11/attr.h	/^    std::uint16_t nargs_pos_only = 0;$/;"	m	struct:function_record
nclasses	docs/benchmark.py	/^        nclasses = 2**i$/;"	v
nd	include/pybind11/numpy.h	/^    int nd;$/;"	m	struct:PyArray_Proxy
ndim	include/pybind11/buffer_info.h	/^    ssize_t ndim = 0;             \/\/ Number of dimensions$/;"	m	struct:buffer_info
need_writeable	include/pybind11/eigen/matrix.h	/^    static constexpr bool need_writeable = is_eigen_mutable_map<Type>::value;$/;"	m	struct:type_caster
needs_writeable	include/pybind11/eigen/tensor.h	/^    static constexpr bool needs_writeable = !std::is_const<Type>::value;$/;"	m	struct:type_caster
needs_writeable	include/pybind11/eigen/tensor.h	/^    static constexpr bool needs_writeable = !std::is_const<typename std::remove_pointer<$/;"	m	struct:type_caster
negation	include/pybind11/detail/common.h	/^struct negation : bool_constant<!T::value> {};$/;"	s
negativestrides	include/pybind11/eigen/matrix.h	/^    bool negativestrides = false; \/\/ If true, do not use stride!$/;"	m	struct:EigenConformable
next	include/pybind11/attr.h	/^    function_record *next = nullptr;$/;"	m	struct:function_record
nfns	docs/benchmark.py	/^nfns = 4  # Functions per class$/;"	v
no_nullptr	include/pybind11/detail/init.h	/^inline void no_nullptr(void *ptr) {$/;"	f
no_recompile	pybind11/setup_helpers.py	/^def no_recompile(obg: str, src: str) -> bool:  # noqa: ARG001$/;"	f
noconvert	include/pybind11/cast.h	/^    arg &noconvert(bool flag = true) {$/;"	f	struct:arg
noconvert	include/pybind11/cast.h	/^    arg_v &noconvert(bool flag = true) {$/;"	f	struct:arg_v
nodelete	include/pybind11/detail/common.h	/^struct nodelete {$/;"	s
noexcept	include/pybind11/pytypes.h	/^    accessor(accessor &&) noexcept = default;$/;"	m	class:handle::error_fetch_and_normalize::accessor
noexcept	include/pybind11/pytypes.h	/^    arrow_proxy(T &&value) noexcept : value(std::move(value)) {}$/;"	m	struct:handle::error_fetch_and_normalize::arrow_proxy
noexcept	tests/test_constants_and_functions.cpp	/^    int m3(int x) noexcept(true) { return x - 3; }$/;"	f	struct:test_exc_sp::C
noexcept	tests/test_constants_and_functions.cpp	/^    int m4(int x) const noexcept(true) { return x - 4; }$/;"	f	struct:test_exc_sp::C
noexcept	tests/test_constants_and_functions.cpp	/^    int m5(int x) noexcept(false) { return x - 5; }$/;"	f	struct:test_exc_sp::C
noexcept	tests/test_constants_and_functions.cpp	/^    int m6(int x) const noexcept(false) { return x - 6; }$/;"	f	struct:test_exc_sp::C
noexcept	tests/test_constants_and_functions.cpp	/^int f1(int x) noexcept(true) { return x + 1; }$/;"	f	namespace:test_exc_sp
noexcept	tests/test_constants_and_functions.cpp	/^int f2(int x) noexcept(true) { return x + 2; }$/;"	f	namespace:test_exc_sp
noexcept	tests/test_constants_and_functions.cpp	/^int f3(int x) noexcept(false) { return x + 3; }$/;"	f	namespace:test_exc_sp
noexcept	tests/test_embed/test_interpreter.cpp	/^    explicit scope_exit(std::function<void()> f) noexcept : f_(std::move(f)) {}$/;"	m	struct:scope_exit	file:
noexcept	tests/test_smart_ptr.cpp	/^        B(B &&) noexcept : std::enable_shared_from_this<B>() { print_move_created(this); }$/;"	m	struct:__anon9::SharedFromThisRef::B	file:
noisy_funct_dual	tests/test_iostream.cpp	/^void noisy_funct_dual(const std::string &msg, const std::string &emsg) {$/;"	f
noisy_function	tests/test_iostream.cpp	/^void noisy_function(const std::string &msg, bool flush) {$/;"	f
none	include/pybind11/attr.h	/^    bool none : 1;     \/\/\/< True if None is allowed when loading$/;"	m	struct:argument_record
none	include/pybind11/cast.h	/^    arg &none(bool flag = true) {$/;"	f	struct:arg
none	include/pybind11/cast.h	/^    arg_v &none(bool flag = true) {$/;"	f	struct:arg_v
none	include/pybind11/cast.h	/^    bool none = false;$/;"	m	struct:type_caster
none	include/pybind11/pytypes.h	/^    none() : object(Py_None, borrowed_t{}) {}$/;"	f	class:handle::none
none	include/pybind11/pytypes.h	/^class none : public object {$/;"	c	class:handle
none1	tests/test_methods_and_attributes.cpp	/^int none1(const NoneTester &obj) { return obj.answer; }$/;"	f
none2	tests/test_methods_and_attributes.cpp	/^int none2(NoneTester *obj) { return obj ? obj->answer : -1; }$/;"	f
none3	tests/test_methods_and_attributes.cpp	/^int none3(std::shared_ptr<NoneTester> &obj) { return obj ? obj->answer : -1; }$/;"	f
none4	tests/test_methods_and_attributes.cpp	/^int none4(std::shared_ptr<NoneTester> *obj) { return obj && *obj ? (*obj)->answer : -1; }$/;"	f
none5	tests/test_methods_and_attributes.cpp	/^int none5(const std::shared_ptr<NoneTester> &obj) { return obj ? obj->answer : -1; }$/;"	f
nonsimple	include/pybind11/detail/common.h	/^        nonsimple_values_and_holders nonsimple;$/;"	m	union:instance::__anon12
nonsimple_values_and_holders	include/pybind11/detail/common.h	/^struct nonsimple_values_and_holders {$/;"	s
normalize_line_endings	tests/extra_python_package/test_files.py	/^def normalize_line_endings(value: bytes) -> bytes:$/;"	f
not_equal	include/pybind11/pytypes.h	/^    bool not_equal(object_api const &other) const { return rich_compare(other, Py_NE); }$/;"	f	class:object_api
np	tests/test_buffers.py	/^np = pytest.importorskip("numpy")$/;"	v
np	tests/test_eigen_matrix.py	/^np = pytest.importorskip("numpy")$/;"	v
np	tests/test_eigen_tensor.py	/^np = pytest.importorskip("numpy")$/;"	v
np	tests/test_numpy_array.py	/^np = pytest.importorskip("numpy")$/;"	v
np	tests/test_numpy_dtypes.py	/^np = pytest.importorskip("numpy")$/;"	v
np	tests/test_numpy_vectorize.py	/^np = pytest.importorskip("numpy")$/;"	v
np_complex256	tests/test_buffers.py	/^    np_complex256 = None$/;"	v
np_complex256	tests/test_buffers.py	/^    np_complex256 = getattr(np, *["complex256"] * 2)$/;"	v
np_float128	tests/test_buffers.py	/^    np_float128 = None$/;"	v
np_float128	tests/test_buffers.py	/^    np_float128 = getattr(np, *["float128"] * 2)$/;"	v
npy_api	include/pybind11/numpy.h	/^struct npy_api {$/;"	s
num	include/pybind11/numpy.h	/^    int num() const {$/;"	f
num	tests/test_pickling.cpp	/^    int num = 0;$/;"	m	struct:exercise_trampoline::SimpleBase	file:
numpy_internals	include/pybind11/numpy.h	/^struct numpy_internals {$/;"	s
numpy_type_info	include/pybind11/numpy.h	/^struct numpy_type_info {$/;"	s
obj	include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:handle::dict_readonly
obj	include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:handle::error_fetch_and_normalize::accessor
obj	include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:handle::sequence_slow_readwrite
obj_attr	include/pybind11/pytypes.h	/^struct obj_attr {$/;"	s	struct:handle::error_fetch_and_normalize
obj_class_name	include/pybind11/pytypes.h	/^inline const char *obj_class_name(PyObject *obj) {$/;"	f	class:handle
object	include/pybind11/pytypes.h	/^    object(const object &o) : handle(o) { inc_ref(); }$/;"	f	class:handle::object
object	include/pybind11/pytypes.h	/^    object(handle h, bool is_borrowed) : handle(h) {$/;"	f	class:handle::object
object	include/pybind11/pytypes.h	/^    object(handle h, borrowed_t) : handle(h) { inc_ref(); }$/;"	f	class:handle::object
object	include/pybind11/pytypes.h	/^    object(handle h, stolen_t) : handle(h) {}$/;"	f	class:handle::object
object	include/pybind11/pytypes.h	/^class object : public handle {$/;"	c	class:handle
object_api	include/pybind11/pytypes.h	/^class object_api : public pyobject_tag {$/;"	c
object_or_cast	include/pybind11/cast.h	/^object object_or_cast(T &&o) {$/;"	f
object_or_cast	include/pybind11/pytypes.h	/^inline handle object_or_cast(PyObject *ptr) { return ptr; }$/;"	f	struct:handle::error_fetch_and_normalize
obval	include/pybind11/numpy.h	/^    PyObject_VAR_HEAD char *obval;$/;"	m	struct:PyVoidScalarObject_Proxy
of	include/pybind11/pytypes.h	/^    static type of() {$/;"	f	class:handle::type
of	include/pybind11/pytypes.h	/^    static type of(handle h) { return type(type::handle_of(h), borrowed_t{}); }$/;"	f	class:handle::type
offset_at	tests/test_numpy_array.cpp	/^py::ssize_t offset_at(const arr &a, Ix... idx) {$/;"	f
offset_at_t	tests/test_numpy_array.cpp	/^py::ssize_t offset_at_t(const arr_t &a, Ix... idx) {$/;"	f
old	include/pybind11/iostream.h	/^    std::streambuf *old;$/;"	m	class:scoped_ostream_redirect
oldsize	tools/libsize.py	/^        oldsize = int(sf.readline())$/;"	v
one_char	include/pybind11/cast.h	/^    CharT one_char = 0;$/;"	m	struct:type_caster
one_to_n	tests/test_stl_binders.cpp	/^Container *one_to_n(int n) {$/;"	f
op_	include/pybind11/operators.h	/^struct op_ {$/;"	s
op_enable_if_hook	include/pybind11/operators.h	/^    static constexpr bool op_enable_if_hook = true;$/;"	m	struct:op_
op_impl	include/pybind11/operators.h	/^struct op_impl {};$/;"	s
operator !=	include/pybind11/detail/type_caster_base.h	/^        bool operator!=(const iterator &other) const { return curr.index != other.curr.index; }$/;"	f	struct:values_and_holders::iterator
operator !=	include/pybind11/pytypes.h	/^    friend bool operator!=(const It &a, const It &b) { return !(a == b); }$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator !=	include/pybind11/pytypes.h	/^    friend bool operator!=(const iterator &a, const iterator &b) { return a->ptr() != b->ptr(); }$/;"	f	class:handle::iterator
operator !=	tests/object.h	/^    bool operator!=(const T *ptr) const { return m_ptr != ptr; }$/;"	f	class:ref
operator !=	tests/object.h	/^    bool operator!=(const ref &r) const { return m_ptr != r.m_ptr; }$/;"	f	class:ref
operator !=	tests/test_operator_overloading.cpp	/^    bool operator!=(const Vector2 &v) const { return x != v.x || y != v.y; }$/;"	f	class:Vector2
operator &	tests/test_smart_ptr.cpp	/^    T **operator&() { throw std::logic_error("Call of overloaded operator& is not expected"); }$/;"	f	class:__anon9::shared_ptr_with_addressof_operator
operator &	tests/test_smart_ptr.cpp	/^    T **operator&() { throw std::logic_error("Call of overloaded operator& is not expected"); }$/;"	f	class:__anon9::unique_ptr_with_addressof_operator
operator ()	include/pybind11/cast.h	/^object object_api<Derived>::operator()(Args &&...args) const {$/;"	f	class:object_api
operator ()	include/pybind11/detail/common.h	/^    void operator()(T *) {}$/;"	f	struct:nodelete
operator ()	include/pybind11/detail/internals.h	/^    inline size_t operator()(const std::pair<const PyObject *, const char *> &v) const {$/;"	f	struct:override_hash
operator ()	include/pybind11/embed.h	/^    void operator()(wchar_t *ptr) const {$/;"	f	struct:wide_char_arg_deleter
operator ()	include/pybind11/pybind11.h	/^        char *operator()(const char *s) {$/;"	f	class:cpp_function::strdup_guard
operator ()	include/pybind11/pybind11.h	/^        void operator()(detail::function_record *rec) { destruct(rec, false); }$/;"	f	struct:cpp_function::InitializingFunctionRecordDeleter
operator ()	include/pybind11/pybind11.h	/^    result_type operator()(Iterator &it) const { return (*it).first; }$/;"	f	class:iterator_key_access
operator ()	include/pybind11/pybind11.h	/^    result_type operator()(Iterator &it) const { return (*it).second; }$/;"	f	class:iterator_value_access
operator ()	include/pybind11/pybind11.h	/^    result_type operator()(Iterator &it) const { return *it; }$/;"	f	struct:iterator_access
operator ()	include/pybind11/pybind11.h	/^    void operator()(const char *message) { PyErr_SetString(m_ptr, message); }$/;"	f	class:exception
operator ()	include/pybind11/stl.h	/^    result_type operator()(T &&src) const {$/;"	f	struct:variant_caster_visitor
operator ()	tests/test_operator_overloading.cpp	/^    size_t operator()(const Vector2 &) { return 4; }$/;"	f	struct:std::hash
operator ()	tests/test_operator_overloading.cpp	/^    std::size_t operator()(const HashMe &selector) const {$/;"	f	struct:std::hash
operator ()	tests/test_stl.cpp	/^    size_t operator()(const TplCtorClass &) const { return 0; }$/;"	f	struct:std::hash
operator *	include/pybind11/detail/common.h	/^    const std::vector<T> &operator*() const { return v; }$/;"	f	class:overload_cast_impl::any_container
operator *	include/pybind11/detail/common.h	/^    std::vector<T> &operator*() { return v; }$/;"	f	class:overload_cast_impl::any_container
operator *	include/pybind11/detail/type_caster_base.h	/^        value_and_holder &operator*() { return curr; }$/;"	f	struct:values_and_holders::iterator
operator *	include/pybind11/pytypes.h	/^    kwargs_proxy operator*() const { return kwargs_proxy(*this); }$/;"	f	class:handle::args_proxy
operator *	include/pybind11/pytypes.h	/^    reference operator*() const { return Policy::dereference(); }$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator *	include/pybind11/pytypes.h	/^    reference operator*() const {$/;"	f	class:handle::iterator
operator *	include/pybind11/pytypes.h	/^args_proxy object_api<D>::operator*() const {$/;"	f	class:handle::object_api
operator *	tests/object.h	/^    T &operator*() { return *m_ptr; }$/;"	f	class:ref
operator *	tests/object.h	/^    const T &operator*() const { return *m_ptr; }$/;"	f	class:ref
operator *	tests/test_operator_overloading.cpp	/^    Vector2 operator*(const Vector2 &v) const { return Vector2(x * v.x, y * v.y); }$/;"	f	class:Vector2
operator *	tests/test_operator_overloading.cpp	/^    Vector2 operator*(float value) const { return Vector2(x * value, y * value); }$/;"	f	class:Vector2
operator *	tests/test_operator_overloading.cpp	/^    friend Vector2 operator*(float f, const Vector2 &v) { return Vector2(f * v.x, f * v.y); }$/;"	f	class:Vector2
operator *	tests/test_sequences_and_iterators.cpp	/^    T operator*() const { return T(*ptr_); }$/;"	f	class:NonRefIterator
operator *	tests/test_sequences_and_iterators.cpp	/^    const T &operator*() const { return *ptr_; }$/;"	f	class:NonZeroIterator
operator *=	tests/test_operator_overloading.cpp	/^    Vector2 &operator*=(const Vector2 &v) {$/;"	f	class:Vector2
operator *=	tests/test_operator_overloading.cpp	/^    Vector2 &operator*=(float v) {$/;"	f	class:Vector2
operator +	include/pybind11/detail/descr.h	/^constexpr descr<N1 + N2, Ts1..., Ts2...> operator+(const descr<N1, Ts1...> &a,$/;"	f
operator +	include/pybind11/pytypes.h	/^    friend It operator+(const It &a, difference_type n) {$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator +	include/pybind11/pytypes.h	/^    friend It operator+(difference_type n, const It &b) { return b + n; }$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator +	tests/test_operator_overloading.cpp	/^    Vector2 operator+(const Vector2 &v) const { return Vector2(x + v.x, y + v.y); }$/;"	f	class:Vector2
operator +	tests/test_operator_overloading.cpp	/^    Vector2 operator+(float value) const { return Vector2(x + value, y + value); }$/;"	f	class:Vector2
operator +	tests/test_operator_overloading.cpp	/^    friend Vector2 operator+(float f, const Vector2 &v) { return Vector2(f + v.x, f + v.y); }$/;"	f	class:Vector2
operator +	tests/test_operator_overloading.cpp	/^int operator+(const C1 &, const C1 &) { return 11; }$/;"	f
operator +	tests/test_operator_overloading.cpp	/^int operator+(const C1 &, const C2 &) { return 12; }$/;"	f
operator +	tests/test_operator_overloading.cpp	/^int operator+(const C2 &, const C1 &) { return 21; }$/;"	f
operator +	tests/test_operator_overloading.cpp	/^int operator+(const C2 &, const C2 &) { return 22; }$/;"	f
operator ++	include/pybind11/detail/type_caster_base.h	/^        iterator &operator++() {$/;"	f	struct:values_and_holders::iterator
operator ++	include/pybind11/pytypes.h	/^    It &operator++() {$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator ++	include/pybind11/pytypes.h	/^    It operator++(int) {$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator ++	include/pybind11/pytypes.h	/^    iterator &operator++() {$/;"	f	class:handle::iterator
operator ++	include/pybind11/pytypes.h	/^    iterator operator++(int) {$/;"	f	class:handle::iterator
operator ++	tests/test_sequences_and_iterators.cpp	/^    NonRefIterator &operator++() {$/;"	f	class:NonRefIterator
operator ++	tests/test_sequences_and_iterators.cpp	/^    NonZeroIterator &operator++() {$/;"	f	class:NonZeroIterator
operator +=	include/pybind11/pytypes.h	/^    It &operator+=(difference_type n) {$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator +=	tests/test_operator_overloading.cpp	/^    Vector2 &operator+=(const Vector2 &v) {$/;"	f	class:Vector2
operator ,	include/pybind11/detail/descr.h	/^constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,$/;"	f
operator -	include/pybind11/pytypes.h	/^    friend It operator-(const It &a, difference_type n) {$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator -	include/pybind11/pytypes.h	/^    friend difference_type operator-(const It &a, const It &b) { return a.distance_to(b); }$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator -	tests/test_operator_overloading.cpp	/^    Vector2 operator-() const { return Vector2(-x, -y); }$/;"	f	class:Vector2
operator -	tests/test_operator_overloading.cpp	/^    Vector2 operator-(const Vector2 &v) const { return Vector2(x - v.x, y - v.y); }$/;"	f	class:Vector2
operator -	tests/test_operator_overloading.cpp	/^    Vector2 operator-(float value) const { return Vector2(x - value, y - value); }$/;"	f	class:Vector2
operator -	tests/test_operator_overloading.cpp	/^    friend Vector2 operator-(float f, const Vector2 &v) { return Vector2(f - v.x, f - v.y); }$/;"	f	class:Vector2
operator --	include/pybind11/pytypes.h	/^    It &operator--() {$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator --	include/pybind11/pytypes.h	/^    It operator--(int) {$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator -=	include/pybind11/pytypes.h	/^    It &operator-=(difference_type n) {$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator -=	tests/test_operator_overloading.cpp	/^    Vector2 &operator-=(const Vector2 &v) {$/;"	f	class:Vector2
operator ->	include/pybind11/detail/common.h	/^    const std::vector<T> *operator->() const { return &v; }$/;"	f	class:overload_cast_impl::any_container
operator ->	include/pybind11/detail/common.h	/^    std::vector<T> *operator->() { return &v; }$/;"	f	class:overload_cast_impl::any_container
operator ->	include/pybind11/detail/type_caster_base.h	/^        value_and_holder *operator->() { return &curr; }$/;"	f	struct:values_and_holders::iterator
operator ->	include/pybind11/pytypes.h	/^    pointer operator->() const { return **this; }$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator ->	include/pybind11/pytypes.h	/^    pointer operator->() const {$/;"	f	class:handle::iterator
operator ->	tests/object.h	/^    T *operator->() { return m_ptr; }$/;"	f	class:ref
operator ->	tests/object.h	/^    const T *operator->() const { return m_ptr; }$/;"	f	class:ref
operator /	tests/test_operator_overloading.cpp	/^    Vector2 operator\/(const Vector2 &v) const { return Vector2(x \/ v.x, y \/ v.y); }$/;"	f	class:Vector2
operator /	tests/test_operator_overloading.cpp	/^    Vector2 operator\/(float value) const { return Vector2(x \/ value, y \/ value); }$/;"	f	class:Vector2
operator /	tests/test_operator_overloading.cpp	/^    friend Vector2 operator\/(float f, const Vector2 &v) { return Vector2(f \/ v.x, f \/ v.y); }$/;"	f	class:Vector2
operator /=	tests/test_operator_overloading.cpp	/^    Vector2 &operator\/=(const Vector2 &v) {$/;"	f	class:Vector2
operator /=	tests/test_operator_overloading.cpp	/^    Vector2 &operator\/=(float v) {$/;"	f	class:Vector2
operator <	include/pybind11/pytypes.h	/^    bool operator<(object_api const &other) const { return rich_compare(other, Py_LT); }$/;"	f	class:object_api
operator <	include/pybind11/pytypes.h	/^    friend bool operator<(const It &a, const It &b) { return b - a > 0; }$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator <<	include/pybind11/stl.h	/^inline std::ostream &operator<<(std::ostream &os, const handle &obj) {$/;"	f
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const ArrayStruct &v) {$/;"	f	class:E1	file:
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const ComplexStruct &v) {$/;"	f
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const EnumStruct &v) {$/;"	f	class:E1	file:
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const NestedStruct &v) {$/;"	f
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const PackedStruct &v) {$/;"	f
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const SimpleStruct &v) {$/;"	f
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const StringStruct &v) {$/;"	f	class:E1	file:
operator <<	tests/test_stl_binders.cpp	/^std::ostream &operator<<(std::ostream &s, El const &v) {$/;"	f
operator <=	include/pybind11/pytypes.h	/^    bool operator<=(object_api const &other) const { return rich_compare(other, Py_LE); }$/;"	f	class:object_api
operator <=	include/pybind11/pytypes.h	/^    friend bool operator<=(const It &a, const It &b) { return !(a > b); }$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator =	include/pybind11/cast.h	/^arg_v arg::operator=(T &&value) const {$/;"	f	class:arg
operator =	include/pybind11/pytypes.h	/^    object &operator=(const object &other) {$/;"	f	class:handle::object
operator =	include/pybind11/pytypes.h	/^    void operator=(T &&value) & {$/;"	f	class:handle::error_fetch_and_normalize::accessor
operator =	include/pybind11/pytypes.h	/^    void operator=(T &&value) && {$/;"	f	class:handle::error_fetch_and_normalize::accessor
operator =	include/pybind11/pytypes.h	/^    void operator=(const accessor &a) & { operator=(handle(a)); }$/;"	f	class:handle::error_fetch_and_normalize::accessor
operator =	include/pybind11/pytypes.h	/^    void operator=(const accessor &a) && { std::move(*this).operator=(handle(a)); }$/;"	f	class:handle::error_fetch_and_normalize::accessor
operator =	tests/object.h	/^    ref &operator=(T *ptr) {$/;"	f	class:ref
operator =	tests/object.h	/^    ref &operator=(const ref &r) {$/;"	f	class:ref
operator =	tests/test_copy_move.cpp	/^    CopyOnlyInt &operator=(const CopyOnlyInt &c) {$/;"	f	class:CopyOnlyInt
operator =	tests/test_copy_move.cpp	/^    MoveOrCopyInt &operator=(const MoveOrCopyInt &c) {$/;"	f	class:MoveOrCopyInt
operator =	tests/test_custom_type_casters.cpp	/^    DestructionTester &operator=(const DestructionTester &) {$/;"	f	class:DestructionTester
operator =	tests/test_methods_and_attributes.cpp	/^    void operator=(const ExampleMandA &e) {$/;"	f	class:ExampleMandA
operator =	tests/test_operator_overloading.cpp	/^    Vector2 &operator=(const Vector2 &v) {$/;"	f	class:Vector2
operator =	tests/test_stl.cpp	/^    ReferenceSensitiveOptional &operator=(T &&value) {$/;"	f	class:ReferenceSensitiveOptional
operator =	tests/test_stl.cpp	/^    ReferenceSensitiveOptional &operator=(const T &value) {$/;"	f	class:ReferenceSensitiveOptional
operator ==	include/pybind11/detail/type_caster_base.h	/^        bool operator==(const iterator &other) const { return curr.index == other.curr.index; }$/;"	f	struct:values_and_holders::iterator
operator ==	include/pybind11/pytypes.h	/^    friend bool operator==(const It &a, const It &b) { return a.equal(b); }$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator ==	include/pybind11/pytypes.h	/^    friend bool operator==(const iterator &a, const iterator &b) { return a->ptr() == b->ptr(); }$/;"	f	class:handle::iterator
operator ==	tests/object.h	/^    bool operator==(const T *ptr) const { return m_ptr == ptr; }$/;"	f	class:ref
operator ==	tests/object.h	/^    bool operator==(const ref &r) const { return m_ptr == r.m_ptr; }$/;"	f	class:ref
operator ==	tests/test_operator_overloading.cpp	/^    bool operator==(const Vector2 &v) const { return x == v.x && y == v.y; }$/;"	f	class:Vector2
operator ==	tests/test_operator_overloading.cpp	/^bool operator==(const HashMe &lhs, const HashMe &rhs) { return lhs.member == rhs.member; }$/;"	f
operator ==	tests/test_sequences_and_iterators.cpp	/^    bool operator==(const NonRefIterator &other) const { return ptr_ == other.ptr_; }$/;"	f	class:NonRefIterator
operator ==	tests/test_sequences_and_iterators.cpp	/^bool operator==(const NonZeroIterator<std::pair<A, B>> &it, const NonZeroSentinel &) {$/;"	f
operator ==	tests/test_stl.cpp	/^    bool operator==(const TplCtorClass &) const { return true; }$/;"	f	struct:TplCtorClass
operator >	include/pybind11/pytypes.h	/^    bool operator>(object_api const &other) const { return rich_compare(other, Py_GT); }$/;"	f	class:object_api
operator >	include/pybind11/pytypes.h	/^    friend bool operator>(const It &a, const It &b) { return b < a; }$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator >=	include/pybind11/pytypes.h	/^    bool operator>=(object_api const &other) const { return rich_compare(other, Py_GE); }$/;"	f	class:object_api
operator >=	include/pybind11/pytypes.h	/^    friend bool operator>=(const It &a, const It &b) { return !(a < b); }$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator CharT &	include/pybind11/cast.h	/^    explicit operator CharT &() {$/;"	f	struct:type_caster
operator CharT *	include/pybind11/cast.h	/^    explicit operator CharT *() {$/;"	f	struct:type_caster
operator ConstRefCasted &	tests/test_builtin_casters.cpp	/^    explicit operator ConstRefCasted &() {$/;"	f	class:type_caster
operator ConstRefCasted &&	tests/test_builtin_casters.cpp	/^    explicit operator ConstRefCasted &&() {$/;"	f	class:type_caster
operator ConstRefCasted *	tests/test_builtin_casters.cpp	/^    explicit operator ConstRefCasted *() {$/;"	f	class:type_caster
operator CopyOnlyInt &	tests/test_copy_move.cpp	/^    explicit operator CopyOnlyInt &() { return value; }$/;"	f	struct:type_caster
operator CopyOnlyInt *	tests/test_copy_move.cpp	/^    explicit operator CopyOnlyInt *() { return &value; }$/;"	f	struct:type_caster
operator MapType &	include/pybind11/eigen/tensor.h	/^    explicit operator MapType &() { return *value; }$/;"	f	struct:type_caster
operator MapType &&	include/pybind11/eigen/tensor.h	/^    explicit operator MapType &&() && { return std::move(*value); }$/;"	f	struct:type_caster
operator MapType *	include/pybind11/eigen/tensor.h	/^    explicit operator MapType *() { return value.get(); }$/;"	f	struct:type_caster
operator PyObject *	include/pybind11/type_caster_pyobject_ptr.h	/^    explicit operator PyObject *() { return value.ptr(); }$/;"	f	class:type_caster
operator PyObject *	tests/test_pytypes.cpp	/^    operator PyObject *() \/* *\/ { return Py_None; } \/\/ NOLINT(google-explicit-constructor)$/;"	f	struct:handle_from_move_only_type_with_operator_PyObject::operator_ncnst
operator PyObject *	tests/test_pytypes.cpp	/^    operator PyObject *() const { return Py_None; } \/\/ NOLINT(google-explicit-constructor)$/;"	f	struct:handle_from_move_only_type_with_operator_PyObject::operator_const
operator T	include/pybind11/pytypes.h	/^    operator T() const {$/;"	f	class:handle::int_
operator T *	include/pybind11/pytypes.h	/^    operator T *() const { \/\/ NOLINT(google-explicit-constructor)$/;"	f	class:handle::capsule
operator T *	tests/object.h	/^    explicit operator T *() { return m_ptr; }$/;"	f	class:ref
operator Type &	include/pybind11/eigen/matrix.h	/^    operator Type &() { return *ref; }$/;"	f	struct:type_caster
operator Type &	include/pybind11/eigen/matrix.h	/^    operator Type &() { return value; }$/;"	f	struct:type_caster
operator Type &&	include/pybind11/eigen/matrix.h	/^    operator Type &&() && { return std::move(value); }$/;"	f	struct:type_caster
operator Type *	include/pybind11/eigen/matrix.h	/^    operator Type *() { return &value; }$/;"	f	struct:type_caster
operator Type *	include/pybind11/eigen/matrix.h	/^    operator Type *() { return ref.get(); }$/;"	f	struct:type_caster
operator []	include/pybind11/pytypes.h	/^    detail::item_accessor operator[](T &&o) const {$/;"	f	class:handle::list
operator []	include/pybind11/pytypes.h	/^    detail::item_accessor operator[](T &&o) const {$/;"	f	class:handle::sequence
operator []	include/pybind11/pytypes.h	/^    detail::item_accessor operator[](T &&o) const {$/;"	f	class:handle::tuple
operator []	include/pybind11/pytypes.h	/^    detail::list_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:handle::list
operator []	include/pybind11/pytypes.h	/^    detail::sequence_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:handle::sequence
operator []	include/pybind11/pytypes.h	/^    detail::tuple_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:handle::tuple
operator []	include/pybind11/pytypes.h	/^    reference operator[](difference_type n) const { return *(*this + n); }$/;"	f	class:handle::error_fetch_and_normalize::generic_iterator
operator []	include/pybind11/pytypes.h	/^item_accessor object_api<D>::operator[](const char *key) const {$/;"	f	class:handle::object_api
operator []	include/pybind11/pytypes.h	/^item_accessor object_api<D>::operator[](handle key) const {$/;"	f	class:handle::object_api
operator []	include/pybind11/pytypes.h	/^item_accessor object_api<D>::operator[](object &&key) const {$/;"	f	class:handle::object_api
operator bool	include/pybind11/detail/type_caster_base.h	/^    explicit operator bool() const { return value_ptr() != nullptr; }$/;"	f	struct:value_and_holder
operator bool	include/pybind11/eigen/matrix.h	/^    operator bool() const { return conformable; }$/;"	f	struct:EigenConformable
operator bool	include/pybind11/pytypes.h	/^    operator bool() const { return (m_ptr != nullptr) && PyLong_AsLong(m_ptr) != 0; }$/;"	f	class:handle::bool_
operator const ConstRefCasted &	tests/test_builtin_casters.cpp	/^    explicit operator const ConstRefCasted &() {$/;"	f	class:type_caster
operator const ConstRefCasted *	tests/test_builtin_casters.cpp	/^    explicit operator const ConstRefCasted *() {$/;"	f	class:type_caster
operator double	include/pybind11/pytypes.h	/^    operator double() const { return (double) PyFloat_AsDouble(m_ptr); }$/;"	f	class:handle::float_
operator enable_if_t<std::is_same<T, accessor_policies::generic_item>::value, bool>	include/pybind11/pytypes.h	/^    operator enable_if_t<std::is_same<T, accessor_policies::generic_item>::value, bool>() const {$/;"	f	class:handle::error_fetch_and_normalize::accessor
operator enable_if_t<std::is_same<T, accessor_policies::str_attr>::value || std::is_same<T, accessor_policies::obj_attr>::value, bool>	include/pybind11/pytypes.h	/^    operator enable_if_t<std::is_same<T, accessor_policies::str_attr>::value$/;"	f	class:handle::error_fetch_and_normalize::accessor
operator float	include/pybind11/pytypes.h	/^    operator float() const { return (float) PyFloat_AsDouble(m_ptr); }$/;"	f	class:handle::float_
operator holder_type &	include/pybind11/cast.h	/^    explicit operator holder_type &() { return holder; }$/;"	f	struct:copyable_holder_caster
operator holder_type *	include/pybind11/cast.h	/^    explicit operator holder_type *() { return std::addressof(holder); }$/;"	f	struct:copyable_holder_caster
operator itype &	include/pybind11/detail/type_caster_base.h	/^    operator itype &() {$/;"	f	class:type_caster_base
operator itype *	include/pybind11/detail/type_caster_base.h	/^    operator itype *() { return (type *) value; }$/;"	f	class:type_caster_base
operator object	include/pybind11/pytypes.h	/^    operator object() const { return get_cache(); }$/;"	f	class:handle::error_fetch_and_normalize::accessor
operator std::reference_wrapper<type>	include/pybind11/cast.h	/^    explicit operator std::reference_wrapper<type>() { return cast_op<type &>(subcaster); }$/;"	f	class:type_caster
operator std::string	include/pybind11/pytypes.h	/^    explicit operator std::string() const {$/;"	f	class:handle::bytearray
operator std::string	include/pybind11/pytypes.h	/^    operator std::string() const { return string_op<std::string>(); }$/;"	f	class:handle::bytes
operator std::string	include/pybind11/pytypes.h	/^    operator std::string() const {$/;"	f	class:handle::str
operator std::string_view	include/pybind11/pytypes.h	/^    operator std::string_view() const { return string_op<std::string_view>(); }$/;"	f	class:handle::bytes
operator std::vector<T> &&	include/pybind11/detail/common.h	/^    operator std::vector<T> &&() && { return std::move(v); }$/;"	f	class:overload_cast_impl::any_container
operator type	include/pybind11/cast.h	/^    explicit operator type() & { return implicit_cast(indices{}); }$/;"	f	class:tuple_caster
operator type	include/pybind11/cast.h	/^    explicit operator type() && { return std::move(*this).implicit_cast(indices{}); }$/;"	f	class:tuple_caster
operator type &	include/pybind11/cast.h	/^    explicit operator type &() { return *(static_cast<type *>(this->value)); }$/;"	f	struct:copyable_holder_caster
operator type *	include/pybind11/cast.h	/^    explicit operator type *() { return this->value; }$/;"	f	struct:copyable_holder_caster
operator value_and_holder &	include/pybind11/detail/init.h	/^    explicit operator value_and_holder &() { return *value; }$/;"	f	class:type_caster
operator void *&	include/pybind11/cast.h	/^    explicit operator void *&() { return value; }$/;"	f	class:type_caster
operator_const	tests/test_pytypes.cpp	/^struct operator_const {$/;"	s	namespace:handle_from_move_only_type_with_operator_PyObject	file:
operator_ncnst	tests/test_pytypes.cpp	/^struct operator_ncnst {$/;"	s	namespace:handle_from_move_only_type_with_operator_PyObject	file:
operator_new	include/pybind11/attr.h	/^    void *(*operator_new)(size_t) = nullptr;$/;"	m	struct:type_record
operator_new	include/pybind11/detail/internals.h	/^    void *(*operator_new)(size_t);$/;"	m	struct:type_info
optional_caster	include/pybind11/stl.h	/^struct optional_caster {$/;"	s
options	include/pybind11/options.h	/^    options() : previous_state(global_state()) {}$/;"	f	class:options
options	include/pybind11/options.h	/^class options {$/;"	c
other	include/pybind11/detail/internals.h	/^    internals &operator=(const internals &other) = delete;$/;"	m	struct:internals
other	include/pybind11/detail/internals.h	/^    internals(const internals &other) = delete;$/;"	m	struct:internals
other	include/pybind11/iostream.h	/^    scoped_ostream_redirect(scoped_ostream_redirect &&other) = default;$/;"	m	class:scoped_ostream_redirect
other	tests/test_copy_move.cpp	/^    lacking_copy_ctor(const lacking_copy_ctor &other) = delete;$/;"	m	struct:lacking_copy_ctor	file:
other	tests/test_copy_move.cpp	/^    lacking_move_ctor(const lacking_move_ctor &other) = delete;$/;"	m	struct:lacking_move_ctor	file:
other	tests/test_copy_move.cpp	/^    lacking_move_ctor(lacking_move_ctor &&other) = delete;$/;"	m	struct:lacking_move_ctor	file:
other_lib	tests/test_custom_type_casters.cpp	/^namespace other_lib {$/;"	n	file:
outer_stride	include/pybind11/eigen/matrix.h	/^        outer_stride = if_zero < StrideType::OuterStrideAtCompileTime,$/;"	m	struct:EigenProps
overload_cast	include/pybind11/detail/common.h	/^struct overload_cast {$/;"	s	struct:overload_cast_impl
overload_cast_impl	include/pybind11/detail/common.h	/^struct overload_cast_impl {$/;"	s
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded() { return "()"; }$/;"	f	class:ExampleMandA
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, float) const { return "(float, float) const"; }$/;"	f	class:ExampleMandA
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, float) { return "(float, float)"; }$/;"	f	class:ExampleMandA
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, int) const { return "(float, int) const"; }$/;"	f	class:ExampleMandA
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, int) { return "(float, int)"; }$/;"	f	class:ExampleMandA
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int) const { return "(int) const"; }$/;"	f	class:ExampleMandA
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int) { return "(int)"; }$/;"	f	class:ExampleMandA
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, float) const { return "(int, float) const"; }$/;"	f	class:ExampleMandA
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, float) { return "(int, float)"; }$/;"	f	class:ExampleMandA
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, int) const { return "(int, int) const"; }$/;"	f	class:ExampleMandA
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, int) { return "(int, int)"; }$/;"	f	class:ExampleMandA
overloaded	tests/test_methods_and_attributes.cpp	/^    static py::str overloaded(float) { return "static float"; }$/;"	f	class:ExampleMandA
override	include/pybind11/pytypes.h	/^    const char *what() const noexcept override;$/;"	m	class:handle::error_fetch_and_normalize::error_already_set
override_hash	include/pybind11/detail/internals.h	/^struct override_hash {$/;"	s
override_unused	include/pybind11/cast.h	/^struct override_unused {};$/;"	s
owned	include/pybind11/detail/common.h	/^    bool owned : 1;$/;"	m	struct:instance
ownview	include/pybind11/buffer_info.h	/^    bool ownview = false;$/;"	m	struct:buffer_info
pack_element	include/pybind11/detail/common.h	/^struct pack_element {$/;"	s
pack_element	include/pybind11/detail/common.h	/^struct pack_element<0, T, Ts...> {$/;"	s
packed_dtype	tests/test_numpy_dtypes.py	/^def packed_dtype():$/;"	f
packed_dtype_fmt	tests/test_numpy_dtypes.py	/^def packed_dtype_fmt():$/;"	f
padding	tests/test_smart_ptr.cpp	/^    uint64_t padding[10];$/;"	m	class:__anon9::huge_unique_ptr	file:
parent	include/pybind11/cast.h	/^    handle parent;$/;"	m	struct:function_call
parent	include/pybind11/detail/type_caster_base.h	/^    loader_life_support *parent = nullptr;$/;"	m	class:loader_life_support
parent	include/pybind11/stl.h	/^    handle parent;$/;"	m	struct:variant_caster_visitor
partial_dtype_fmt	tests/test_numpy_dtypes.py	/^def partial_dtype_fmt():$/;"	f
partial_ld_offset	tests/test_numpy_dtypes.py	/^def partial_ld_offset():$/;"	f
partial_nested_fmt	tests/test_numpy_dtypes.py	/^def partial_nested_fmt():$/;"	f
path_caster	include/pybind11/stl/filesystem.h	/^struct path_caster {$/;"	s
patients	include/pybind11/detail/internals.h	/^    std::unordered_map<const PyObject *, std::vector<PyObject *>> patients;$/;"	m	struct:internals
pets	tests/local_bindings.h	/^namespace pets {$/;"	n
pickle	include/pybind11/pybind11.h	/^detail::initimpl::pickle_factory<GetState, SetState> pickle(GetState &&g, SetState &&s) {$/;"	f
pickle_factory	include/pybind11/detail/init.h	/^    pickle_factory(Get get, Set set) : get(std::forward<Get>(get)), set(std::forward<Set>(set)) {}$/;"	f	struct:pickle_factory
pickle_factory	include/pybind11/detail/init.h	/^struct pickle_factory<Get, Set, RetState(Self), NewInstance(ArgState)> {$/;"	s
pkgconfig_files	tests/extra_python_package/test_files.py	/^pkgconfig_files = {$/;"	v
platform_lookup	include/pybind11/numpy.h	/^constexpr int platform_lookup() {$/;"	f
platform_lookup	include/pybind11/numpy.h	/^constexpr int platform_lookup(int I, Ints... Is) {$/;"	f
plus_impl	include/pybind11/detail/descr.h	/^constexpr descr<N1 + N2, Ts1..., Ts2...> plus_impl(const descr<N1, Ts1...> &a,$/;"	f
policy	include/pybind11/attr.h	/^    return_value_policy policy = return_value_policy::automatic;$/;"	m	struct:function_record
policy	include/pybind11/cast.h	/^    static return_value_policy policy(return_value_policy p) { return p; }$/;"	f	struct:return_value_policy_override
policy	include/pybind11/cast.h	/^    static return_value_policy policy(return_value_policy p) {$/;"	f	struct:return_value_policy_override
policy	include/pybind11/stl.h	/^    return_value_policy policy;$/;"	m	struct:variant_caster_visitor
polymorphic_type_hook	include/pybind11/detail/type_caster_base.h	/^struct polymorphic_type_hook : public polymorphic_type_hook_base<itype> {};$/;"	s
polymorphic_type_hook	tests/test_tagbased_polymorphic.cpp	/^struct polymorphic_type_hook<itype, detail::enable_if_t<std::is_base_of<Animal, itype>::value>> {$/;"	s	namespace:Animal::PYBIND11_NAMESPACE	file:
polymorphic_type_hook_base	include/pybind11/detail/type_caster_base.h	/^struct polymorphic_type_hook_base {$/;"	s
polymorphic_type_hook_base	include/pybind11/detail/type_caster_base.h	/^struct polymorphic_type_hook_base<itype, detail::enable_if_t<std::is_polymorphic<itype>::value>> {$/;"	s
pos	include/pybind11/pytypes.h	/^    ssize_t pos = -1;$/;"	m	class:handle::dict_readonly
pos_only	include/pybind11/cast.h	/^struct pos_only {};$/;"	s
postcall	include/pybind11/attr.h	/^    static void postcall(function_call &, handle) {}$/;"	f	struct:process_attribute
postcall	include/pybind11/attr.h	/^    static void postcall(function_call &, handle) {}$/;"	f	struct:process_attribute_default
postcall	include/pybind11/attr.h	/^    static void postcall(function_call &call, handle fn_ret) {$/;"	f	struct:process_attributes
postcall	include/pybind11/attr.h	/^    static void postcall(function_call &call, handle ret) {$/;"	f	struct:process_attribute
pr4220_tripped_over_this	tests/test_class.cpp	/^namespace pr4220_tripped_over_this { \/\/ PR #4227$/;"	n	namespace:test_class	file:
precall	include/pybind11/attr.h	/^    static void precall(function_call &) {}$/;"	f	struct:process_attribute
precall	include/pybind11/attr.h	/^    static void precall(function_call &) {}$/;"	f	struct:process_attribute_default
precall	include/pybind11/attr.h	/^    static void precall(function_call &call) {$/;"	f	struct:process_attribute
precall	include/pybind11/attr.h	/^    static void precall(function_call &call) {$/;"	f	struct:process_attributes
precheck_interpreter	include/pybind11/embed.h	/^inline void precheck_interpreter() {$/;"	f
prefix	tools/check-style.sh	/^function prefix(filename, lineno) {$/;"	f
prepare	docs/conf.py	/^def prepare(app):$/;"	f
prepend	include/pybind11/attr.h	/^    bool prepend : 1;$/;"	m	struct:function_record
prepend	include/pybind11/attr.h	/^struct prepend {};$/;"	s
previous_state	include/pybind11/options.h	/^    state previous_state;$/;"	m	class:options
primary_domain	docs/conf.py	/^primary_domain = "cpp"$/;"	v
print	include/pybind11/pybind11.h	/^PYBIND11_NOINLINE void print(const tuple &args, const dict &kwargs) {$/;"	f
print	include/pybind11/pybind11.h	/^void print(Args &&...args) {$/;"	f
print_bytes	tests/test_constants_and_functions.cpp	/^std::string print_bytes(const py::bytes &bytes) {$/;"	f
print_constr_details	tests/constructor_stats.h	/^void print_constr_details(T *inst, const std::string &action, Output &&...output) {$/;"	f
print_copy_assigned	tests/constructor_stats.h	/^void print_copy_assigned(T *inst, Values &&...values) {$/;"	f
print_copy_created	tests/constructor_stats.h	/^void print_copy_created(T *inst,$/;"	f
print_created	tests/constructor_stats.h	/^void print_created(T *inst, Values &&...values) {$/;"	f
print_default_created	tests/constructor_stats.h	/^void print_default_created(T *inst, Values &&...values) {$/;"	f
print_destroyed	tests/constructor_stats.h	/^void print_destroyed(T *inst, Values &&...values) { \/\/ Prints but doesn't store given values$/;"	f
print_includes	pybind11/__main__.py	/^def print_includes() -> None:$/;"	f
print_movable	tests/test_virtual_functions.cpp	/^    std::string print_movable(int a, int b) { return get_movable(a, b).get_value(); }$/;"	f	class:NCVirt
print_move_assigned	tests/constructor_stats.h	/^void print_move_assigned(T *inst, Values &&...values) {$/;"	f
print_move_created	tests/constructor_stats.h	/^void print_move_created(T *inst,$/;"	f
print_nc	tests/test_virtual_functions.cpp	/^    std::string print_nc(int a, int b) { return get_noncopyable(a, b).get_value(); }$/;"	f	class:NCVirt
print_recarray	tests/test_numpy_dtypes.cpp	/^py::list print_recarray(py::array_t<S, 0> arr) {$/;"	f	class:E1	file:
print_values	tests/constructor_stats.h	/^void print_values(T *inst, Values &&...values) {$/;"	f
private_ctr_tag	include/pybind11/buffer_info.h	/^    struct private_ctr_tag {};$/;"	s	struct:buffer_info
process	include/pybind11/cast.h	/^    void process(list & \/*args_list*\/, arg_v a) {$/;"	f	class:unpacking_collector
process	include/pybind11/cast.h	/^    void process(list & \/*args_list*\/, detail::kwargs_proxy kp) {$/;"	f	class:unpacking_collector
process	include/pybind11/cast.h	/^    void process(list &args_list, T &&x) {$/;"	f	class:unpacking_collector
process	include/pybind11/cast.h	/^    void process(list &args_list, detail::args_proxy ap) {$/;"	f	class:unpacking_collector
process_attribute	include/pybind11/attr.h	/^struct process_attribute<T, enable_if_t<is_pyobject<T>::value>>$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<arg> : process_attribute_default<arg> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<arg_v> : process_attribute_default<arg_v> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<arithmetic> : process_attribute_default<arithmetic> {};$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<base<T>> : process_attribute_default<base<T>> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<buffer_protocol> : process_attribute_default<buffer_protocol> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<call_guard<Ts...>> : process_attribute_default<call_guard<Ts...>> {};$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<char *> : process_attribute<const char *> {};$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<const char *> : process_attribute_default<const char *> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<custom_type_setup> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<doc> : process_attribute_default<doc> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<dynamic_attr> : process_attribute_default<dynamic_attr> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<is_final> : process_attribute_default<is_final> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<is_method> : process_attribute_default<is_method> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<is_new_style_constructor>$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<is_operator> : process_attribute_default<is_operator> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<is_setter> : process_attribute_default<is_setter> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<keep_alive<Nurse, Patient>>$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<kw_only> : process_attribute_default<kw_only> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<metaclass> : process_attribute_default<metaclass> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<module_local> : process_attribute_default<module_local> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<multiple_inheritance> : process_attribute_default<multiple_inheritance> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<name> : process_attribute_default<name> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<pos_only> : process_attribute_default<pos_only> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<prepend> : process_attribute_default<prepend> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<return_value_policy> : process_attribute_default<return_value_policy> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<scope> : process_attribute_default<scope> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<sibling> : process_attribute_default<sibling> {$/;"	s
process_attribute_default	include/pybind11/attr.h	/^struct process_attribute_default {$/;"	s
process_attributes	include/pybind11/attr.h	/^struct process_attributes {$/;"	s
project	docs/conf.py	/^project = "pybind11"$/;"	v
ptr	include/pybind11/buffer_info.h	/^    void *ptr = nullptr;          \/\/ Pointer to the underlying storage$/;"	m	struct:buffer_info
ptr	include/pybind11/numpy.h	/^        Py_intptr_t *ptr;$/;"	m	struct:npy_api::PyArray_Dims
ptr	include/pybind11/pytypes.h	/^    PyObject *&ptr() { return m_ptr; }$/;"	f	class:handle
ptr	include/pybind11/pytypes.h	/^    PyObject **ptr;$/;"	m	class:handle::sequence_fast_readonly
ptr	include/pybind11/pytypes.h	/^    PyObject *ptr() const { return get_cache().ptr(); }$/;"	f	class:handle::error_fetch_and_normalize::accessor
ptr	include/pybind11/pytypes.h	/^    PyObject *ptr() const { return m_ptr; }$/;"	f	class:handle
ptr	tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> ptr;$/;"	m	class:__anon9::huge_unique_ptr	file:
ptr_	tests/test_sequences_and_iterators.cpp	/^    const T *ptr_;$/;"	m	class:NonRefIterator	file:
ptr_	tests/test_sequences_and_iterators.cpp	/^    const T *ptr_;$/;"	m	class:NonZeroIterator	file:
pure_compile_tests_for_handle_from_PyObject_pointers	tests/test_pytypes.cpp	/^void pure_compile_tests_for_handle_from_PyObject_pointers() {$/;"	f
pure_virtual	tests/test_virtual_functions.py	/^        def pure_virtual(self):$/;"	m	class:test_override.ExtendedExampleVirt
pure_virtual_func	tests/test_gil_scoped.py	/^    def pure_virtual_func(self):$/;"	m	class:ExtendedVirtClass
purr	tests/test_tagbased_polymorphic.cpp	/^    std::string purr() const { return "mrowr"; }$/;"	f	struct:Animal::Cat
purr	tests/test_tagbased_polymorphic.cpp	/^    std::string purr() const { return "mrrrRRRRRR"; }$/;"	f	struct:Animal::Panther
py	tests/test_custom_type_casters.cpp	/^namespace py {}$/;"	n	namespace:other_lib	file:
py_cast_VectorOwner_ptr	tests/test_vector_unique_ptr_member.cpp	/^py::object py_cast_VectorOwner_ptr(VectorOwner *ptr) { return py::cast(ptr); }$/;"	f
py_files	tests/extra_python_package/test_files.py	/^py_files = {$/;"	v
pybind11	tests/test_stl_binders.cpp	/^namespace pybind11 {$/;"	n	file:
pybind11	tests/test_vector_unique_ptr_member.cpp	/^namespace pybind11 {$/;"	n	file:
pybind11_clear	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_clear(PyObject *self) {$/;"	f
pybind11_fail	include/pybind11/detail/common.h	/^[[noreturn]] PYBIND11_NOINLINE void pybind11_fail(const char *reason) {$/;"	f
pybind11_fail	include/pybind11/detail/common.h	/^[[noreturn]] PYBIND11_NOINLINE void pybind11_fail(const std::string &reason) {$/;"	f
pybind11_getbuffer	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_getbuffer(PyObject *obj, Py_buffer *view, int flags) {$/;"	f
pybind11_meta_call	include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_meta_call(PyObject *type, PyObject *args, PyObject *kwargs) {$/;"	f
pybind11_meta_dealloc	include/pybind11/detail/class.h	/^extern "C" inline void pybind11_meta_dealloc(PyObject *obj) {$/;"	f
pybind11_meta_getattro	include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_meta_getattro(PyObject *obj, PyObject *name) {$/;"	f
pybind11_meta_setattro	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_meta_setattro(PyObject *obj, PyObject *name, PyObject *value) {$/;"	f
pybind11_object_dealloc	include/pybind11/detail/class.h	/^extern "C" inline void pybind11_object_dealloc(PyObject *self) {$/;"	f
pybind11_object_init	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_object_init(PyObject *self, PyObject *, PyObject *) {$/;"	f
pybind11_object_new	include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_object_new(PyTypeObject *type, PyObject *, PyObject *) {$/;"	f
pybind11_releasebuffer	include/pybind11/detail/class.h	/^extern "C" inline void pybind11_releasebuffer(PyObject *, Py_buffer *view) {$/;"	f
pybind11_static_get	include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_static_get(PyObject *self, PyObject * \/*ob*\/, PyObject *cls) {$/;"	f
pybind11_static_set	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_static_set(PyObject *self, PyObject *obj, PyObject *value) {$/;"	f
pybind11_tests	tests/test_methods_and_attributes.cpp	/^namespace pybind11_tests {$/;"	n	file:
pybind11_tests	tests/test_vector_unique_ptr_member.cpp	/^namespace pybind11_tests {$/;"	n	file:
pybind11_traverse	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_traverse(PyObject *self, visitproc visit, void *arg) {$/;"	f
pycatch	tests/test_exceptions.py	/^    def pycatch(exctype, f, *args):  # noqa: ARG001$/;"	f	function:test_nested_throws
pyflush	include/pybind11/iostream.h	/^    object pyflush;$/;"	m	class:pythonbuf
pyobject_caster	include/pybind11/cast.h	/^    pyobject_caster() : value() {}$/;"	f	struct:pyobject_caster
pyobject_caster	include/pybind11/cast.h	/^    pyobject_caster() : value(reinterpret_steal<type>(handle())) {}$/;"	f	struct:pyobject_caster
pyobject_caster	include/pybind11/cast.h	/^struct pyobject_caster {$/;"	s
pyobject_tag	include/pybind11/pytypes.h	/^class pyobject_tag {};$/;"	c
pytest_assertrepr_compare	tests/conftest.py	/^def pytest_assertrepr_compare(op, left, right):  # noqa: ARG001$/;"	f
pytest_configure	tests/conftest.py	/^def pytest_configure():$/;"	f
pytest_report_header	tests/conftest.py	/^def pytest_report_header(config):$/;"	f
pythonbuf	include/pybind11/iostream.h	/^    explicit pythonbuf(const object &pyostream, size_t buffer_size = 1024)$/;"	f	class:pythonbuf
pythonbuf	include/pybind11/iostream.h	/^class pythonbuf : public std::streambuf {$/;"	c
pywrite	include/pybind11/iostream.h	/^    object pywrite;$/;"	m	class:pythonbuf
raise_err	include/pybind11/detail/internals.h	/^inline bool raise_err(PyObject *exc_type, const char *msg) {$/;"	f
raise_from	include/pybind11/pytypes.h	/^inline void raise_from(PyObject *type, const char *message) {$/;"	f	struct:handle::error_fetch_and_normalize
raise_from	include/pybind11/pytypes.h	/^inline void raise_from(error_already_set &err, PyObject *type, const char *message) {$/;"	f	struct:handle::error_fetch_and_normalize
raw_bool	include/pybind11/pytypes.h	/^    static PyObject *raw_bool(PyObject *op) {$/;"	f	class:handle::bool_
raw_dict	include/pybind11/pytypes.h	/^    static PyObject *raw_dict(PyObject *op) {$/;"	f	class:handle::dict
raw_str	include/pybind11/pytypes.h	/^    static PyObject *raw_str(PyObject *op) {$/;"	f	class:handle::str
raw_weakref	include/pybind11/pytypes.h	/^    static PyObject *raw_weakref(PyObject *o) { return PyWeakref_NewRef(o, nullptr); }$/;"	f	class:handle::weakref
read_tz_file	tests/extra_python_package/test_files.py	/^def read_tz_file(tar: tarfile.TarFile, name: str) -> bytes:$/;"	f
readonly	include/pybind11/buffer_info.h	/^    bool readonly = false;        \/\/ flag to indicate if the underlying storage may be written to$/;"	m	struct:buffer_info
reason	tests/test_exceptions.py	/^    reason="PyErr_NormalizeException Segmentation fault",$/;"	v
recursive_bottom	include/pybind11/detail/type_caster_base.h	/^struct recursive_bottom {};$/;"	s
recursive_container_traits	include/pybind11/detail/type_caster_base.h	/^struct recursive_container_traits : impl_recursive_container_traits<Container> {};$/;"	s
recursive_container_traits	tests/test_stl_binders.cpp	/^struct recursive_container_traits<MutuallyRecursiveContainerPairMV, SFINAE> {$/;"	s	namespace:pybind11::detail	file:
recursive_container_traits	tests/test_stl_binders.cpp	/^struct recursive_container_traits<MutuallyRecursiveContainerPairVM, SFINAE> {$/;"	s	namespace:pybind11::detail	file:
redirect_stderr	include/pybind11/iostream.h	/^    std::unique_ptr<scoped_estream_redirect> redirect_stderr;$/;"	m	class:OstreamRedirect
redirect_stdout	include/pybind11/iostream.h	/^    std::unique_ptr<scoped_ostream_redirect> redirect_stdout;$/;"	m	class:OstreamRedirect
ref	include/pybind11/eigen/matrix.h	/^    std::unique_ptr<Type> ref;$/;"	m	struct:type_caster
ref	tests/object.h	/^    explicit ref(T *ptr) : m_ptr(ptr) {$/;"	f	class:ref
ref	tests/object.h	/^    ref() : m_ptr(nullptr) {$/;"	f	class:ref
ref	tests/object.h	/^    ref(const ref &r) : m_ptr(r.m_ptr) {$/;"	f	class:ref
ref	tests/object.h	/^class ref {$/;"	c
ref	tests/test_eigen_matrix.py	/^ref = np.array($/;"	v
refQualified	tests/test_methods_and_attributes.cpp	/^    void refQualified(int other) & { value += other; }$/;"	f	struct:RefQualified
ref_count	include/pybind11/pytypes.h	/^    int ref_count() const { return static_cast<int>(Py_REFCNT(derived().ptr())); }$/;"	f	class:object_api
ref_tag	tests/object.h	/^class ref_tag {};$/;"	c
refcount_1	tests/test_class.py	/^        refcount_1 = getrefcount(cls)$/;"	v	class:test_class_refcount.PyDog
refcount_2	tests/test_class.py	/^        refcount_2 = getrefcount(cls)$/;"	v	class:test_class_refcount.PyDog
refcount_3	tests/test_class.py	/^        refcount_3 = getrefcount(cls)$/;"	v	class:test_class_refcount.PyDog
reference	include/pybind11/detail/common.h	/^    reference,$/;"	m	class:return_value_policy
register_exception	include/pybind11/pybind11.h	/^register_exception(handle scope, const char *name, handle base = PyExc_Exception) {$/;"	f
register_exception_impl	include/pybind11/pybind11.h	/^register_exception_impl(handle scope, const char *name, handle base, bool isLocal) {$/;"	f
register_exception_translator	include/pybind11/pybind11.h	/^inline void register_exception_translator(ExceptionTranslator &&translator) {$/;"	f
register_instance	include/pybind11/detail/class.h	/^inline void register_instance(instance *self, void *valptr, const type_info *tinfo) {$/;"	f
register_instance_impl	include/pybind11/detail/class.h	/^inline bool register_instance_impl(void *ptr, instance *self) {$/;"	f
register_local_exception	include/pybind11/pybind11.h	/^register_local_exception(handle scope, const char *name, handle base = PyExc_Exception) {$/;"	f
register_local_exception_translator	include/pybind11/pybind11.h	/^inline void register_local_exception_translator(ExceptionTranslator &&translator) {$/;"	f
registered_dtypes	include/pybind11/numpy.h	/^    std::unordered_map<std::type_index, numpy_type_info> registered_dtypes;$/;"	m	struct:numpy_internals
registered_exception_translators	include/pybind11/detail/internals.h	/^    std::forward_list<ExceptionTranslator> registered_exception_translators;$/;"	m	struct:internals
registered_exception_translators	include/pybind11/detail/internals.h	/^    std::forward_list<ExceptionTranslator> registered_exception_translators;$/;"	m	struct:local_internals
registered_instances	include/pybind11/detail/internals.h	/^    std::unordered_multimap<const void *, instance *> registered_instances; \/\/ void * -> instance*$/;"	m	struct:internals
registered_types_cpp	include/pybind11/detail/internals.h	/^    type_map<type_info *> registered_types_cpp;$/;"	m	struct:internals
registered_types_cpp	include/pybind11/detail/internals.h	/^    type_map<type_info *> registered_types_cpp;$/;"	m	struct:local_internals
registered_types_py	include/pybind11/detail/internals.h	/^    std::unordered_map<PyTypeObject *, std::vector<type_info *>> registered_types_py;$/;"	m	struct:internals
reinterpret_borrow	include/pybind11/pytypes.h	/^T reinterpret_borrow(handle h) {$/;"	f	class:handle
reinterpret_steal	include/pybind11/pytypes.h	/^T reinterpret_steal(handle h) {$/;"	f	class:handle
release	include/pybind11/gil.h	/^    bool release = true;$/;"	m	class:gil_scoped_acquire
release	include/pybind11/pybind11.h	/^        void release() { strings.clear(); }$/;"	f	class:cpp_function::strdup_guard
release	include/pybind11/pytypes.h	/^    handle release() {$/;"	f	class:handle::object
release_ptr	tests/test_smart_ptr.cpp	/^    T *release_ptr() { return impl.release(); }$/;"	f	class:__anon9::custom_unique_ptr
release_ptr	tests/test_smart_ptr.cpp	/^    T *release_ptr() { return impl.release(); }$/;"	f	class:__anon9::unique_ptr_with_addressof_operator
reload	include/pybind11/pybind11.h	/^    void reload() {$/;"	f	class:module_
remove_class	include/pybind11/detail/common.h	/^struct remove_class {};$/;"	s
remove_class	include/pybind11/detail/common.h	/^struct remove_class<R (C::*)(A...) const noexcept> {$/;"	s
remove_class	include/pybind11/detail/common.h	/^struct remove_class<R (C::*)(A...) const> {$/;"	s
remove_class	include/pybind11/detail/common.h	/^struct remove_class<R (C::*)(A...) noexcept> {$/;"	s
remove_class	include/pybind11/detail/common.h	/^struct remove_class<R (C::*)(A...)> {$/;"	s
remove_output	setup.py	/^def remove_output(*sources: str) -> Iterator[None]:$/;"	f
report_status	tests/test_call_policies.cpp	/^    static const char *report_status() { return enabled ? "guarded" : "unguarded"; }$/;"	f	struct:CustomGuard
report_status	tests/test_call_policies.cpp	/^    static const char *report_status() { return enabled ? "guarded" : "unguarded"; }$/;"	f	struct:DependentGuard
repr	include/pybind11/pytypes.h	/^inline str repr(handle h) {$/;"	f	class:handle
request	include/pybind11/pytypes.h	/^    buffer_info request(bool writable = false) const {$/;"	f	class:handle::buffer
require_implicit	tests/test_builtin_casters.py	/^    def require_implicit(v):$/;"	f	function:test_bool_caster
require_implicit	tests/test_builtin_casters.py	/^    def require_implicit(v):$/;"	f	function:test_numpy_int_convert
require_size	include/pybind11/stl.h	/^    bool require_size(enable_if_t<!R, size_t> size) {$/;"	f	struct:array_caster
require_size	include/pybind11/stl.h	/^    bool require_size(enable_if_t<R, size_t> size) {$/;"	f	struct:array_caster
requires_col_major	include/pybind11/eigen/matrix.h	/^    static constexpr bool requires_col_major$/;"	m	struct:EigenProps
requires_conversion	tests/test_builtin_casters.py	/^    def requires_conversion(v):$/;"	f	function:test_int_convert
requires_row_major	include/pybind11/eigen/matrix.h	/^    static constexpr bool requires_row_major$/;"	m	struct:EigenProps
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const anyset &, void *) {}$/;"	f	struct:set_caster
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const anyset &s, Type *) {$/;"	f	struct:set_caster
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const dict &, void *) {}$/;"	f	struct:map_caster
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const dict &d, Type *) {$/;"	f	struct:map_caster
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const sequence &, void *) {}$/;"	f	struct:list_caster
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const sequence &s, Type *) {$/;"	f	struct:list_caster
reset_ref	tests/test_eigen_matrix.cpp	/^void reset_ref(M &x) {$/;"	f
reset_refs	tests/test_eigen_matrix.cpp	/^void reset_refs() {$/;"	f
restore	include/pybind11/pytypes.h	/^    void restore() { m_fetched_error->restore(); }$/;"	f	class:handle::error_fetch_and_normalize::error_already_set
return_bytes	tests/test_constants_and_functions.cpp	/^py::bytes return_bytes() {$/;"	f
return_value_policy	include/pybind11/detail/common.h	/^enum class return_value_policy : uint8_t {$/;"	c
return_value_policy_override	include/pybind11/cast.h	/^struct return_value_policy_override {$/;"	s
return_value_policy_override	include/pybind11/cast.h	/^struct return_value_policy_override<$/;"	s
rich_compare	include/pybind11/pytypes.h	/^bool object_api<D>::rich_compare(object_api const &other, int value) const {$/;"	f	class:handle::object_api
ro_value	tests/test_methods_and_attributes.cpp	/^    double ro_value = 1.25;$/;"	m	class:UnregisteredBase	file:
rowMajor	include/pybind11/eigen/matrix.h	/^    static constexpr bool rowMajor = Type::IsRowMajor;$/;"	m	struct:type_caster
row_major	include/pybind11/eigen/matrix.h	/^    static constexpr bool row_major = Type::IsRowMajor,$/;"	m	struct:EigenProps
rows	include/pybind11/eigen/matrix.h	/^    EigenIndex rows = 0, cols = 0;$/;"	m	struct:EigenConformable
rows	include/pybind11/eigen/matrix.h	/^    static constexpr EigenIndex rows = Type::RowsAtCompileTime, cols = Type::ColsAtCompileTime,$/;"	m	struct:EigenProps
run	tests/test_thread.py	/^    def run(self):$/;"	m	class:Thread
run	tests/test_virtual_functions.cpp	/^    virtual int run(int value) {$/;"	f	class:ExampleVirt
run	tests/test_virtual_functions.py	/^        def run(self, value):$/;"	m	class:test_override.ExtendedExampleVirt
run	tools/codespell_ignore_lines_from_errors.py	/^def run(args: List[str]) -> None:$/;"	f
run_bool	tests/test_virtual_functions.py	/^        def run_bool(self):$/;"	m	class:test_override.ExtendedExampleVirt
rw_value	tests/test_methods_and_attributes.cpp	/^    int rw_value = 42;$/;"	m	class:UnregisteredBase	file:
s	tests/test_exceptions.cpp	/^    py::str s;$/;"	m	struct:PythonAlreadySetInDestructor	file:
same_size	include/pybind11/numpy.h	/^struct same_size {$/;"	s
same_type	include/pybind11/detail/internals.h	/^inline bool same_type(const std::type_info &lhs, const std::type_info &rhs) { return lhs == rhs; }$/;"	f
save	tests/cross_module_gil_utils.cpp	/^    PyThreadState *save;$/;"	m	struct:__anon3::CustomAutoNoGIL	file:
save	tools/libsize.py	/^save = sys.argv[2]$/;"	v
say_something	tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.BT
say_something	tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.DT
say_something	tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.DT2
scope	include/pybind11/attr.h	/^    explicit scope(const handle &s) : value(s) {}$/;"	f	struct:scope
scope	include/pybind11/attr.h	/^    handle scope;$/;"	m	struct:function_record
scope	include/pybind11/attr.h	/^    handle scope;$/;"	m	struct:type_record
scope	include/pybind11/attr.h	/^struct scope {$/;"	s
scope_exit	tests/test_embed/test_interpreter.cpp	/^struct scope_exit {$/;"	s	file:
scoped_estream_redirect	include/pybind11/iostream.h	/^    explicit scoped_estream_redirect(std::ostream &costream = std::cerr,$/;"	f	class:scoped_estream_redirect
scoped_estream_redirect	include/pybind11/iostream.h	/^class scoped_estream_redirect : public scoped_ostream_redirect {$/;"	c
scoped_interpreter	include/pybind11/embed.h	/^    explicit scoped_interpreter(PyConfig *config,$/;"	f	class:scoped_interpreter
scoped_interpreter	include/pybind11/embed.h	/^    explicit scoped_interpreter(bool init_signal_handlers = true,$/;"	f	class:scoped_interpreter
scoped_interpreter	include/pybind11/embed.h	/^class scoped_interpreter {$/;"	c
scoped_ostream_redirect	include/pybind11/iostream.h	/^    explicit scoped_ostream_redirect(std::ostream &costream = std::cout,$/;"	f	class:scoped_ostream_redirect
scoped_ostream_redirect	include/pybind11/iostream.h	/^class scoped_ostream_redirect {$/;"	c
sdist_files	tests/extra_python_package/test_files.py	/^sdist_files = {$/;"	v
select_indices_impl	include/pybind11/detail/common.h	/^struct select_indices_impl {$/;"	s
select_indices_impl	include/pybind11/detail/common.h	/^struct select_indices_impl<index_sequence<IPrev...>, I, B, Bs...>$/;"	s
self	include/pybind11/operators.h	/^static const self_t self = self_t();$/;"	v
self1	tests/test_methods_and_attributes.cpp	/^    ExampleMandA self1() { return *this; }              \/\/ return by value$/;"	f	class:ExampleMandA
self2	tests/test_methods_and_attributes.cpp	/^    ExampleMandA &self2() { return *this; }             \/\/ return by reference$/;"	f	class:ExampleMandA
self3	tests/test_methods_and_attributes.cpp	/^    const ExampleMandA &self3() const { return *this; } \/\/ return by const reference$/;"	f	class:ExampleMandA
self4	tests/test_methods_and_attributes.cpp	/^    ExampleMandA *self4() { return this; }              \/\/ return by pointer$/;"	f	class:ExampleMandA
self5	tests/test_methods_and_attributes.cpp	/^    const ExampleMandA *self5() const { return this; }  \/\/ return by const pointer$/;"	f	class:ExampleMandA
self_t	include/pybind11/operators.h	/^struct self_t {};$/;"	s
sentinel	include/pybind11/pytypes.h	/^    static iterator sentinel() { return {}; }$/;"	f	class:handle::iterator
sequence	include/pybind11/pytypes.h	/^class sequence : public object {$/;"	c	class:handle
sequence_fast_readonly	include/pybind11/pytypes.h	/^    sequence_fast_readonly(handle obj, ssize_t n) : ptr(PySequence_Fast_ITEMS(obj.ptr()) + n) {}$/;"	f	class:handle::sequence_fast_readonly
sequence_fast_readonly	include/pybind11/pytypes.h	/^class sequence_fast_readonly {$/;"	c	class:handle
sequence_item	include/pybind11/pytypes.h	/^struct sequence_item {$/;"	s	struct:handle::error_fetch_and_normalize
sequence_slow_readwrite	include/pybind11/pytypes.h	/^    sequence_slow_readwrite(handle obj, ssize_t index) : obj(obj), index(index) {}$/;"	f	class:handle::sequence_slow_readwrite
sequence_slow_readwrite	include/pybind11/pytypes.h	/^class sequence_slow_readwrite {$/;"	c	class:handle
set	include/pybind11/detail/init.h	/^    remove_reference_t<Set> set;$/;"	m	struct:pickle_factory
set	include/pybind11/pytypes.h	/^    set() : anyset(PySet_New(nullptr), stolen_t{}) {$/;"	f	class:handle::set
set	include/pybind11/pytypes.h	/^    static void set(handle obj, const IdxType &index, handle val) {$/;"	f	struct:handle::error_fetch_and_normalize::list_item
set	include/pybind11/pytypes.h	/^    static void set(handle obj, const IdxType &index, handle val) {$/;"	f	struct:handle::error_fetch_and_normalize::sequence_item
set	include/pybind11/pytypes.h	/^    static void set(handle obj, const IdxType &index, handle val) {$/;"	f	struct:handle::error_fetch_and_normalize::tuple_item
set	include/pybind11/pytypes.h	/^    static void set(handle obj, const char *key, handle val) { setattr(obj, key, val); }$/;"	f	struct:handle::error_fetch_and_normalize::str_attr
set	include/pybind11/pytypes.h	/^    static void set(handle obj, handle key, handle val) { setattr(obj, key, val); }$/;"	f	struct:handle::error_fetch_and_normalize::obj_attr
set	include/pybind11/pytypes.h	/^    static void set(handle obj, handle key, handle val) {$/;"	f	struct:handle::error_fetch_and_normalize::generic_item
set	include/pybind11/pytypes.h	/^class set : public anyset {$/;"	c	class:handle
set	tests/pybind11_tests.h	/^    void set(int set) { i = set; }$/;"	f	class:UserType
set	tests/test_methods_and_attributes.cpp	/^    void set(int v) { value = v; }$/;"	f	struct:TestProperties
set	tests/test_sequences_and_iterators.cpp	/^    void set(int value) { value_ = value; }$/;"	f	class:NonCopyableInt
set1	tests/test_methods_and_attributes.cpp	/^    void set1(int v) { v1.set(v); }$/;"	f	struct:TestPropRVP
set2	tests/test_methods_and_attributes.cpp	/^    void set2(int v) { v2.set(v); }$/;"	f	struct:TestPropRVP
set_caster	include/pybind11/stl.h	/^struct set_caster {$/;"	s
set_holder_constructed	include/pybind11/detail/type_caster_base.h	/^    void set_holder_constructed(bool v = true) {$/;"	f	struct:value_and_holder
set_instance_registered	include/pybind11/detail/type_caster_base.h	/^    void set_instance_registered(bool v = true) {$/;"	f	struct:value_and_holder
set_int	tests/test_methods_and_attributes.cpp	/^    void set_int(int v) { rw_value = v; }$/;"	f	class:UnregisteredBase
set_name	include/pybind11/pytypes.h	/^    void set_name(const char *new_name) {$/;"	f	class:handle::capsule
set_operator_new	include/pybind11/pybind11.h	/^void set_operator_new(...) {}$/;"	f
set_operator_new	include/pybind11/pybind11.h	/^void set_operator_new(type_record *r) {$/;"	f
set_pointer	include/pybind11/pytypes.h	/^    void set_pointer(const void *value) {$/;"	f	class:handle::capsule
set_shared_data	include/pybind11/detail/internals.h	/^PYBIND11_NOINLINE void *set_shared_data(const std::string &name, void *data) {$/;"	f
set_stack_top	include/pybind11/detail/type_caster_base.h	/^    static void set_stack_top(loader_life_support *value) { *get_stack_pp() = value; }$/;"	f	class:loader_life_support
set_stack_top	include/pybind11/detail/type_caster_base.h	/^    static void set_stack_top(loader_life_support *value) {$/;"	f	class:loader_life_support
setattr	include/pybind11/pytypes.h	/^inline void setattr(handle obj, const char *name, handle value) {$/;"	f	struct:handle::error_fetch_and_normalize
setattr	include/pybind11/pytypes.h	/^inline void setattr(handle obj, handle name, handle value) {$/;"	f	struct:handle::error_fetch_and_normalize
setstate	include/pybind11/detail/init.h	/^void setstate(value_and_holder &v_h, T &&result, bool need_alias) {$/;"	f
setstate	include/pybind11/detail/init.h	/^void setstate(value_and_holder &v_h, std::pair<T, O> &&result, bool need_alias) {$/;"	f
setup	docs/conf.py	/^def setup(app):$/;"	f
setup_py	setup.py	/^setup_py = Path($/;"	v
shape	include/pybind11/buffer_info.h	/^    std::vector<ssize_t> shape;   \/\/ Shape of the tensor (1 entry per dimension)$/;"	m	struct:buffer_info
shared	tests/test_smart_ptr.cpp	/^    std::shared_ptr<A> shared = std::make_shared<A>();$/;"	m	struct:__anon9::SharedPtrRef	file:
shared	tests/test_smart_ptr.cpp	/^    std::shared_ptr<B> shared = std::make_shared<B>();$/;"	m	namespace:__anon9	file:
shared_data	include/pybind11/detail/internals.h	/^    std::unordered_map<std::string, void *> shared_data; \/\/ Custom data to be shared across$/;"	m	struct:internals
shared_exception	tests/test_exceptions.h	/^    explicit shared_exception() : shared_exception("") {}$/;"	f	class:shared_exception
shared_exception	tests/test_exceptions.h	/^class PYBIND11_EXPORT_EXCEPTION shared_exception : public pybind11::builtin_exception {$/;"	c
shared_loader_life_support_data	include/pybind11/detail/internals.h	/^        shared_loader_life_support_data() {$/;"	f	struct:local_internals::shared_loader_life_support_data
shared_loader_life_support_data	include/pybind11/detail/internals.h	/^    struct shared_loader_life_support_data {$/;"	s	struct:local_internals
shared_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^    explicit shared_ptr_with_addressof_operator(T *p) : impl(p) {}$/;"	f	class:__anon9::shared_ptr_with_addressof_operator
shared_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^class shared_ptr_with_addressof_operator {$/;"	c	namespace:__anon9	file:
show_c_contiguous	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_c_contiguous = show_order && requires_row_major;$/;"	m	struct:EigenProps
show_enum_members_docstring	include/pybind11/options.h	/^        bool show_enum_members_docstring = true;  \/\/< Include auto-generated member list in enum$/;"	m	struct:options::state
show_enum_members_docstring	include/pybind11/options.h	/^    static bool show_enum_members_docstring() {$/;"	f	class:options
show_f_contiguous	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_f_contiguous$/;"	m	struct:EigenProps
show_function_signatures	include/pybind11/options.h	/^        bool show_function_signatures = true;     \/\/< Include auto-generated function signatures$/;"	m	struct:options::state
show_function_signatures	include/pybind11/options.h	/^    static bool show_function_signatures() { return global_state().show_function_signatures; }$/;"	f	class:options
show_order	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_order = is_eigen_dense_map<Type>::value;$/;"	m	struct:EigenProps
show_user_defined_docstrings	include/pybind11/options.h	/^        bool show_user_defined_docstrings = true; \/\/< Include user-supplied texts in docstrings.$/;"	m	struct:options::state
show_user_defined_docstrings	include/pybind11/options.h	/^    static bool show_user_defined_docstrings() {$/;"	f	class:options
show_writeable	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_writeable$/;"	m	struct:EigenProps
sibling	include/pybind11/attr.h	/^    explicit sibling(const handle &value) : value(value.ptr()) {}$/;"	f	struct:sibling
sibling	include/pybind11/attr.h	/^    handle sibling;$/;"	m	struct:function_record
sibling	include/pybind11/attr.h	/^struct sibling {$/;"	s
signature	include/pybind11/attr.h	/^    char *signature = nullptr;$/;"	m	struct:function_record
silence_unused_warnings	include/pybind11/detail/common.h	/^    silence_unused_warnings(Args &&...) {$/;"	f	struct:overload_cast_impl
simple_ancestors	include/pybind11/detail/internals.h	/^    bool simple_ancestors : 1;$/;"	m	struct:type_info
simple_collector	include/pybind11/cast.h	/^    explicit simple_collector(Ts &&...values)$/;"	f	class:simple_collector
simple_collector	include/pybind11/cast.h	/^class simple_collector {$/;"	c
simple_dtype	tests/test_numpy_dtypes.py	/^def simple_dtype():$/;"	f
simple_dtype_fmt	tests/test_numpy_dtypes.py	/^def simple_dtype_fmt():$/;"	f
simple_holder_constructed	include/pybind11/detail/common.h	/^    bool simple_holder_constructed : 1;$/;"	m	struct:instance
simple_instance_registered	include/pybind11/detail/common.h	/^    bool simple_instance_registered : 1;$/;"	m	struct:instance
simple_layout	include/pybind11/detail/common.h	/^    bool simple_layout : 1;$/;"	m	struct:instance
simple_type	include/pybind11/detail/internals.h	/^    bool simple_type : 1;$/;"	m	struct:type_info
simple_value_holder	include/pybind11/detail/common.h	/^        void *simple_value_holder[1 + instance_simple_holder_in_ptrs()];$/;"	m	union:instance::__anon12
size	docs/benchmark.py	/^        size = os.stat("test.so").st_size$/;"	v
size	include/pybind11/buffer_info.h	/^    ssize_t size = 0;             \/\/ Total number of entries$/;"	m	struct:buffer_info
size	include/pybind11/cast.h	/^    static constexpr auto size = sizeof...(Ts);$/;"	m	class:tuple_caster
size	include/pybind11/detail/type_caster_base.h	/^    size_t size() { return tinfo.size(); }$/;"	f	struct:values_and_holders
size	include/pybind11/eigen/matrix.h	/^                                size = Type::SizeAtCompileTime;$/;"	m	struct:EigenProps
size	include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyDict_Size(m_ptr); }$/;"	f	class:handle::dict
size	include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyList_Size(m_ptr); }$/;"	f	class:handle::list
size	include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyTuple_Size(m_ptr); }$/;"	f	class:handle::tuple
size	include/pybind11/pytypes.h	/^    size_t size() const { return static_cast<size_t>(PyByteArray_Size(m_ptr)); }$/;"	f	class:handle::bytearray
size	include/pybind11/pytypes.h	/^    size_t size() const { return static_cast<size_t>(PySet_Size(m_ptr)); }$/;"	f	class:handle::anyset
size	include/pybind11/pytypes.h	/^    size_t size() const {$/;"	f	class:handle::sequence
size_in_ptrs	include/pybind11/detail/common.h	/^inline static constexpr size_t size_in_ptrs(size_t s) {$/;"	f
size_t	include/pybind11/options.h	/^    void *operator new(size_t) = delete;$/;"	m	class:options
sizeof	include/pybind11/numpy.h	/^static_assert(sizeof(::pybind11::ssize_t) == sizeof(Py_intptr_t), "ssize_t != Py_intptr_t");$/;"	v
sleep	tests/test_iostream.cpp	/^    void sleep() {$/;"	f	struct:TestThread
slice	include/pybind11/pytypes.h	/^    slice(handle start, handle stop, handle step)$/;"	f	class:handle::slice
slice	include/pybind11/pytypes.h	/^    slice(ssize_t start_, ssize_t stop_, ssize_t step_)$/;"	f	class:handle::slice
slice	include/pybind11/pytypes.h	/^    slice(std::optional<ssize_t> start, std::optional<ssize_t> stop, std::optional<ssize_t> step)$/;"	f	class:handle::slice
slice	include/pybind11/pytypes.h	/^class slice : public object {$/;"	c	class:handle
sound	tests/test_tagbased_polymorphic.cpp	/^    std::string sound = "WOOF!";$/;"	m	struct:Animal::Dog	file:
source_suffix	docs/conf.py	/^source_suffix = ".rst"$/;"	v
src_and_type	include/pybind11/detail/type_caster_base.h	/^    src_and_type(const void *src,$/;"	f	class:type_caster_generic
src_and_type	include/pybind11/detail/type_caster_base.h	/^    static std::pair<const void *, const type_info *> src_and_type(const itype *src) {$/;"	f	class:type_caster_base
src_files	tests/extra_python_package/test_files.py	/^src_files = headers | cmake_files | pkgconfig_files$/;"	v
ssize_t_cast	include/pybind11/detail/common.h	/^inline ssize_t ssize_t_cast(const IntType &val) {$/;"	f
state	include/pybind11/options.h	/^    struct state {$/;"	s	class:options
state	tests/test_virtual_functions.cpp	/^    ExampleVirt(ExampleVirt &&e) noexcept : state(e.state) {$/;"	f	class:ExampleVirt
state	tests/test_virtual_functions.cpp	/^    int state;$/;"	m	class:ExampleVirt	file:
static_func	tests/test_multiple_inheritance.cpp	/^    static std::string static_func() { return "VanillaStaticMix1"; }$/;"	f	struct:__anon10::VanillaStaticMix1
static_func	tests/test_multiple_inheritance.cpp	/^    static std::string static_func() { return "VanillaStaticMix2"; }$/;"	f	struct:__anon10::VanillaStaticMix2
static_func1	tests/test_multiple_inheritance.cpp	/^    static std::string static_func1() { return "WithStatic1"; };$/;"	f	struct:__anon10::WithStatic1
static_func2	tests/test_multiple_inheritance.cpp	/^    static std::string static_func2() { return "WithStatic2"; };$/;"	f	struct:__anon10::WithStatic2
static_get	tests/test_methods_and_attributes.cpp	/^    static int static_get() { return static_value; }$/;"	f	struct:TestProperties
static_property_type	include/pybind11/detail/internals.h	/^    PyTypeObject *static_property_type;$/;"	m	struct:internals
static_set	tests/test_methods_and_attributes.cpp	/^    static void static_set(int v) { static_value = v; }$/;"	f	struct:TestProperties
static_strings	include/pybind11/detail/internals.h	/^    std::forward_list<std::string> static_strings; \/\/ Stores the std::strings backing$/;"	m	struct:internals
static_value	tests/test_methods_and_attributes.cpp	/^    static int static_value;$/;"	m	struct:TestProperties	file:
static_value	tests/test_methods_and_attributes.cpp	/^    static int static_value;$/;"	m	struct:TestPropertiesOverride	file:
static_value	tests/test_methods_and_attributes.cpp	/^int TestProperties::static_value = 1;$/;"	m	class:TestProperties	file:
static_value	tests/test_methods_and_attributes.cpp	/^int TestPropertiesOverride::static_value = 99;$/;"	m	class:TestPropertiesOverride	file:
static_value	tests/test_multiple_inheritance.cpp	/^    static int static_value;$/;"	m	struct:__anon10::VanillaStaticMix1	file:
static_value	tests/test_multiple_inheritance.cpp	/^    static int static_value;$/;"	m	struct:__anon10::VanillaStaticMix2	file:
static_value	tests/test_multiple_inheritance.cpp	/^int VanillaStaticMix1::static_value = 12;$/;"	m	class:__anon10::VanillaStaticMix1	file:
static_value	tests/test_multiple_inheritance.cpp	/^int VanillaStaticMix2::static_value = 12;$/;"	m	class:__anon10::VanillaStaticMix2	file:
static_value1	tests/test_multiple_inheritance.cpp	/^    static int static_value1;$/;"	m	struct:__anon10::WithStatic1	file:
static_value1	tests/test_multiple_inheritance.cpp	/^int WithStatic1::static_value1 = 1;$/;"	m	class:__anon10::WithStatic1	file:
static_value2	tests/test_multiple_inheritance.cpp	/^    static int static_value2;$/;"	m	struct:__anon10::WithStatic2	file:
static_value2	tests/test_multiple_inheritance.cpp	/^int WithStatic2::static_value2 = 2;$/;"	m	class:__anon10::WithStatic2	file:
staticmethod	include/pybind11/pytypes.h	/^class staticmethod : public object {$/;"	c	class:handle
status	include/pybind11/detail/common.h	/^    uint8_t *status;$/;"	m	struct:nonsimple_values_and_holders
status_holder_constructed	include/pybind11/detail/common.h	/^    static constexpr uint8_t status_holder_constructed = 1;$/;"	m	struct:instance
status_instance_registered	include/pybind11/detail/common.h	/^    static constexpr uint8_t status_instance_registered = 2;$/;"	m	struct:instance
std	tests/test_operator_overloading.cpp	/^namespace std {$/;"	n	file:
std	tests/test_stl.cpp	/^namespace std {$/;"	n	file:
stderr	tests/conftest.py	/^    def stderr(self):$/;"	m	class:Capture
stl_headers	tests/extra_python_package/test_files.py	/^stl_headers = {$/;"	v
stolen_t	include/pybind11/pytypes.h	/^    struct stolen_t {};$/;"	s	class:handle::object
stop	tests/test_iostream.cpp	/^    void stop() { stop_ = true; }$/;"	f	struct:TestThread
stop_	tests/test_iostream.cpp	/^    std::atomic<bool> stop_;$/;"	m	struct:TestThread	file:
storage	tests/test_stl.cpp	/^    std::vector<T> storage;$/;"	m	class:ReferenceSensitiveOptional	file:
str	include/pybind11/pytypes.h	/^    explicit str(handle h) : object(raw_str(h.ptr()), stolen_t{}) {$/;"	f	class:handle::str
str	include/pybind11/pytypes.h	/^    str(T s) : str(s.data(), s.size()) {}$/;"	f	class:handle::str
str	include/pybind11/pytypes.h	/^    str(const char *c = "") : object(PyUnicode_FromString(c), stolen_t{}) {$/;"	f	class:handle::str
str	include/pybind11/pytypes.h	/^    str(const char *c, const SzType &n)$/;"	f	class:handle::str
str	include/pybind11/pytypes.h	/^    str(const std::string &s) : str(s.data(), s.size()) {}$/;"	f	class:handle::str
str	include/pybind11/pytypes.h	/^    str(std::u8string_view s) : str(reinterpret_cast<const char *>(s.data()), s.size()) {}$/;"	f	class:handle::str
str	include/pybind11/pytypes.h	/^class str : public object {$/;"	c	class:handle
str	include/pybind11/pytypes.h	/^inline str::str(const bytes &b) {$/;"	f	class:handle::str
str	include/pybind11/pytypes.h	/^pybind11::str object_api<D>::str() const {$/;"	f	class:handle::object_api
str_attr	include/pybind11/pytypes.h	/^struct str_attr {$/;"	s	struct:handle::error_fetch_and_normalize
strdup_guard	include/pybind11/pybind11.h	/^    class strdup_guard {$/;"	c	class:cpp_function
stride_compatible	include/pybind11/eigen/matrix.h	/^    bool stride_compatible() const {$/;"	f	struct:EigenConformable
strides	include/pybind11/buffer_info.h	/^    std::vector<ssize_t> strides; \/\/ Number of bytes between adjacent entries$/;"	m	struct:buffer_info
strides	include/pybind11/numpy.h	/^    ssize_t *strides;$/;"	m	struct:PyArray_Proxy
string_caster	include/pybind11/cast.h	/^struct string_caster {$/;"	s
string_op	include/pybind11/pytypes.h	/^    T string_op() const {$/;"	f	class:handle::bytes
strings	include/pybind11/pybind11.h	/^        std::vector<char *> strings;$/;"	m	class:cpp_function::strdup_guard
strip_comments	tests/test_factory_constructors.py	/^def strip_comments(s):$/;"	f
strip_function_object	include/pybind11/detail/common.h	/^struct strip_function_object {$/;"	s
strip_padding	include/pybind11/numpy.h	/^    dtype strip_padding(ssize_t itemsize) {$/;"	f
sub	tests/test_pytypes.py	/^        sub = SubTestObject()$/;"	v	class:test_accessors.TestObject
subarray	include/pybind11/numpy.h	/^    char *subarray;$/;"	m	struct:PyArrayDescr_Proxy
subcasters	include/pybind11/cast.h	/^    Tuple<make_caster<Ts>...> subcasters;$/;"	m	class:tuple_caster
submodules	tests/test_eigen_tensor.py	/^submodules = [eigen_tensor.c_style, eigen_tensor.f_style]$/;"	v
sum	tests/test_methods_and_attributes.cpp	/^    double sum() const { return rw_value + ro_value; }$/;"	f	class:RegisteredDerived
sv1	tests/test_methods_and_attributes.cpp	/^    static UserType sv1;$/;"	m	struct:TestPropRVP	file:
sv2	tests/test_methods_and_attributes.cpp	/^    static UserType sv2;$/;"	m	struct:TestPropRVP	file:
tag	tests/test_builtin_casters.cpp	/^    int tag;$/;"	m	struct:ConstRefCasted	file:
take_ownership	include/pybind11/detail/common.h	/^    take_ownership,$/;"	m	class:return_value_policy
temp_name	include/pybind11/eigen/tensor.h	/^    static constexpr auto temp_name = get_tensor_descriptor<Type, false>::value;$/;"	m	struct:type_caster
templates_path	docs/conf.py	/^templates_path = [".templates"]$/;"	v
tensor_ref	tests/test_eigen_tensor.py	/^tensor_ref = np.empty((3, 5, 2), dtype=np.int64)$/;"	v
test_accepts_none	tests/test_methods_and_attributes.py	/^def test_accepts_none(msg):$/;"	f
test_accessor_moves	tests/test_pytypes.py	/^def test_accessor_moves():$/;"	f
test_accessors	tests/test_pytypes.py	/^def test_accessors():$/;"	f
test_alias_delay_initialization1	tests/test_virtual_functions.py	/^def test_alias_delay_initialization1(capture):$/;"	f
test_alias_delay_initialization2	tests/test_virtual_functions.py	/^def test_alias_delay_initialization2(capture):$/;"	f
test_aligned	tests/test_class.py	/^def test_aligned():$/;"	f
test_alive_gc	tests/test_call_policies.py	/^def test_alive_gc(capture):$/;"	f
test_alive_gc_derived	tests/test_call_policies.py	/^def test_alive_gc_derived(capture):$/;"	f
test_alive_gc_multi_derived	tests/test_call_policies.py	/^def test_alive_gc_multi_derived(capture):$/;"	f
test_all_basic_tests_completeness	tests/test_gil_scoped.py	/^def test_all_basic_tests_completeness():$/;"	f
test_arg_and_kwargs	tests/test_kwargs_and_defaults.py	/^def test_arg_and_kwargs():$/;"	f
test_args_refcount	tests/test_kwargs_and_defaults.py	/^def test_args_refcount():$/;"	f
test_argument_conversions	tests/test_numpy_array.py	/^def test_argument_conversions(forcecast, contiguity, noconvert):$/;"	f
test_array	tests/test_stl.py	/^def test_array(doc):$/;"	f
test_array_array	tests/test_numpy_dtypes.py	/^def test_array_array():$/;"	f
test_array_attributes	tests/test_numpy_array.py	/^def test_array_attributes():$/;"	f
test_array_cast_sequence	tests/test_stl.py	/^def test_array_cast_sequence():$/;"	f
test_array_collapse	tests/test_numpy_vectorize.py	/^def test_array_collapse():$/;"	f
test_array_constructors	tests/test_numpy_dtypes.py	/^def test_array_constructors():$/;"	f
test_array_create_and_resize	tests/test_numpy_array.py	/^def test_array_create_and_resize():$/;"	f
test_array_ctors	tests/test_numpy_dtypes.cpp	/^py::array_t<int32_t, 0> test_array_ctors(int i) {$/;"	f	class:E1	file:
test_array_failure	tests/test_numpy_array.py	/^def test_array_failure():$/;"	f
test_array_resize	tests/test_numpy_array.py	/^def test_array_resize():$/;"	f
test_array_unchecked_dyn_dims	tests/test_numpy_array.py	/^def test_array_unchecked_dyn_dims():$/;"	f
test_array_unchecked_fixed_dims	tests/test_numpy_array.py	/^def test_array_unchecked_fixed_dims(msg):$/;"	f
test_array_view	tests/test_numpy_array.py	/^def test_array_view():$/;"	f
test_array_view_invalid	tests/test_numpy_array.py	/^def test_array_view_invalid():$/;"	f
test_as_type_py	tests/test_class.py	/^def test_as_type_py():$/;"	f
test_async_async_callbacks	tests/test_callbacks.py	/^def test_async_async_callbacks():$/;"	f
test_async_callbacks	tests/test_callbacks.py	/^def test_async_callbacks():$/;"	f
test_at	tests/test_numpy_array.py	/^def test_at(arr):$/;"	f
test_at_fail	tests/test_numpy_array.py	/^def test_at_fail(arr, dim):$/;"	f
test_automatic_upcasting	tests/test_class.py	/^def test_automatic_upcasting():$/;"	f
test_await	tests/test_async.py	/^def test_await(event_loop):$/;"	f
test_await_missing	tests/test_async.py	/^def test_await_missing(event_loop):$/;"	f
test_bad_arg_default	tests/test_methods_and_attributes.py	/^def test_bad_arg_default(msg):$/;"	f
test_bad_cpp_to_python_casts	tests/test_eigen_tensor.py	/^def test_bad_cpp_to_python_casts(m):$/;"	f
test_bad_python_to_cpp_casts	tests/test_eigen_tensor.py	/^def test_bad_python_to_cpp_casts(m):$/;"	f
test_base_and_derived_nested_scope	tests/test_class.py	/^def test_base_and_derived_nested_scope():$/;"	f
test_binary_operators	tests/test_enum.py	/^def test_binary_operators():$/;"	f
test_bind_protected_functions	tests/test_class.py	/^def test_bind_protected_functions():$/;"	f
test_block_runtime_error_type_caster_eigen_ref_made_a_copy	tests/test_eigen_matrix.py	/^def test_block_runtime_error_type_caster_eigen_ref_made_a_copy():$/;"	f
test_bool	tests/test_pytypes.py	/^def test_bool(doc):$/;"	f
test_bool_caster	tests/test_builtin_casters.py	/^def test_bool_caster():$/;"	f
test_bool_underlying_enum	tests/test_enum.py	/^def test_bool_underlying_enum():$/;"	f
test_boost_optional	tests/test_stl.py	/^def test_boost_optional():$/;"	f
test_both_ref_mutators	tests/test_eigen_matrix.py	/^def test_both_ref_mutators():$/;"	f
test_bound_method_callback	tests/test_callbacks.py	/^def test_bound_method_callback():$/;"	f
test_bounds_check	tests/test_numpy_array.py	/^def test_bounds_check(arr):$/;"	f
test_brace_initialization	tests/test_class.py	/^def test_brace_initialization():$/;"	f
test_build_global_dist	tests/extra_python_package/test_files.py	/^def test_build_global_dist(monkeypatch, tmpdir):$/;"	f
test_build_sdist	tests/extra_python_package/test_files.py	/^def test_build_sdist(monkeypatch, tmpdir):$/;"	f
test_builtin_functions	tests/test_pytypes.py	/^def test_builtin_functions():$/;"	f
test_builtin_key_type	tests/test_modules.py	/^def test_builtin_key_type():$/;"	f
test_builtins_cast_return_none	tests/test_builtin_casters.py	/^def test_builtins_cast_return_none():$/;"	f
test_bytearray	tests/test_pytypes.py	/^def test_bytearray():$/;"	f
test_bytearray_to_string	tests/test_builtin_casters.py	/^def test_bytearray_to_string():$/;"	f
test_bytes	tests/test_constants_and_functions.py	/^def test_bytes():$/;"	f
test_bytes	tests/test_pytypes.py	/^def test_bytes(doc):$/;"	f
test_bytes_to_string	tests/test_builtin_casters.py	/^def test_bytes_to_string():$/;"	f
test_call_callback_with_object_return	tests/test_type_caster_pyobject_ptr.py	/^def test_call_callback_with_object_return(call_callback):$/;"	f
test_call_callback_with_pyobject_ptr_arg	tests/test_type_caster_pyobject_ptr.py	/^def test_call_callback_with_pyobject_ptr_arg():$/;"	f
test_call_guard	tests/test_call_policies.py	/^def test_call_guard():$/;"	f
test_callback_num_times	tests/test_callbacks.py	/^def test_callback_num_times():$/;"	f
test_callback_pure_virtual_func	tests/test_gil_scoped.py	/^def test_callback_pure_virtual_func():$/;"	f
test_callback_py_obj	tests/test_gil_scoped.py	/^def test_callback_py_obj():$/;"	f
test_callback_std_func	tests/test_gil_scoped.py	/^def test_callback_std_func():$/;"	f
test_callback_virtual_func	tests/test_gil_scoped.py	/^def test_callback_virtual_func():$/;"	f
test_callbacks	tests/test_callbacks.py	/^def test_callbacks():$/;"	f
test_capsule	tests/test_pytypes.py	/^def test_capsule(capture):$/;"	f
test_captured	tests/test_iostream.py	/^def test_captured(capsys):$/;"	f
test_captured_large_string	tests/test_iostream.py	/^def test_captured_large_string(capsys):$/;"	f
test_captured_utf8_2byte_offset0	tests/test_iostream.py	/^def test_captured_utf8_2byte_offset0(capsys):$/;"	f
test_captured_utf8_2byte_offset1	tests/test_iostream.py	/^def test_captured_utf8_2byte_offset1(capsys):$/;"	f
test_captured_utf8_3byte_offset0	tests/test_iostream.py	/^def test_captured_utf8_3byte_offset0(capsys):$/;"	f
test_captured_utf8_3byte_offset1	tests/test_iostream.py	/^def test_captured_utf8_3byte_offset1(capsys):$/;"	f
test_captured_utf8_3byte_offset2	tests/test_iostream.py	/^def test_captured_utf8_3byte_offset2(capsys):$/;"	f
test_captured_utf8_4byte_offset0	tests/test_iostream.py	/^def test_captured_utf8_4byte_offset0(capsys):$/;"	f
test_captured_utf8_4byte_offset1	tests/test_iostream.py	/^def test_captured_utf8_4byte_offset1(capsys):$/;"	f
test_captured_utf8_4byte_offset2	tests/test_iostream.py	/^def test_captured_utf8_4byte_offset2(capsys):$/;"	f
test_captured_utf8_4byte_offset3	tests/test_iostream.py	/^def test_captured_utf8_4byte_offset3(capsys):$/;"	f
test_carray_iterator	tests/test_sequences_and_iterators.py	/^def test_carray_iterator():$/;"	f
test_cast	tests/test_vector_unique_ptr_member.py	/^def test_cast():$/;"	f
test_cast_from_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_from_pyobject_ptr():$/;"	f
test_cast_handle_to_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_handle_to_pyobject_ptr():$/;"	f
test_cast_list_to_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_list_to_pyobject_ptr():$/;"	f
test_cast_numpy_int64_to_uint64	tests/test_numpy_array.py	/^def test_cast_numpy_int64_to_uint64():$/;"	f
test_cast_object_to_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_object_to_pyobject_ptr():$/;"	f
test_cast_to_python_non_nullptr_with_error_set	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_to_python_non_nullptr_with_error_set():$/;"	f
test_cast_to_python_nullptr	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_to_python_nullptr(set_error):$/;"	f
test_casts_none	tests/test_methods_and_attributes.py	/^def test_casts_none():$/;"	f
test_char_underlying_enum	tests/test_enum.py	/^def test_char_underlying_enum():  # Issue #1331\/PR #1334:$/;"	f
test_chrono_different_resolutions	tests/test_chrono.py	/^def test_chrono_different_resolutions():$/;"	f
test_chrono_duration_roundtrip	tests/test_chrono.py	/^def test_chrono_duration_roundtrip():$/;"	f
test_chrono_duration_subtraction_equivalence	tests/test_chrono.py	/^def test_chrono_duration_subtraction_equivalence():$/;"	f
test_chrono_duration_subtraction_equivalence_date	tests/test_chrono.py	/^def test_chrono_duration_subtraction_equivalence_date():$/;"	f
test_chrono_steady_clock	tests/test_chrono.py	/^def test_chrono_steady_clock():$/;"	f
test_chrono_steady_clock_roundtrip	tests/test_chrono.py	/^def test_chrono_steady_clock_roundtrip():$/;"	f
test_chrono_system_clock	tests/test_chrono.py	/^def test_chrono_system_clock():$/;"	f
test_chrono_system_clock_roundtrip	tests/test_chrono.py	/^def test_chrono_system_clock_roundtrip():$/;"	f
test_chrono_system_clock_roundtrip_date	tests/test_chrono.py	/^def test_chrono_system_clock_roundtrip_date():$/;"	f
test_chrono_system_clock_roundtrip_time	tests/test_chrono.py	/^def test_chrono_system_clock_roundtrip_time(time1, tz, monkeypatch):$/;"	f
test_class	tests/test_class.cpp	/^namespace test_class {$/;"	n	file:
test_class_refcount	tests/test_class.py	/^def test_class_refcount():$/;"	f
test_cls_and_dtype_conversion	tests/test_numpy_dtypes.py	/^def test_cls_and_dtype_conversion(simple_dtype):$/;"	f
test_compare_buffer_info	tests/test_numpy_dtypes.py	/^def test_compare_buffer_info():$/;"	f
test_complex_array	tests/test_numpy_dtypes.py	/^def test_complex_array():$/;"	f
test_complex_cast	tests/test_builtin_casters.py	/^def test_complex_cast():$/;"	f
test_const_name	tests/test_const_name.py	/^def test_const_name(func, selector, expected):$/;"	f
test_const_ref_caster	tests/test_builtin_casters.py	/^def test_const_ref_caster():$/;"	f
test_constants	tests/test_constants_and_functions.py	/^def test_constants():$/;"	f
test_constructors	tests/test_numpy_array.py	/^def test_constructors():$/;"	f
test_constructors	tests/test_pytypes.py	/^def test_constructors():$/;"	f
test_convert_tensor_to_py	tests/test_eigen_tensor.py	/^def test_convert_tensor_to_py(m, func_name):$/;"	f
test_copy_method	tests/test_methods_and_attributes.py	/^def test_copy_method():$/;"	f
test_cpp_callable_cleanup	tests/test_callbacks.py	/^def test_cpp_callable_cleanup():$/;"	f
test_cpp_casting	tests/test_eigen_matrix.py	/^def test_cpp_casting():$/;"	f
test_cpp_function_roundtrip	tests/test_callbacks.py	/^def test_cpp_function_roundtrip():$/;"	f
test_cpp_iterators	tests/test_pytypes.py	/^def test_cpp_iterators():$/;"	f
test_create	tests/test_vector_unique_ptr_member.py	/^def test_create(num_elems):$/;"	f
test_cross_module_calls	tests/test_local_bindings.py	/^def test_cross_module_calls():$/;"	f
test_cross_module_exception_translator	tests/test_exceptions.py	/^def test_cross_module_exception_translator():$/;"	f
test_cross_module_exceptions	tests/test_exceptions.py	/^def test_cross_module_exceptions(msg):$/;"	f
test_cross_module_gil_acquired	tests/test_gil_scoped.py	/^def test_cross_module_gil_acquired():$/;"	f
test_cross_module_gil_inner_custom_acquired	tests/test_gil_scoped.py	/^def test_cross_module_gil_inner_custom_acquired():$/;"	f
test_cross_module_gil_inner_custom_released	tests/test_gil_scoped.py	/^def test_cross_module_gil_inner_custom_released():$/;"	f
test_cross_module_gil_inner_pybind11_acquired	tests/test_gil_scoped.py	/^def test_cross_module_gil_inner_pybind11_acquired():$/;"	f
test_cross_module_gil_inner_pybind11_released	tests/test_gil_scoped.py	/^def test_cross_module_gil_inner_pybind11_released():$/;"	f
test_cross_module_gil_nested_custom_acquired	tests/test_gil_scoped.py	/^def test_cross_module_gil_nested_custom_acquired():$/;"	f
test_cross_module_gil_nested_custom_released	tests/test_gil_scoped.py	/^def test_cross_module_gil_nested_custom_released():$/;"	f
test_cross_module_gil_nested_pybind11_acquired	tests/test_gil_scoped.py	/^def test_cross_module_gil_nested_pybind11_acquired():$/;"	f
test_cross_module_gil_nested_pybind11_released	tests/test_gil_scoped.py	/^def test_cross_module_gil_nested_pybind11_released():$/;"	f
test_cross_module_gil_released	tests/test_gil_scoped.py	/^def test_cross_module_gil_released():$/;"	f
test_cross_module_interleaved_error_already_set	tests/test_exceptions.py	/^def test_cross_module_interleaved_error_already_set():$/;"	f
test_ctypes_array_1d	tests/test_buffers.py	/^def test_ctypes_array_1d():$/;"	f
test_ctypes_array_2d	tests/test_buffers.py	/^def test_ctypes_array_2d():$/;"	f
test_ctypes_from_buffer	tests/test_buffers.py	/^def test_ctypes_from_buffer():$/;"	f
test_custom	tests/test_exceptions.py	/^def test_custom(msg):$/;"	f
test_custom_caster_destruction	tests/test_custom_type_casters.py	/^def test_custom_caster_destruction():$/;"	f
test_custom_caster_other_lib	tests/test_custom_type_casters.py	/^def test_custom_caster_other_lib():$/;"	f
test_custom_func	tests/test_callbacks.py	/^def test_custom_func():$/;"	f
test_custom_func2	tests/test_callbacks.py	/^def test_custom_func2():$/;"	f
test_custom_operator_new	tests/test_eigen_matrix.py	/^def test_custom_operator_new():$/;"	f
test_cyclic_gc	tests/test_methods_and_attributes.py	/^def test_cyclic_gc():$/;"	f
test_data	tests/test_numpy_array.py	/^def test_data(arr, args, ret):$/;"	f
test_def_submodule_failures	tests/test_modules.py	/^def test_def_submodule_failures():$/;"	f
test_dense	tests/test_eigen_matrix.py	/^def test_dense():$/;"	f
test_dense_signature	tests/test_eigen_matrix.py	/^def test_dense_signature(doc):$/;"	f
test_deque	tests/test_stl.py	/^def test_deque():$/;"	f
test_diamond_inheritance	tests/test_multiple_inheritance.py	/^def test_diamond_inheritance():$/;"	f
test_dict	tests/test_pytypes.py	/^def test_dict(capture, doc):$/;"	f
test_dim_check_fail	tests/test_numpy_array.py	/^def test_dim_check_fail(arr):$/;"	f
test_dispatch_issue	tests/test_virtual_functions.py	/^def test_dispatch_issue(msg):$/;"	f
test_doc_string	tests/test_eigen_tensor.py	/^def test_doc_string(m, doc):$/;"	f
test_docs	tests/test_numpy_vectorize.py	/^def test_docs(doc):$/;"	f
test_docstring_options	tests/test_docstring_options.py	/^def test_docstring_options():$/;"	f
test_docstring_signatures	tests/test_enum.py	/^def test_docstring_signatures():$/;"	f
test_docstrings	tests/test_class.py	/^def test_docstrings(doc):$/;"	f
test_downcast	tests/test_tagbased_polymorphic.py	/^def test_downcast():$/;"	f
test_dtype	tests/test_numpy_dtypes.py	/^def test_dtype(simple_dtype):$/;"	f
test_dtype_ctors	tests/test_numpy_dtypes.cpp	/^py::list test_dtype_ctors() {$/;"	f	class:E1	file:
test_dtype_refcount_leak	tests/test_numpy_array.py	/^def test_dtype_refcount_leak():$/;"	f
test_dtypes	tests/test_numpy_array.py	/^def test_dtypes():$/;"	f
test_dual	tests/test_iostream.py	/^def test_dual(capsys):$/;"	f
test_duplicate_enum_name	tests/test_enum.py	/^def test_duplicate_enum_name():$/;"	f
test_duplicate_local	tests/test_local_bindings.py	/^def test_duplicate_local():$/;"	f
test_duplicate_registration	tests/test_modules.py	/^def test_duplicate_registration():$/;"	f
test_dynamic_attributes	tests/test_methods_and_attributes.py	/^def test_dynamic_attributes():$/;"	f
test_eigen_keepalive	tests/test_eigen_matrix.py	/^def test_eigen_keepalive():$/;"	f
test_eigen_ref_life_support	tests/test_eigen_matrix.py	/^def test_eigen_ref_life_support():$/;"	f
test_eigen_ref_mutators	tests/test_eigen_matrix.py	/^def test_eigen_ref_mutators():$/;"	f
test_eigen_ref_to_python	tests/test_eigen_matrix.py	/^def test_eigen_ref_to_python():$/;"	f
test_eigen_return_references	tests/test_eigen_matrix.py	/^def test_eigen_return_references():$/;"	f
test_enum_array	tests/test_numpy_dtypes.py	/^def test_enum_array():$/;"	f
test_enum_pickle	tests/test_pickling.py	/^def test_enum_pickle():$/;"	f
test_enum_to_int	tests/test_enum.py	/^def test_enum_to_int():$/;"	f
test_err	tests/test_iostream.py	/^def test_err(capfd):$/;"	f
test_error_after_conversions	tests/test_class.py	/^def test_error_after_conversions():$/;"	f
test_error_already_set	tests/test_exceptions.py	/^def test_error_already_set(msg):$/;"	f
test_error_already_set_double_restore	tests/test_exceptions.py	/^def test_error_already_set_double_restore():$/;"	f
test_error_already_set_message_with_malformed_utf8	tests/test_exceptions.py	/^def test_error_already_set_message_with_malformed_utf8():$/;"	f
test_error_already_set_message_with_unicode_surrogate	tests/test_exceptions.py	/^def test_error_already_set_message_with_unicode_surrogate():  # Issue #4288$/;"	f
test_error_already_set_what_with_happy_exceptions	tests/test_exceptions.py	/^def test_error_already_set_what_with_happy_exceptions($/;"	f
test_eval_closure	tests/test_eval.py	/^def test_eval_closure():$/;"	f
test_eval_empty_globals	tests/test_eval.py	/^def test_eval_empty_globals():$/;"	f
test_eval_file	tests/test_eval.py	/^def test_eval_file():$/;"	f
test_evals	tests/test_eval.py	/^def test_evals(capture):$/;"	f
test_exc_sp	tests/test_constants_and_functions.cpp	/^namespace test_exc_sp {$/;"	n	file:
test_exception_matches	tests/test_exceptions.py	/^def test_exception_matches():$/;"	f
test_exception_rvalue_abort	tests/test_class.py	/^def test_exception_rvalue_abort():$/;"	f
test_exception_specifiers	tests/test_constants_and_functions.py	/^def test_exception_specifiers():$/;"	f
test_exp_optional	tests/test_stl.py	/^def test_exp_optional():$/;"	f
test_external_float_	tests/test_pytypes.py	/^def test_external_float_():$/;"	f
test_final	tests/test_class.py	/^def test_final():$/;"	f
test_fixed	tests/test_eigen_matrix.py	/^def test_fixed():$/;"	f
test_flaky_exception_failure_point_init	tests/test_exceptions.py	/^def test_flaky_exception_failure_point_init():$/;"	f
test_flaky_exception_failure_point_str	tests/test_exceptions.py	/^def test_flaky_exception_failure_point_str():$/;"	f
test_float	tests/test_pytypes.py	/^def test_float(doc):$/;"	f
test_floating_point_duration	tests/test_chrono.py	/^def test_floating_point_duration():$/;"	f
test_flush	tests/test_iostream.py	/^def test_flush(capfd):$/;"	f
test_fn_cast_int_exception	tests/test_exceptions.py	/^def test_fn_cast_int_exception():$/;"	f
test_format_descriptor_format_buffer_info_equiv	tests/test_buffers.py	/^def test_format_descriptor_format_buffer_info_equiv(cpp_name, np_dtype):$/;"	f
test_format_descriptors	tests/test_numpy_dtypes.py	/^def test_format_descriptors():$/;"	f
test_format_descriptors_for_floating_point_types	tests/test_numpy_array.py	/^def test_format_descriptors_for_floating_point_types(test_func):$/;"	f
test_from_iterable	tests/test_pytypes.py	/^def test_from_iterable(pytype, from_iter_func):$/;"	f
test_from_python	tests/test_buffers.py	/^def test_from_python():$/;"	f
test_frozenset	tests/test_pytypes.py	/^def test_frozenset(capture, doc):$/;"	f
test_fs_path	tests/test_stl.py	/^def test_fs_path():$/;"	f
test_function1	tests/test_constants_and_functions.cpp	/^std::string test_function1() { return "test_function()"; }$/;"	f
test_function2	tests/test_constants_and_functions.cpp	/^std::string test_function2(MyEnum k) { return "test_function(enum=" + std::to_string(k) + ")"; }$/;"	f
test_function3	tests/test_constants_and_functions.cpp	/^std::string test_function3(int i) { return "test_function(" + std::to_string(i) + ")"; }$/;"	f
test_function4	tests/test_constants_and_functions.cpp	/^py::str test_function4() { return "test_function()"; }$/;"	f
test_function4	tests/test_constants_and_functions.cpp	/^py::str test_function4(char *) { return "test_function(char *)"; }$/;"	f
test_function4	tests/test_constants_and_functions.cpp	/^py::str test_function4(float, int) { return "test_function(float, int)"; }$/;"	f
test_function4	tests/test_constants_and_functions.cpp	/^py::str test_function4(int, float) { return "test_function(int, float)"; }$/;"	f
test_function_overloading	tests/test_constants_and_functions.py	/^def test_function_overloading():$/;"	f
test_function_record_leaks	tests/test_constants_and_functions.py	/^def test_function_record_leaks():$/;"	f
test_function_signatures	tests/test_callbacks.py	/^def test_function_signatures(doc):$/;"	f
test_function_signatures	tests/test_kwargs_and_defaults.py	/^def test_function_signatures(doc):$/;"	f
test_function_with_string_and_vector_string_arg	tests/test_stl.py	/^def test_function_with_string_and_vector_string_arg():$/;"	f
test_generalized_iterators	tests/test_sequences_and_iterators.py	/^def test_generalized_iterators():$/;"	f
test_generalized_iterators_simple	tests/test_sequences_and_iterators.py	/^def test_generalized_iterators_simple():$/;"	f
test_gil	tests/test_virtual_functions.cpp	/^static void test_gil() {$/;"	f	file:
test_gil_from_thread	tests/test_virtual_functions.cpp	/^static void test_gil_from_thread() {$/;"	f	file:
test_greedy_string_overload	tests/test_numpy_array.py	/^def test_greedy_string_overload():$/;"	f
test_guard_capture	tests/test_iostream.py	/^def test_guard_capture(capsys):$/;"	f
test_handle_from_move_only_type_with_operator_PyObject	tests/test_pytypes.py	/^def test_handle_from_move_only_type_with_operator_PyObject():$/;"	f
test_hash	tests/test_pytypes.py	/^def test_hash():$/;"	f
test_have_at_least_one_class_any_struct	tests/test_unnamed_namespace_a.py	/^def test_have_at_least_one_class_any_struct():$/;"	f
test_have_attr_any_struct	tests/test_unnamed_namespace_b.py	/^def test_have_attr_any_struct():$/;"	f
test_have_both_class_any_struct	tests/test_unnamed_namespace_a.py	/^def test_have_both_class_any_struct():$/;"	f
test_have_class_any_struct	tests/test_unnamed_namespace_a.py	/^def test_have_class_any_struct(any_struct):$/;"	f
test_holder_with_addressof_operator	tests/test_smart_ptr.py	/^def test_holder_with_addressof_operator():$/;"	f
test_implementation_details	tests/test_pytypes.py	/^def test_implementation_details():$/;"	f
test_implicit_casting	tests/test_pytypes.py	/^def test_implicit_casting():$/;"	f
test_implicit_conversion	tests/test_enum.py	/^def test_implicit_conversion():$/;"	f
test_implicit_conversion	tests/test_thread.py	/^def test_implicit_conversion():$/;"	f
test_implicit_conversion_life_support	tests/test_class.py	/^def test_implicit_conversion_life_support():$/;"	f
test_implicit_conversion_no_gil	tests/test_thread.py	/^def test_implicit_conversion_no_gil():$/;"	f
test_import_avoid_stl_array	tests/test_eigen_tensor.py	/^def test_import_avoid_stl_array():$/;"	f
test_importing	tests/test_modules.py	/^def test_importing():$/;"	f
test_index_offset	tests/test_numpy_array.py	/^def test_index_offset(arr, args, ret):$/;"	f
test_index_using_ellipsis	tests/test_numpy_array.py	/^def test_index_using_ellipsis():$/;"	f
test_indirect_cycle	tests/test_custom_type_setup.py	/^def test_indirect_cycle(gc_tester):$/;"	f
test_inheritance	tests/test_class.py	/^def test_inheritance(msg):$/;"	f
test_inheritance_init	tests/test_class.py	/^def test_inheritance_init(msg):$/;"	f
test_inherited_protocol	tests/test_buffers.py	/^def test_inherited_protocol():$/;"	f
test_inherited_virtuals	tests/test_virtual_functions.py	/^def test_inherited_virtuals():$/;"	f
test_init_factory_alias	tests/test_factory_constructors.py	/^def test_init_factory_alias():$/;"	f
test_init_factory_basic	tests/test_factory_constructors.py	/^def test_init_factory_basic():$/;"	f
test_init_factory_casting	tests/test_factory_constructors.py	/^def test_init_factory_casting():$/;"	f
test_init_factory_dual	tests/test_factory_constructors.py	/^def test_init_factory_dual():$/;"	f
test_init_factory_signature	tests/test_factory_constructors.py	/^def test_init_factory_signature(msg):$/;"	f
test_initializer	tests/pybind11_tests.cpp	/^test_initializer::test_initializer(Initializer init) { initializers().emplace_back(init); }$/;"	f	class:test_initializer
test_initializer	tests/pybind11_tests.cpp	/^test_initializer::test_initializer(const char *submodule_name, Initializer init) {$/;"	f	class:test_initializer
test_initializer	tests/pybind11_tests.h	/^class test_initializer {$/;"	c
test_initializer_list	tests/test_numpy_array.py	/^def test_initializer_list():$/;"	f
test_inplace_and	tests/test_pytypes.py	/^def test_inplace_and(a, b):$/;"	f
test_inplace_append	tests/test_pytypes.py	/^def test_inplace_append(a, b):$/;"	f
test_inplace_divide	tests/test_pytypes.py	/^def test_inplace_divide(a, b):$/;"	f
test_inplace_lshift	tests/test_pytypes.py	/^def test_inplace_lshift(a, b):$/;"	f
test_inplace_multiply	tests/test_pytypes.py	/^def test_inplace_multiply(a, b):$/;"	f
test_inplace_or	tests/test_pytypes.py	/^def test_inplace_or(a, b):$/;"	f
test_inplace_rshift	tests/test_pytypes.py	/^def test_inplace_rshift(a, b):$/;"	f
test_inplace_subtract	tests/test_pytypes.py	/^def test_inplace_subtract(a, b):$/;"	f
test_instance	tests/test_class.py	/^def test_instance(msg):$/;"	f
test_instance_new	tests/test_class.py	/^def test_instance_new():$/;"	f
test_int	tests/test_pytypes.py	/^def test_int(doc):$/;"	f
test_int_convert	tests/test_builtin_casters.py	/^def test_int_convert():$/;"	f
test_int_long	tests/test_builtin_casters.py	/^def test_int_long():$/;"	f
test_integer_casting	tests/test_builtin_casters.py	/^def test_integer_casting():$/;"	f
test_internal_locals_differ	tests/test_local_bindings.py	/^def test_internal_locals_differ():$/;"	f
test_intree_extensions	tests/extra_setuptools/test_setuphelper.py	/^def test_intree_extensions(monkeypatch, tmpdir):$/;"	f
test_intree_extensions_package_dir	tests/extra_setuptools/test_setuphelper.py	/^def test_intree_extensions_package_dir(monkeypatch, tmpdir):$/;"	f
test_invalid_repr	tests/test_exceptions.py	/^def test_invalid_repr():$/;"	f
test_invalid_self	tests/test_factory_constructors.py	/^def test_invalid_self():$/;"	f
test_is_setter	tests/test_methods_and_attributes.py	/^def test_is_setter():$/;"	f
test_isinstance	tests/test_class.py	/^def test_isinstance():$/;"	f
test_isinstance	tests/test_numpy_array.py	/^def test_isinstance():$/;"	f
test_isinstance_string_types	tests/test_pytypes.py	/^def test_isinstance_string_types():$/;"	f
test_issue1105	tests/test_eigen_matrix.py	/^def test_issue1105():$/;"	f
test_issue2361	tests/test_pytypes.py	/^def test_issue2361():$/;"	f
test_issue738	tests/test_eigen_matrix.py	/^def test_issue738():$/;"	f
test_issue_1454	tests/test_virtual_functions.py	/^def test_issue_1454():$/;"	f
test_issue_1561	tests/test_stl.py	/^def test_issue_1561():$/;"	f
test_iterable	tests/test_pytypes.py	/^def test_iterable(doc):$/;"	f
test_iterator	tests/test_pytypes.py	/^def test_iterator(doc):$/;"	f
test_iterator_passthrough	tests/test_sequences_and_iterators.py	/^def test_iterator_passthrough():$/;"	f
test_iterator_referencing	tests/test_sequences_and_iterators.py	/^def test_iterator_referencing():$/;"	f
test_iterator_rvp	tests/test_sequences_and_iterators.py	/^def test_iterator_rvp():$/;"	f
test_keep_alive_argument	tests/test_call_policies.py	/^def test_keep_alive_argument(capture):$/;"	f
test_keep_alive_constructor	tests/test_call_policies.py	/^def test_keep_alive_constructor(capture):$/;"	f
test_keep_alive_return_value	tests/test_call_policies.py	/^def test_keep_alive_return_value(capture):$/;"	f
test_keyword_args_and_generalized_unpacking	tests/test_callbacks.py	/^def test_keyword_args_and_generalized_unpacking():$/;"	f
test_keyword_only_args	tests/test_kwargs_and_defaults.py	/^def test_keyword_only_args(msg):$/;"	f
test_lacking_copy_ctor	tests/test_copy_move.py	/^def test_lacking_copy_ctor():$/;"	f
test_lacking_move_ctor	tests/test_copy_move.py	/^def test_lacking_move_ctor():$/;"	f
test_lambda_closure_cleanup	tests/test_callbacks.py	/^def test_lambda_closure_cleanup():$/;"	f
test_large_holder	tests/test_smart_ptr.py	/^def test_large_holder():$/;"	f
test_list	tests/test_pytypes.py	/^def test_list(capture, doc):$/;"	f
test_list_rvalue_getter	tests/test_pytypes.py	/^def test_list_rvalue_getter():$/;"	f
test_list_slicing	tests/test_pytypes.py	/^def test_list_slicing():$/;"	f
test_load_external	tests/test_local_bindings.py	/^def test_load_external():$/;"	f
test_local_bindings	tests/test_local_bindings.py	/^def test_local_bindings():$/;"	f
test_local_translator	tests/test_exceptions.py	/^def test_local_translator(msg):$/;"	f
test_make_c_f_array	tests/test_numpy_array.py	/^def test_make_c_f_array():$/;"	f
test_make_empty_shaped_array	tests/test_numpy_array.py	/^def test_make_empty_shaped_array():$/;"	f
test_map	tests/test_stl.py	/^def test_map(doc):$/;"	f
test_map_delitem	tests/test_stl_binders.py	/^def test_map_delitem():$/;"	f
test_map_iterator	tests/test_sequences_and_iterators.py	/^def test_map_iterator():$/;"	f
test_map_string_double	tests/test_stl_binders.py	/^def test_map_string_double():$/;"	f
test_map_string_double_const	tests/test_stl_binders.py	/^def test_map_string_double_const():$/;"	f
test_map_view_types	tests/test_stl_binders.py	/^def test_map_view_types():$/;"	f
test_memoryview	tests/test_pytypes.py	/^def test_memoryview(method, args, fmt, expected_view):$/;"	f
test_memoryview_from_buffer_empty_shape	tests/test_pytypes.py	/^def test_memoryview_from_buffer_empty_shape():$/;"	f
test_memoryview_from_memory	tests/test_pytypes.py	/^def test_memoryview_from_memory():$/;"	f
test_memoryview_refcount	tests/test_pytypes.py	/^def test_memoryview_refcount(method):$/;"	f
test_metaclass_override	tests/test_methods_and_attributes.py	/^def test_metaclass_override():$/;"	f
test_method_vectorization	tests/test_numpy_vectorize.py	/^def test_method_vectorization():$/;"	f
test_methods_and_attributes	tests/test_methods_and_attributes.py	/^def test_methods_and_attributes():$/;"	f
test_mi_base_return	tests/test_multiple_inheritance.py	/^def test_mi_base_return():$/;"	f
test_mi_dynamic_attributes	tests/test_multiple_inheritance.py	/^def test_mi_dynamic_attributes():$/;"	f
test_mi_static_properties	tests/test_multiple_inheritance.py	/^def test_mi_static_properties():$/;"	f
test_mi_unaligned_base	tests/test_multiple_inheritance.py	/^def test_mi_unaligned_base():$/;"	f
test_mismatched_holder	tests/test_class.py	/^def test_mismatched_holder():$/;"	f
test_missing_header_message	tests/test_stl.py	/^def test_missing_header_message():$/;"	f
test_mixed_args_and_kwargs	tests/test_kwargs_and_defaults.py	/^def test_mixed_args_and_kwargs(msg):$/;"	f
test_mixed_local_global	tests/test_local_bindings.py	/^def test_mixed_local_global():$/;"	f
test_movable_object	tests/test_callbacks.py	/^def test_movable_object():$/;"	f
test_move_and_copy_casts	tests/test_copy_move.py	/^def test_move_and_copy_casts():$/;"	f
test_move_and_copy_load_optional	tests/test_copy_move.py	/^def test_move_and_copy_load_optional():$/;"	f
test_move_and_copy_loads	tests/test_copy_move.py	/^def test_move_and_copy_loads():$/;"	f
test_move_fallback	tests/test_copy_move.py	/^def test_move_fallback():$/;"	f
test_move_only_holder	tests/test_smart_ptr.py	/^def test_move_only_holder():$/;"	f
test_move_only_holder_with_addressof_operator	tests/test_smart_ptr.py	/^def test_move_only_holder_with_addressof_operator():$/;"	f
test_move_out_container	tests/test_stl.py	/^def test_move_out_container():$/;"	f
test_move_support	tests/test_virtual_functions.py	/^def test_move_support():$/;"	f
test_multi_acquire_release_cross_module	tests/test_gil_scoped.py	/^def test_multi_acquire_release_cross_module():$/;"	f
test_multi_captured	tests/test_iostream.py	/^def test_multi_captured(capfd):$/;"	f
test_multiple_inheritance	tests/test_factory_constructors.py	/^def test_multiple_inheritance():$/;"	f
test_multiple_inheritance_cpp	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_cpp():$/;"	f
test_multiple_inheritance_mix1	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_mix1():$/;"	f
test_multiple_inheritance_mix2	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_mix2():$/;"	f
test_multiple_inheritance_python	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_python():$/;"	f
test_multiple_inheritance_python_many_bases	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_python_many_bases():$/;"	f
test_multiple_inheritance_virtbase	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_virtbase():$/;"	f
test_multiple_instances_with_same_pointer	tests/test_class.py	/^def test_multiple_instances_with_same_pointer():$/;"	f
test_mutate_data	tests/test_numpy_array.py	/^def test_mutate_data(arr):$/;"	f
test_mutate_readonly	tests/test_numpy_array.py	/^def test_mutate_readonly(arr):$/;"	f
test_mutator_descriptors	tests/test_eigen_matrix.py	/^def test_mutator_descriptors():$/;"	f
test_named_arguments	tests/test_eigen_matrix.py	/^def test_named_arguments():$/;"	f
test_named_arguments	tests/test_kwargs_and_defaults.py	/^def test_named_arguments():$/;"	f
test_nano_timepoint	tests/test_chrono.py	/^def test_nano_timepoint():$/;"	f
test_negative_stride_from_python	tests/test_eigen_matrix.py	/^def test_negative_stride_from_python(msg):$/;"	f
test_nested	tests/test_operator_overloading.py	/^def test_nested():$/;"	f
test_nested_acquire	tests/test_gil_scoped.py	/^def test_nested_acquire():$/;"	f
test_nested_modules	tests/test_modules.py	/^def test_nested_modules():$/;"	f
test_nested_throws	tests/test_exceptions.py	/^def test_nested_throws(capture):$/;"	f
test_no_mixed_overloads	tests/test_methods_and_attributes.py	/^def test_no_mixed_overloads():$/;"	f
test_no_placement_new	tests/test_factory_constructors.py	/^def test_no_placement_new(capture):$/;"	f
test_noconvert_args	tests/test_custom_type_casters.py	/^def test_noconvert_args(msg):$/;"	f
test_nocopy_wrapper	tests/test_eigen_matrix.py	/^def test_nocopy_wrapper():$/;"	f
test_noexcept_lambda	tests/test_constants_and_functions.py	/^def test_noexcept_lambda():$/;"	f
test_non_converting_constructors	tests/test_pytypes.py	/^def test_non_converting_constructors():$/;"	f
test_non_final_final	tests/test_class.py	/^def test_non_final_final():$/;"	f
test_noncopyable_containers	tests/test_stl_binders.py	/^def test_noncopyable_containers():$/;"	f
test_none	tests/test_pytypes.py	/^def test_none(doc):$/;"	f
test_none_deferred	tests/test_builtin_casters.py	/^def test_none_deferred():$/;"	f
test_nonlocal_failure	tests/test_local_bindings.py	/^def test_nonlocal_failure():$/;"	f
test_nonref_iterators	tests/test_sequences_and_iterators.py	/^def test_nonref_iterators():$/;"	f
test_nonunit_stride_from_python	tests/test_eigen_matrix.py	/^def test_nonunit_stride_from_python():$/;"	f
test_nonunit_stride_to_python	tests/test_eigen_matrix.py	/^def test_nonunit_stride_to_python():$/;"	f
test_not_captured	tests/test_iostream.py	/^def test_not_captured(capfd):$/;"	f
test_number_protocol	tests/test_pytypes.py	/^def test_number_protocol():$/;"	f
test_numpy_bool	tests/test_builtin_casters.py	/^def test_numpy_bool():$/;"	f
test_numpy_int_convert	tests/test_builtin_casters.py	/^def test_numpy_int_convert():$/;"	f
test_numpy_ref_mutators	tests/test_eigen_matrix.py	/^def test_numpy_ref_mutators():$/;"	f
test_numpy_view	tests/test_numpy_array.py	/^def test_numpy_view(capture):$/;"	f
test_obj_class_name	tests/test_class.py	/^def test_obj_class_name():$/;"	f
test_obj_class_name	tests/test_pytypes.py	/^def test_obj_class_name():$/;"	f
test_operator_new_delete	tests/test_class.py	/^def test_operator_new_delete(capture):$/;"	f
test_operator_overloading	tests/test_operator_overloading.py	/^def test_operator_overloading():$/;"	f
test_operators_notimplemented	tests/test_operator_overloading.py	/^def test_operators_notimplemented():$/;"	f
test_optional	tests/test_stl.py	/^def test_optional():$/;"	f
test_overload_ordering	tests/test_methods_and_attributes.py	/^def test_overload_ordering():$/;"	f
test_overload_resolution	tests/test_numpy_array.py	/^def test_overload_resolution(msg):$/;"	f
test_override	tests/test_virtual_functions.py	/^def test_override(capture, msg):$/;"	f
test_override_cache	tests/test_virtual_functions.cpp	/^inline int test_override_cache(std::shared_ptr<test_override_cache_helper> const &instance) {$/;"	f
test_override_cache_helper	tests/test_embed/test_interpreter.cpp	/^class test_override_cache_helper {$/;"	c	file:
test_override_cache_helper	tests/test_virtual_functions.cpp	/^class test_override_cache_helper {$/;"	c	file:
test_override_cache_helper_trampoline	tests/test_embed/test_interpreter.cpp	/^class test_override_cache_helper_trampoline : public test_override_cache_helper {$/;"	c	file:
test_override_cache_helper_trampoline	tests/test_virtual_functions.cpp	/^class test_override_cache_helper_trampoline : public test_override_cache_helper {$/;"	c	file:
test_override_ref	tests/test_virtual_functions.py	/^def test_override_ref():$/;"	f
test_override_static	tests/test_class.py	/^def test_override_static():$/;"	f
test_overriding_eq_reset_hash	tests/test_operator_overloading.py	/^def test_overriding_eq_reset_hash():$/;"	f
test_partially_fixed	tests/test_eigen_matrix.py	/^def test_partially_fixed():$/;"	f
test_pass_array_pyobject_ptr_return_as_list	tests/test_numpy_array.py	/^def test_pass_array_pyobject_ptr_return_as_list():$/;"	f
test_pass_array_pyobject_ptr_return_sum_str_values_list	tests/test_numpy_array.py	/^def test_pass_array_pyobject_ptr_return_sum_str_values_list():$/;"	f
test_pass_array_pyobject_ptr_return_sum_str_values_ndarray	tests/test_numpy_array.py	/^def test_pass_array_pyobject_ptr_return_sum_str_values_ndarray():$/;"	f
test_pass_bytes_or_unicode_to_string_types	tests/test_pytypes.py	/^def test_pass_bytes_or_unicode_to_string_types():$/;"	f
test_pass_list_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_pass_list_pyobject_ptr():$/;"	f
test_pass_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_pass_pyobject_ptr():$/;"	f
test_pass_readonly_array	tests/test_eigen_matrix.py	/^def test_pass_readonly_array():$/;"	f
test_passthrough_arguments	tests/test_numpy_vectorize.py	/^def test_passthrough_arguments(doc):$/;"	f
test_pickle_simple_callable	tests/test_pickling.py	/^def test_pickle_simple_callable():$/;"	f
test_pointer_to_member_fn	tests/test_buffers.py	/^def test_pointer_to_member_fn():$/;"	f
test_pointers	tests/test_opaque_types.py	/^def test_pointers(msg):$/;"	f
test_populate_dict_rvalue	tests/test_pytypes.py	/^def test_populate_dict_rvalue():$/;"	f
test_populate_obj_str_attrs	tests/test_pytypes.py	/^def test_populate_obj_str_attrs():$/;"	f
test_positional_only_args	tests/test_kwargs_and_defaults.py	/^def test_positional_only_args():$/;"	f
test_pr3635_diamond_b	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_b():$/;"	f
test_pr3635_diamond_c	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_c():$/;"	f
test_pr3635_diamond_d0	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_d0():$/;"	f
test_pr3635_diamond_d1	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_d1():$/;"	f
test_pr3635_diamond_e	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_e():$/;"	f
test_pr3635_diamond_f	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_f():$/;"	f
test_pr4220_tripped_over_this	tests/test_class.py	/^def test_pr4220_tripped_over_this():$/;"	f
test_print	tests/test_pytypes.py	/^def test_print(capture):$/;"	f
test_private_op_new	tests/test_copy_move.py	/^def test_private_op_new():$/;"	f
test_properties	tests/test_methods_and_attributes.py	/^def test_properties():$/;"	f
test_property_return_value_policies	tests/test_methods_and_attributes.py	/^def test_property_return_value_policies(access):$/;"	f
test_property_rvalue_policy	tests/test_methods_and_attributes.py	/^def test_property_rvalue_policy():$/;"	f
test_pybind11_str_raw_str	tests/test_pytypes.py	/^def test_pybind11_str_raw_str():$/;"	f
test_pydoc	tests/test_modules.py	/^def test_pydoc():$/;"	f
test_pypy_oserror_normalization	tests/test_exceptions.py	/^def test_pypy_oserror_normalization():$/;"	f
test_python_alreadyset_in_destructor	tests/test_exceptions.py	/^def test_python_alreadyset_in_destructor(monkeypatch, capsys):$/;"	f
test_python_builtins	tests/test_callbacks.py	/^def test_python_builtins():$/;"	f
test_python_call_in_catch	tests/test_exceptions.py	/^def test_python_call_in_catch():$/;"	f
test_python_inherit_from_mi	tests/test_multiple_inheritance.py	/^def test_python_inherit_from_mi():$/;"	f
test_python_iterator_in_cpp	tests/test_sequences_and_iterators.py	/^def test_python_iterator_in_cpp():$/;"	f
test_python_override	tests/test_virtual_functions.py	/^def test_python_override():$/;"	f
test_pytype_rvalue_cast	tests/test_copy_move.py	/^def test_pytype_rvalue_cast():$/;"	f
test_qualname	tests/test_class.py	/^def test_qualname(doc):$/;"	f
test_raise_from	tests/test_exceptions.py	/^def test_raise_from(msg):$/;"	f
test_raise_from_already_set	tests/test_exceptions.py	/^def test_raise_from_already_set(msg):$/;"	f
test_random_access_iterator	tests/test_sequences_and_iterators.cpp	/^py::list test_random_access_iterator(PythonType x) {$/;"	f
test_readonly_buffer	tests/test_buffers.py	/^def test_readonly_buffer():$/;"	f
test_reallocation_a	tests/test_factory_constructors.py	/^def test_reallocation_a(capture, msg):$/;"	f
test_reallocation_b	tests/test_factory_constructors.py	/^def test_reallocation_b(capture, msg):$/;"	f
test_reallocation_c	tests/test_factory_constructors.py	/^def test_reallocation_c(capture, msg):$/;"	f
test_reallocation_d	tests/test_factory_constructors.py	/^def test_reallocation_d(capture, msg):$/;"	f
test_reallocation_e	tests/test_factory_constructors.py	/^def test_reallocation_e(capture, msg):$/;"	f
test_reallocation_f	tests/test_factory_constructors.py	/^def test_reallocation_f(capture, msg):$/;"	f
test_reallocation_g	tests/test_factory_constructors.py	/^def test_reallocation_g(capture, msg):$/;"	f
test_recarray	tests/test_numpy_dtypes.py	/^def test_recarray(simple_dtype, packed_dtype):$/;"	f
test_recursive_casting	tests/test_stl.py	/^def test_recursive_casting():$/;"	f
test_recursive_dispatch_issue	tests/test_virtual_functions.py	/^def test_recursive_dispatch_issue():$/;"	f
test_recursive_map	tests/test_stl_binders.py	/^def test_recursive_map():$/;"	f
test_recursive_vector	tests/test_stl_binders.py	/^def test_recursive_vector():$/;"	f
test_redirect	tests/test_iostream.py	/^def test_redirect(capfd):$/;"	f
test_redirect_both	tests/test_iostream.py	/^def test_redirect_both(capfd):$/;"	f
test_redirect_err	tests/test_iostream.py	/^def test_redirect_err(capfd):$/;"	f
test_reentrant_implicit_conversion_failure	tests/test_class.py	/^def test_reentrant_implicit_conversion_failure(msg):$/;"	f
test_ref_qualified	tests/test_methods_and_attributes.py	/^def test_ref_qualified():$/;"	f
test_reference_internal	tests/test_eigen_tensor.py	/^def test_reference_internal(m, member_name):$/;"	f
test_reference_internal	tests/test_modules.py	/^def test_reference_internal():$/;"	f
test_reference_sensitive_optional	tests/test_stl.py	/^def test_reference_sensitive_optional():$/;"	f
test_reference_wrapper	tests/test_builtin_casters.py	/^def test_reference_wrapper():$/;"	f
test_references_actually_refer	tests/test_eigen_tensor.py	/^def test_references_actually_refer(m):$/;"	f
test_register_dtype	tests/test_numpy_dtypes.py	/^def test_register_dtype():$/;"	f
test_register_duplicate_class	tests/test_class.py	/^def test_register_duplicate_class():$/;"	f
test_release_acquire	tests/test_gil_scoped.py	/^def test_release_acquire():$/;"	f
test_repr	tests/test_class.py	/^def test_repr():$/;"	f
test_reshape_initializer_list	tests/test_numpy_array.py	/^def test_reshape_initializer_list():$/;"	f
test_reshape_tuple	tests/test_numpy_array.py	/^def test_reshape_tuple():$/;"	f
test_return_array_pyobject_ptr_cpp_loop	tests/test_numpy_array.py	/^def test_return_array_pyobject_ptr_cpp_loop(return_array_pyobject_ptr, unwrap):$/;"	f
test_return_list_pyobject_ptr_reference	tests/test_type_caster_pyobject_ptr.py	/^def test_return_list_pyobject_ptr_reference():$/;"	f
test_return_list_pyobject_ptr_take_ownership	tests/test_type_caster_pyobject_ptr.py	/^def test_return_list_pyobject_ptr_take_ownership():$/;"	f
test_return_none	tests/test_call_policies.py	/^def test_return_none(capture):$/;"	f
test_return_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_return_pyobject_ptr():$/;"	f
test_return_set_of_unhashable	tests/test_operator_overloading.py	/^def test_return_set_of_unhashable():$/;"	f
test_return_vector_bool_raw_ptr	tests/test_stl.py	/^def test_return_vector_bool_raw_ptr():$/;"	f
test_round_trip	tests/test_eigen_tensor.py	/^def test_round_trip(m):$/;"	f
test_round_trip_float	tests/test_numpy_array.py	/^def test_round_trip_float():$/;"	f
test_round_trip_references_actually_refer	tests/test_eigen_tensor.py	/^def test_round_trip_references_actually_refer(m):$/;"	f
test_roundtrip	tests/test_pickling.py	/^def test_roundtrip(cls_name):$/;"	f
test_roundtrip_simple_cpp_derived	tests/test_pickling.py	/^def test_roundtrip_simple_cpp_derived():$/;"	f
test_roundtrip_simple_py_derived	tests/test_pickling.py	/^def test_roundtrip_simple_py_derived():$/;"	f
test_roundtrip_with_dict	tests/test_pickling.py	/^def test_roundtrip_with_dict(cls_name):$/;"	f
test_run_in_process_direct	tests/test_gil_scoped.py	/^def test_run_in_process_direct(test_fn):$/;"	f
test_run_in_process_multiple_threads_parallel	tests/test_gil_scoped.py	/^def test_run_in_process_multiple_threads_parallel(test_fn):$/;"	f
test_run_in_process_multiple_threads_sequential	tests/test_gil_scoped.py	/^def test_run_in_process_multiple_threads_sequential(test_fn):$/;"	f
test_run_in_process_one_thread	tests/test_gil_scoped.py	/^def test_run_in_process_one_thread(test_fn):$/;"	f
test_rvalue_ref_param	tests/test_methods_and_attributes.py	/^def test_rvalue_ref_param():$/;"	f
test_scalar_conversion	tests/test_numpy_dtypes.py	/^def test_scalar_conversion():$/;"	f
test_scoped_enum	tests/test_enum.py	/^def test_scoped_enum():$/;"	f
test_selective_readonly_buffer	tests/test_buffers.py	/^def test_selective_readonly_buffer():$/;"	f
test_self_cycle	tests/test_custom_type_setup.py	/^def test_self_cycle(gc_tester):$/;"	f
test_sequence	tests/test_sequences_and_iterators.py	/^def test_sequence():$/;"	f
test_sequence_length	tests/test_sequences_and_iterators.py	/^def test_sequence_length():$/;"	f
test_series_captured	tests/test_iostream.py	/^def test_series_captured(capture):$/;"	f
test_set	tests/test_pytypes.py	/^def test_set(capture, doc):$/;"	f
test_set	tests/test_stl.py	/^def test_set(doc):$/;"	f
test_shared_ptr_and_references	tests/test_smart_ptr.py	/^def test_shared_ptr_and_references():$/;"	f
test_shared_ptr_from_this_and_references	tests/test_smart_ptr.py	/^def test_shared_ptr_from_this_and_references():$/;"	f
test_shared_ptr_gc	tests/test_smart_ptr.py	/^def test_shared_ptr_gc():$/;"	f
test_signature	tests/test_numpy_dtypes.py	/^def test_signature(doc):$/;"	f
test_signatures	tests/test_kwargs_and_defaults.py	/^def test_signatures():$/;"	f
test_simple_namespace	tests/test_pytypes.py	/^def test_simple_namespace():$/;"	f
test_simple_setup_py	tests/extra_setuptools/test_setuphelper.py	/^def test_simple_setup_py(monkeypatch, tmpdir, parallel, std):$/;"	f
test_simple_string	tests/test_builtin_casters.py	/^def test_simple_string():$/;"	f
test_single_char_arguments	tests/test_builtin_casters.py	/^def test_single_char_arguments():$/;"	f
test_slice_constructors	tests/test_sequences_and_iterators.py	/^def test_slice_constructors():$/;"	f
test_slice_constructors_explicit_optional	tests/test_sequences_and_iterators.py	/^def test_slice_constructors_explicit_optional():$/;"	f
test_sliceable	tests/test_sequences_and_iterators.py	/^def test_sliceable():$/;"	f
test_smart_ptr	tests/test_smart_ptr.py	/^def test_smart_ptr(capture):$/;"	f
test_smart_ptr_from_default	tests/test_smart_ptr.py	/^def test_smart_ptr_from_default():$/;"	f
test_smart_ptr_refcounting	tests/test_smart_ptr.py	/^def test_smart_ptr_refcounting():$/;"	f
test_sparse	tests/test_eigen_matrix.py	/^def test_sparse():$/;"	f
test_sparse_signature	tests/test_eigen_matrix.py	/^def test_sparse_signature(doc):$/;"	f
test_special_matrix_objects	tests/test_eigen_matrix.py	/^def test_special_matrix_objects():$/;"	f
test_static_cls	tests/test_methods_and_attributes.py	/^def test_static_cls():$/;"	f
test_static_properties	tests/test_methods_and_attributes.py	/^def test_static_properties():$/;"	f
test_std_exception	tests/test_exceptions.py	/^def test_std_exception(msg):$/;"	f
test_stl_bind_global	tests/test_local_bindings.py	/^def test_stl_bind_global():$/;"	f
test_stl_bind_local	tests/test_local_bindings.py	/^def test_stl_bind_local():$/;"	f
test_stl_caster_vs_stl_bind	tests/test_local_bindings.py	/^def test_stl_caster_vs_stl_bind(msg):$/;"	f
test_stl_ownership	tests/test_stl.py	/^def test_stl_ownership():$/;"	f
test_stl_pass_by_pointer	tests/test_stl.py	/^def test_stl_pass_by_pointer(msg):$/;"	f
test_str	tests/test_pytypes.py	/^def test_str(doc):$/;"	f
test_str_issue	tests/test_methods_and_attributes.py	/^def test_str_issue(msg):$/;"	f
test_str_leak	tests/test_numpy_dtypes.py	/^def test_str_leak():$/;"	f
test_string_array	tests/test_numpy_dtypes.py	/^def test_string_array():$/;"	f
test_string_list	tests/test_opaque_types.py	/^def test_string_list():$/;"	f
test_string_view	tests/test_builtin_casters.py	/^def test_string_view(capture):$/;"	f
test_surrogate_pairs_unicode_error	tests/test_pytypes.py	/^def test_surrogate_pairs_unicode_error(func):$/;"	f
test_test_memoryview_from_buffer_invalid_strides	tests/test_pytypes.py	/^def test_test_memoryview_from_buffer_invalid_strides():$/;"	f
test_test_memoryview_from_buffer_nullptr	tests/test_pytypes.py	/^def test_test_memoryview_from_buffer_nullptr():$/;"	f
test_threading	tests/test_iostream.py	/^def test_threading():$/;"	f
test_throw_nested_exception	tests/test_exceptions.py	/^def test_throw_nested_exception():$/;"	f
test_to_python	tests/test_buffers.py	/^def test_to_python():$/;"	f
test_trivial_broadcasting	tests/test_numpy_vectorize.py	/^def test_trivial_broadcasting():$/;"	f
test_tuple	tests/test_builtin_casters.py	/^def test_tuple(doc):$/;"	f
test_tuple	tests/test_pytypes.py	/^def test_tuple():$/;"	f
test_tuple_rvalue_getter	tests/test_pytypes.py	/^def test_tuple_rvalue_getter():$/;"	f
test_type	tests/test_class.py	/^def test_type():$/;"	f
test_type_caster_name_via_incompatible_function_arguments_type_error	tests/test_type_caster_pyobject_ptr.py	/^def test_type_caster_name_via_incompatible_function_arguments_type_error():$/;"	f
test_type_of_classic	tests/test_class.py	/^def test_type_of_classic():$/;"	f
test_type_of_py	tests/test_class.py	/^def test_type_of_py():$/;"	f
test_type_of_py_nodelete	tests/test_class.py	/^def test_type_of_py_nodelete():$/;"	f
test_type_selection	tests/test_numpy_vectorize.py	/^def test_type_selection():$/;"	f
test_unhashable_exceptions	tests/test_pytypes.py	/^def test_unhashable_exceptions(arg, func):$/;"	f
test_unicode_conversion	tests/test_builtin_casters.py	/^def test_unicode_conversion():$/;"	f
test_union	tests/test_union.py	/^def test_union():$/;"	f
test_unions	tests/test_opaque_types.py	/^def test_unions():$/;"	f
test_unique_deleter	tests/test_smart_ptr.py	/^def test_unique_deleter():$/;"	f
test_unique_nodelete	tests/test_smart_ptr.py	/^def test_unique_nodelete():$/;"	f
test_unique_nodelete4a	tests/test_smart_ptr.py	/^def test_unique_nodelete4a():$/;"	f
test_unregistered_base_implementations	tests/test_methods_and_attributes.py	/^def test_unregistered_base_implementations():$/;"	f
test_unscoped_enum	tests/test_enum.py	/^def test_unscoped_enum():$/;"	f
test_valarray	tests/test_stl.py	/^def test_valarray(doc):$/;"	f
test_variant	tests/test_stl.py	/^def test_variant(doc):$/;"	f
test_variant_monostate	tests/test_stl.py	/^def test_variant_monostate(doc):$/;"	f
test_vec_of_reference_wrapper	tests/test_stl.py	/^def test_vec_of_reference_wrapper():$/;"	f
test_vector	tests/test_stl.py	/^def test_vector(doc):$/;"	f
test_vector_bool	tests/test_stl_binders.py	/^def test_vector_bool():$/;"	f
test_vector_buffer	tests/test_stl_binders.py	/^def test_vector_buffer():$/;"	f
test_vector_buffer_numpy	tests/test_stl_binders.py	/^def test_vector_buffer_numpy():$/;"	f
test_vector_custom	tests/test_stl_binders.py	/^def test_vector_custom():$/;"	f
test_vector_int	tests/test_stl_binders.py	/^def test_vector_int():$/;"	f
test_vectorize	tests/test_numpy_dtypes.py	/^def test_vectorize():$/;"	f
test_vectorize	tests/test_numpy_vectorize.py	/^def test_vectorize(capture):$/;"	f
test_vectorized_noreturn	tests/test_numpy_vectorize.py	/^def test_vectorized_noreturn():$/;"	f
test_void_caster	tests/test_builtin_casters.py	/^def test_void_caster():$/;"	f
test_void_caster_2	tests/test_builtin_casters.py	/^def test_void_caster_2():$/;"	f
test_weakref	tests/test_pytypes.py	/^def test_weakref(create_weakref, create_weakref_with_callback):$/;"	f
test_weakref_err	tests/test_pytypes.py	/^def test_weakref_err(create_weakref, has_callback):$/;"	f
test_wrap	tests/test_numpy_array.py	/^def test_wrap():$/;"	f
test_zero_length	tests/test_eigen_matrix.py	/^def test_zero_length(func, sizes):$/;"	f
tests	noxfile.py	/^def tests(session: nox.Session) -> None:$/;"	f
tests_build_global_wheel	tests/extra_python_package/test_files.py	/^def tests_build_global_wheel(monkeypatch, tmpdir):$/;"	f
tests_build_wheel	tests/extra_python_package/test_files.py	/^def tests_build_wheel(monkeypatch, tmpdir):$/;"	f
tests_packaging	noxfile.py	/^def tests_packaging(session: nox.Session) -> None:$/;"	f
texinfo_documents	docs/conf.py	/^texinfo_documents = [$/;"	v
the_answer	tests/test_embed/test_interpreter.py	/^    def the_answer(self):$/;"	m	class:DerivedWidget
the_message	tests/test_embed/test_interpreter.cpp	/^    std::string the_message() const { return message; }$/;"	f	class:Widget
throw_myex	tests/test_exceptions.py	/^    def throw_myex():$/;"	f	function:test_nested_throws
throw_myex5	tests/test_exceptions.py	/^    def throw_myex5():$/;"	f	function:test_nested_throws
times_hundred	tests/test_stl_binders.cpp	/^NestMap *times_hundred(int n) {$/;"	f
times_ten	tests/test_stl_binders.cpp	/^Map *times_ten(int n) {$/;"	f
timestamp_m	tests/test_chrono.cpp	/^    time_point_m timestamp_m;$/;"	m	struct:different_resolutions	file:
timestamp_ms	tests/test_chrono.cpp	/^    time_point_ms timestamp_ms;$/;"	m	struct:different_resolutions	file:
timestamp_s	tests/test_chrono.cpp	/^    time_point_s timestamp_s;$/;"	m	struct:different_resolutions	file:
timestamp_us	tests/test_chrono.cpp	/^    time_point_us timestamp_us;$/;"	m	struct:different_resolutions	file:
tinfo	include/pybind11/detail/type_caster_base.h	/^    const type_vec &tinfo;$/;"	m	struct:values_and_holders
tls_replace_value	include/pybind11/detail/internals.h	/^inline void tls_replace_value(PYBIND11_TLS_KEY_REF key, void *value) {$/;"	f
tmp_chdir	pybind11/setup_helpers.py	/^def tmp_chdir() -> Iterator[str]:$/;"	f
tmp_chdir_lock	pybind11/setup_helpers.py	/^tmp_chdir_lock = threading.Lock()$/;"	v
toString	tests/test_methods_and_attributes.cpp	/^    std::string toString() const { return "ExampleMandA[value=" + std::to_string(value) + "]"; }$/;"	f	class:ExampleMandA
toString	tests/test_operator_overloading.cpp	/^    std::string toString() const {$/;"	f	class:Vector2
toString	tests/test_smart_ptr.cpp	/^    std::string toString() const { return "MyObject2[" + std::to_string(value) + "]"; }$/;"	f	class:__anon9::MyObject2
toString	tests/test_smart_ptr.cpp	/^    std::string toString() const { return "MyObject3[" + std::to_string(value) + "]"; }$/;"	f	class:__anon9::MyObject3
toString	tests/test_smart_ptr.cpp	/^    std::string toString() const {$/;"	f	struct:TypeForHolderWithAddressOf
toString	tests/test_smart_ptr.cpp	/^    std::string toString() const {$/;"	f	struct:TypeForMoveOnlyHolderWithAddressOf
to_src	setup.py	/^to_src = ($/;"	v
todo_include_todos	docs/conf.py	/^todo_include_todos = False$/;"	v
tolower	include/pybind11/detail/common.h	283;"	d
toobig_message	tests/test_builtin_casters.py	/^    def toobig_message(r):$/;"	f	function:test_single_char_arguments
toupper	include/pybind11/detail/common.h	284;"	d
trace	include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope
trace	include/pybind11/pytypes.h	/^    const object &trace() const { return m_fetched_error->m_trace; }$/;"	f	class:handle::error_fetch_and_normalize::error_already_set
track_copy_assigned	tests/constructor_stats.h	/^void track_copy_assigned(T *, Values &&...values) {$/;"	f
track_copy_created	tests/constructor_stats.h	/^void track_copy_created(T *inst) {$/;"	f
track_created	tests/constructor_stats.h	/^void track_created(T *inst, Values &&...values) {$/;"	f
track_default_created	tests/constructor_stats.h	/^void track_default_created(T *inst, Values &&...values) {$/;"	f
track_destroyed	tests/constructor_stats.h	/^void track_destroyed(T *inst) {$/;"	f
track_move_assigned	tests/constructor_stats.h	/^void track_move_assigned(T *, Values &&...values) {$/;"	f
track_move_created	tests/constructor_stats.h	/^void track_move_created(T *inst) {$/;"	f
track_values	tests/constructor_stats.h	/^void track_values(T *, Values &&...values) {$/;"	f
translate_exception	include/pybind11/detail/internals.h	/^inline void translate_exception(std::exception_ptr p) {$/;"	f
translate_local_exception	include/pybind11/detail/internals.h	/^inline void translate_local_exception(std::exception_ptr p) {$/;"	f
traverse_offset_bases	include/pybind11/detail/class.h	/^inline void traverse_offset_bases(void *valueptr,$/;"	f
try_direct_conversions	include/pybind11/cast.h	/^    static bool try_direct_conversions(handle) { return false; }$/;"	f	struct:copyable_holder_caster
try_direct_conversions	include/pybind11/detail/type_caster_base.h	/^    bool try_direct_conversions(handle src) {$/;"	f	class:type_caster_generic
try_get_shared_from_this	include/pybind11/detail/common.h	/^try_get_shared_from_this(std::enable_shared_from_this<T> *holder_value_ptr) {$/;"	f	struct:overload_cast_impl
try_implicit_casts	include/pybind11/cast.h	/^    bool try_implicit_casts(handle src, bool convert) {$/;"	f	struct:copyable_holder_caster
try_implicit_casts	include/pybind11/cast.h	/^    bool try_implicit_casts(handle, bool) {$/;"	f	struct:copyable_holder_caster
try_implicit_casts	include/pybind11/detail/type_caster_base.h	/^    bool try_implicit_casts(handle src, bool convert) {$/;"	f	class:type_caster_generic
try_load_foreign_module_local	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE bool try_load_foreign_module_local(handle src) {$/;"	f	class:type_caster_generic
tstate	include/pybind11/gil.h	/^    PyThreadState *tstate = nullptr;$/;"	m	class:gil_scoped_acquire
tstate	include/pybind11/gil.h	/^    PyThreadState *tstate;$/;"	m	class:gil_scoped_release
tuple	include/pybind11/pytypes.h	/^    explicit tuple(SzType size = 0) : object(PyTuple_New(ssize_t_cast(size)), stolen_t{}) {$/;"	f	class:handle::tuple
tuple	include/pybind11/pytypes.h	/^class tuple : public object {$/;"	c	class:handle
tuple_caster	include/pybind11/cast.h	/^class tuple_caster {$/;"	c
tuple_item	include/pybind11/pytypes.h	/^struct tuple_item {$/;"	s	struct:handle::error_fetch_and_normalize
type	include/pybind11/attr.h	/^    const std::type_info *type = nullptr;$/;"	m	struct:type_record
type	include/pybind11/attr.h	/^    struct type {$/;"	s	struct:call_guard
type	include/pybind11/cast.h	/^    std::string type;$/;"	m	struct:arg_v
type	include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope
type	include/pybind11/detail/internals.h	/^    PyTypeObject *type;$/;"	m	struct:type_info
type	include/pybind11/detail/type_caster_base.h	/^    const detail::type_info *type = nullptr;$/;"	m	struct:value_and_holder
type	include/pybind11/numpy.h	/^    char type;$/;"	m	struct:PyArrayDescr_Proxy
type	include/pybind11/pytypes.h	/^    const object &type() const { return m_fetched_error->m_type; }$/;"	f	class:handle::error_fetch_and_normalize::error_already_set
type	include/pybind11/pytypes.h	/^class type : public object {$/;"	c	class:handle
type_align	include/pybind11/attr.h	/^    size_t type_align = 0;$/;"	m	struct:type_record
type_align	include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info
type_caster	include/pybind11/cast.h	/^class type_caster : public type_caster_base<type> {};$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<T, enable_if_t<is_pyobject<T>::value>> : public pyobject_caster<T> {};$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<bool> {$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<std::nullptr_t> : public void_caster<std::nullptr_t> {};$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<std::pair<T1, T2>> : public tuple_caster<std::pair, T1, T2> {};$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<std::reference_wrapper<type>> {$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<std::shared_ptr<T>> : public copyable_holder_caster<T, std::shared_ptr<T>> {};$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<std::tuple<Ts...>> : public tuple_caster<std::tuple, Ts...> {};$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<std::unique_ptr<type, deleter>>$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<void> : public type_caster<void_type> {$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<void_type> : public void_caster<void_type> {};$/;"	c
type_caster	include/pybind11/cast.h	/^struct type_caster<CharT, enable_if_t<is_std_char_type<CharT>::value>> {$/;"	s
type_caster	include/pybind11/cast.h	/^struct type_caster<T, enable_if_t<std::is_arithmetic<T>::value && !is_std_char_type<T>::value>> {$/;"	s
type_caster	include/pybind11/cast.h	/^struct type_caster<std::basic_string<CharT, Traits, Allocator>,$/;"	s
type_caster	include/pybind11/cast.h	/^struct type_caster<std::basic_string_view<CharT, Traits>,$/;"	s
type_caster	include/pybind11/chrono.h	/^class type_caster<std::chrono::duration<Rep, Period>>$/;"	c
type_caster	include/pybind11/chrono.h	/^class type_caster<std::chrono::time_point<Clock, Duration>>$/;"	c
type_caster	include/pybind11/chrono.h	/^class type_caster<std::chrono::time_point<std::chrono::system_clock, Duration>> {$/;"	c
type_caster	include/pybind11/complex.h	/^class type_caster<std::complex<T>> {$/;"	c
type_caster	include/pybind11/detail/init.h	/^class type_caster<value_and_holder> {$/;"	c
type_caster	include/pybind11/eigen/matrix.h	/^struct type_caster<$/;"	s
type_caster	include/pybind11/eigen/matrix.h	/^struct type_caster<Type, enable_if_t<is_eigen_dense_map<Type>::value>> : eigen_map_caster<Type> {};$/;"	s
type_caster	include/pybind11/eigen/matrix.h	/^struct type_caster<Type, enable_if_t<is_eigen_dense_plain<Type>::value>> {$/;"	s
type_caster	include/pybind11/eigen/matrix.h	/^struct type_caster<Type, enable_if_t<is_eigen_other<Type>::value>> {$/;"	s
type_caster	include/pybind11/eigen/matrix.h	/^struct type_caster<Type, enable_if_t<is_eigen_sparse<Type>::value>> {$/;"	s
type_caster	include/pybind11/eigen/tensor.h	/^struct type_caster<Eigen::TensorMap<Type, Options>,$/;"	s
type_caster	include/pybind11/eigen/tensor.h	/^struct type_caster<Type, typename eigen_tensor_helper<Type>::ValidType> {$/;"	s
type_caster	include/pybind11/functional.h	/^struct type_caster<std::function<Return(Args...)>> {$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::array<Type, Size>>$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::deque<Type, Alloc>> : list_caster<std::deque<Type, Alloc>, Type> {};$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::experimental::nullopt_t>$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::experimental::optional<T>>$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::list<Type, Alloc>> : list_caster<std::list<Type, Alloc>, Type> {};$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::map<Key, Value, Compare, Alloc>>$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::monostate> : public void_caster<std::monostate> {};$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::nullopt_t> : public void_caster<std::nullopt_t> {};$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::optional<T>> : public optional_caster<std::optional<T>> {};$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::set<Key, Compare, Alloc>>$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::unordered_map<Key, Value, Hash, Equal, Alloc>>$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::unordered_set<Key, Hash, Equal, Alloc>>$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::valarray<Type>> : array_caster<std::valarray<Type>, Type, true> {};$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::variant<Ts...>> : variant_caster<std::variant<Ts...>> {};$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::vector<Type, Alloc>> : list_caster<std::vector<Type, Alloc>, Type> {};$/;"	s
type_caster	include/pybind11/stl/filesystem.h	/^struct type_caster<std::experimental::filesystem::path>$/;"	s
type_caster	include/pybind11/stl/filesystem.h	/^struct type_caster<std::filesystem::path> : public path_caster<std::filesystem::path> {};$/;"	s
type_caster	include/pybind11/type_caster_pyobject_ptr.h	/^class type_caster<PyObject> {$/;"	c
type_caster	tests/pybind11_tests.h	/^class type_caster<RValueCaster> {$/;"	c
type_caster	tests/test_builtin_casters.cpp	/^class type_caster<ConstRefCasted> {$/;"	c	file:
type_caster	tests/test_copy_move.cpp	/^struct type_caster<CopyOnlyInt> {$/;"	s	file:
type_caster	tests/test_copy_move.cpp	/^struct type_caster<MoveOnlyInt> {$/;"	s	file:
type_caster	tests/test_copy_move.cpp	/^struct type_caster<MoveOrCopyInt> {$/;"	s	file:
type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<ArgAlwaysConverts> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<ArgInspector1> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<ArgInspector2> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<DestructionTester> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<other_lib::MyType> : public other_lib::my_caster {};$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster	tests/test_stl.cpp	/^struct type_caster<ReferenceSensitiveOptional<T>>$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster	tests/test_stl.cpp	/^struct type_caster<boost::none_t> : void_caster<boost::none_t> {};$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster	tests/test_stl.cpp	/^struct type_caster<boost::optional<T>> : optional_caster<boost::optional<T>> {};$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster_base	include/pybind11/detail/type_caster_base.h	/^    explicit type_caster_base(const std::type_info &info) : type_caster_generic(info) {}$/;"	f	class:type_caster_base
type_caster_base	include/pybind11/detail/type_caster_base.h	/^    type_caster_base() : type_caster_base(typeid(type)) {}$/;"	f	class:type_caster_base
type_caster_base	include/pybind11/detail/type_caster_base.h	/^class type_caster_base : public type_caster_generic {$/;"	c
type_caster_generic	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE explicit type_caster_generic(const std::type_info &type_info)$/;"	f	class:type_caster_generic
type_caster_generic	include/pybind11/detail/type_caster_base.h	/^    explicit type_caster_generic(const type_info *typeinfo)$/;"	f	class:type_caster_generic
type_caster_generic	include/pybind11/detail/type_caster_base.h	/^class type_caster_generic {$/;"	c
type_descr	include/pybind11/detail/descr.h	/^constexpr descr<N + 2, Ts...> type_descr(const descr<N, Ts...> &descr) {$/;"	f
type_id	include/pybind11/detail/typeid.h	/^static std::string type_id() {$/;"	f
type_incref	include/pybind11/detail/class.h	/^inline PyTypeObject *type_incref(PyTypeObject *type) {$/;"	f
type_info	include/pybind11/detail/internals.h	/^struct type_info {$/;"	s
type_info_description	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE std::string type_info_description(const std::type_info &ti) {$/;"	f
type_list	include/pybind11/detail/common.h	/^struct type_list {};$/;"	s
type_num	include/pybind11/numpy.h	/^    int type_num;$/;"	m	struct:PyArrayDescr_Proxy
type_of_kind	tests/test_tagbased_polymorphic.cpp	/^const std::type_info *Animal::type_of_kind(Kind kind) {$/;"	f	class:Animal::Animal
type_record	include/pybind11/attr.h	/^    PYBIND11_NOINLINE type_record()$/;"	f	struct:type_record
type_record	include/pybind11/attr.h	/^struct type_record {$/;"	s
type_size	include/pybind11/attr.h	/^    size_t type_size = 0;$/;"	m	struct:type_record
type_size	include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info
typeinfo	include/pybind11/detail/type_caster_base.h	/^    const type_info *typeinfo = nullptr;$/;"	m	class:type_caster_generic
typeobj	include/pybind11/numpy.h	/^    PyObject *typeobj;$/;"	m	struct:PyArrayDescr_Proxy
types	include/pybind11/detail/descr.h	/^    static constexpr std::array<const std::type_info *, sizeof...(Ts) + 1> types() {$/;"	f	struct:descr
types	include/pybind11/detail/type_caster_base.h	/^        const type_vec *types = nullptr;$/;"	m	struct:values_and_holders::iterator
uint_	tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:PartialStruct	file:
uint_	tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:SimpleStruct	file:
uint_	tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:SimpleStructReordered	file:
unchecked_reference	include/pybind11/numpy.h	/^class unchecked_reference {$/;"	c
undefined_t	include/pybind11/operators.h	/^struct undefined_t {};$/;"	s
unicode_from_fs_native	include/pybind11/stl/filesystem.h	/^    static PyObject *unicode_from_fs_native(const std::string &w) {$/;"	f	struct:path_caster
unicode_from_fs_native	include/pybind11/stl/filesystem.h	/^    static PyObject *unicode_from_fs_native(const std::wstring &w) {$/;"	f	struct:path_caster
unique_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^    explicit unique_ptr_with_addressof_operator(T *p) : impl(p) {}$/;"	f	class:__anon9::unique_ptr_with_addressof_operator
unique_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^class unique_ptr_with_addressof_operator {$/;"	c	namespace:__anon9	file:
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.AR
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.AT
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.BT
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DR
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DT
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DT2
unordered	tests/conftest.py	/^    def unordered(self):$/;"	m	class:Capture
unpacking_collector	include/pybind11/cast.h	/^    explicit unpacking_collector(Ts &&...values) {$/;"	f	class:unpacking_collector
unpacking_collector	include/pybind11/cast.h	/^class unpacking_collector {$/;"	c
unused_loader_patient_stack_remove_at_v5	include/pybind11/detail/internals.h	/^    std::vector<PyObject *> unused_loader_patient_stack_remove_at_v5;$/;"	m	struct:internals
use_multiprocessing_forkserver_on_linux	tests/conftest.py	/^def use_multiprocessing_forkserver_on_linux():$/;"	f
utf8_remainder	include/pybind11/iostream.h	/^    size_t utf8_remainder() const {$/;"	f	class:pythonbuf
v	include/pybind11/detail/common.h	/^    std::vector<T> v;$/;"	m	class:overload_cast_impl::any_container
v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B1
v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B2
v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B3
v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B4
v	tests/test_smart_ptr.cpp	/^    int v;$/;"	m	struct:ElementA	file:
val	tests/test_methods_and_attributes.cpp	/^    int val = -1;$/;"	m	struct:StrIssue	file:
value	include/pybind11/attr.h	/^    callback value;$/;"	m	struct:custom_type_setup
value	include/pybind11/attr.h	/^    const bool value;$/;"	m	struct:module_local
value	include/pybind11/attr.h	/^    const char *value;$/;"	m	struct:doc
value	include/pybind11/attr.h	/^    const char *value;$/;"	m	struct:name
value	include/pybind11/attr.h	/^    handle value;      \/\/\/< Associated Python object$/;"	m	struct:argument_record
value	include/pybind11/attr.h	/^    handle value;$/;"	m	struct:metaclass
value	include/pybind11/attr.h	/^    handle value;$/;"	m	struct:scope
value	include/pybind11/attr.h	/^    handle value;$/;"	m	struct:sibling
value	include/pybind11/cast.h	/^    object value;$/;"	m	struct:arg_v
value	include/pybind11/cast.h	/^    static constexpr bool value = Value;$/;"	m	struct:always_construct_holder
value	include/pybind11/cast.h	/^    void *value = nullptr;$/;"	m	class:type_caster
value	include/pybind11/complex.h	/^                      detail::enable_if_t<std::is_floating_point<T>::value>>::value[3];$/;"	m	class:format_descriptor
value	include/pybind11/complex.h	/^    static constexpr bool value = true;$/;"	m	struct:is_fmt_numeric
value	include/pybind11/complex.h	/^    static constexpr const char value[3] = {'Z', c, '\\0'};$/;"	m	struct:format_descriptor
value	include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope
value	include/pybind11/detail/common.h	/^    format_descriptor<T, detail::enable_if_t<std::is_arithmetic<T>::value>>::value[2];$/;"	m	class:format_descriptor
value	include/pybind11/detail/common.h	/^    static constexpr bool value = false;$/;"	m	struct:is_fmt_numeric
value	include/pybind11/detail/common.h	/^    static constexpr bool value = true;$/;"	m	struct:is_fmt_numeric
value	include/pybind11/detail/common.h	/^    static constexpr const char value[2] = {c, '\\0'};$/;"	m	struct:format_descriptor
value	include/pybind11/detail/init.h	/^    value_and_holder *value = nullptr;$/;"	m	class:type_caster
value	include/pybind11/detail/type_caster_base.h	/^    void *value = nullptr;$/;"	m	class:type_caster_generic
value	include/pybind11/eigen/matrix.h	/^    Type value;$/;"	m	struct:type_caster
value	include/pybind11/eigen/tensor.h	/^        static constexpr auto value = concat(const_name(((void) Is, "?"))...);$/;"	m	struct:eigen_tensor_helper::helper
value	include/pybind11/eigen/tensor.h	/^    static constexpr auto value$/;"	m	struct:get_tensor_descriptor
value	include/pybind11/eigen/tensor.h	/^    std::unique_ptr<MapType> value;$/;"	m	struct:type_caster
value	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void value(char const *name_, object value, const char *doc = nullptr) {$/;"	f	struct:enum_base
value	include/pybind11/pybind11.h	/^    enum_ &value(char const *name, Type value, const char *doc = nullptr) {$/;"	f	class:enum_
value	include/pybind11/pytypes.h	/^    PyObject *key = nullptr, *value = nullptr;$/;"	m	class:handle::dict_readonly
value	include/pybind11/pytypes.h	/^    T value;$/;"	m	struct:handle::error_fetch_and_normalize::arrow_proxy
value	include/pybind11/pytypes.h	/^    const object &value() const { return m_fetched_error->m_value; }$/;"	f	class:handle::error_fetch_and_normalize::error_already_set
value	include/pybind11/pytypes.h	/^    object value = {};$/;"	m	class:handle::iterator
value	include/pybind11/stl_bind.h	/^    static constexpr const bool value = is_comparable<typename T::first_type>::value$/;"	m	struct:is_comparable
value	include/pybind11/type_caster_pyobject_ptr.h	/^    object value;$/;"	m	class:type_caster
value	tests/constructor_stats.h	/^    void value() {} \/\/ Recursion terminator$/;"	f	class:ConstructorStats
value	tests/constructor_stats.h	/^    void value(const T &v, Tmore &&...args) {$/;"	f	class:ConstructorStats
value	tests/pybind11_tests.h	/^    int value() const { return i; }$/;"	f	class:UserType
value	tests/test_builtin_casters.cpp	/^    ConstRefCasted value = {0};$/;"	m	class:type_caster	file:
value	tests/test_copy_move.cpp	/^    CopyOnlyInt value;$/;"	m	struct:type_caster	file:
value	tests/test_copy_move.cpp	/^    int value;$/;"	m	class:CopyOnlyInt	file:
value	tests/test_copy_move.cpp	/^    int value;$/;"	m	class:MoveOnlyInt	file:
value	tests/test_copy_move.cpp	/^    int value;$/;"	m	class:MoveOrCopyInt	file:
value	tests/test_custom_type_setup.cpp	/^    py::object value = py::none();$/;"	m	struct:__anon5::OwnsPythonObjects	file:
value	tests/test_factory_constructors.cpp	/^    int value;$/;"	m	class:TestFactory6	file:
value	tests/test_factory_constructors.cpp	/^    int value;$/;"	m	class:TestFactory7	file:
value	tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory1	file:
value	tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory2	file:
value	tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory3	file:
value	tests/test_methods_and_attributes.cpp	/^    ExampleMandA(ExampleMandA &&e) noexcept : value(e.value) { print_move_created(this); }$/;"	f	class:ExampleMandA
value	tests/test_methods_and_attributes.cpp	/^    int value = 0;$/;"	m	class:ExampleMandA	file:
value	tests/test_methods_and_attributes.cpp	/^    int value = 0;$/;"	m	struct:RefQualified	file:
value	tests/test_methods_and_attributes.cpp	/^    int value = 1;$/;"	m	struct:TestProperties	file:
value	tests/test_methods_and_attributes.cpp	/^    int value = 99;$/;"	m	struct:TestPropertiesOverride	file:
value	tests/test_smart_ptr.cpp	/^    A value = {};$/;"	m	struct:__anon9::SharedPtrRef	file:
value	tests/test_smart_ptr.cpp	/^    B value = {};$/;"	m	namespace:__anon9	file:
value	tests/test_smart_ptr.cpp	/^    int value = 42;$/;"	m	struct:TypeForHolderWithAddressOf	file:
value	tests/test_smart_ptr.cpp	/^    int value() const { return v; }$/;"	f	struct:ElementA
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anon9::MyObject1	file:
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anon9::MyObject2	file:
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anon9::MyObject3	file:
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anon9::MyObject4	file:
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anon9::MyObject4a	file:
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anon9::MyObject5	file:
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	struct:TypeForMoveOnlyHolderWithAddressOf	file:
value	tests/test_stl.cpp	/^    OptionalEnumValue value;$/;"	m	class:OptionalProperties	file:
value	tests/test_stl_binders.cpp	/^    int value;$/;"	m	class:E_nc	file:
value	tests/test_thread.cpp	/^    int value;$/;"	m	struct:__anon2::IntStruct	file:
value	tests/test_virtual_functions.cpp	/^    int value;$/;"	m	class:Movable	file:
value	tests/test_virtual_functions.cpp	/^    std::unique_ptr<int> value;$/;"	m	class:NonCopyable	file:
value_	tests/test_sequences_and_iterators.cpp	/^    NonCopyableInt(NonCopyableInt &&other) noexcept : value_(other.value_) {$/;"	f	class:NonCopyableInt
value_	tests/test_sequences_and_iterators.cpp	/^    int value_;$/;"	m	class:NonCopyableInt	file:
value_and_holder	include/pybind11/detail/type_caster_base.h	/^    explicit value_and_holder(size_t index) : index{index} {}$/;"	f	struct:value_and_holder
value_and_holder	include/pybind11/detail/type_caster_base.h	/^    value_and_holder(instance *i, const detail::type_info *type, size_t vpos, size_t index)$/;"	f	struct:value_and_holder
value_and_holder	include/pybind11/detail/type_caster_base.h	/^struct value_and_holder {$/;"	s
value_ptr	include/pybind11/detail/type_caster_base.h	/^    V *&value_ptr() const {$/;"	f	struct:value_and_holder
values	tests/constructor_stats.h	/^    py::list values() {$/;"	f	class:ConstructorStats
values_and_holders	include/pybind11/detail/common.h	/^    void **values_and_holders;$/;"	m	struct:nonsimple_values_and_holders
values_and_holders	include/pybind11/detail/type_caster_base.h	/^    explicit values_and_holders(instance *inst)$/;"	f	struct:values_and_holders
values_and_holders	include/pybind11/detail/type_caster_base.h	/^struct values_and_holders {$/;"	s
values_view	include/pybind11/stl_bind.h	/^struct values_view {$/;"	s
vanilla	tests/test_multiple_inheritance.cpp	/^    std::string vanilla() { return "Vanilla"; };$/;"	f	struct:__anon10::Vanilla
variant_caster	include/pybind11/stl.h	/^struct variant_caster<V<Ts...>> {$/;"	s
variant_caster_visitor	include/pybind11/stl.h	/^struct variant_caster_visitor {$/;"	s
vec	tests/test_class.cpp	/^    std::vector<int> vec;$/;"	m	struct:NoBraceInitialization	file:
vector	include/pybind11/eigen/matrix.h	/^                          vector$/;"	m	struct:EigenProps
vector	tests/test_opaque_types.cpp	/^PYBIND11_MAKE_OPAQUE(std::vector<std::string, std::allocator<std::string>>);$/;"	v
vector	tests/test_sequences_and_iterators.cpp	/^PYBIND11_MAKE_OPAQUE(std::vector<NonCopyableIntPair>);$/;"	v
vector_accessor	include/pybind11/stl_bind.h	/^void vector_accessor(enable_if_t<!vector_needs_copy<Vector>::value, Class_> &cl) {$/;"	f
vector_accessor	include/pybind11/stl_bind.h	/^void vector_accessor(enable_if_t<vector_needs_copy<Vector>::value, Class_> &cl) {$/;"	f
vector_buffer	include/pybind11/stl_bind.h	/^void vector_buffer(Class_ &cl) {$/;"	f
vector_buffer_impl	include/pybind11/stl_bind.h	/^void vector_buffer_impl(Class_ &, std::false_type) {}$/;"	f
vector_buffer_impl	include/pybind11/stl_bind.h	/^void vector_buffer_impl(Class_ &cl, std::true_type) {$/;"	f
vector_has_data_and_format	include/pybind11/stl_bind.h	/^struct vector_has_data_and_format : std::false_type {};$/;"	s
vector_has_data_and_format	include/pybind11/stl_bind.h	/^struct vector_has_data_and_format<$/;"	s
vector_if_copy_constructible	include/pybind11/stl_bind.h	/^void vector_if_copy_constructible(const Args &...) {}$/;"	f
vector_if_copy_constructible	include/pybind11/stl_bind.h	/^void vector_if_copy_constructible(enable_if_t<is_copy_constructible<Vector>::value, Class_> &cl) {$/;"	f
vector_if_equal_operator	include/pybind11/stl_bind.h	/^void vector_if_equal_operator(const Args &...) {}$/;"	f
vector_if_equal_operator	include/pybind11/stl_bind.h	/^void vector_if_equal_operator(enable_if_t<is_comparable<Vector>::value, Class_> &cl) {$/;"	f
vector_if_insertion_operator	include/pybind11/stl_bind.h	/^void vector_if_insertion_operator(const Args &...) {}$/;"	f
vector_modifiers	include/pybind11/stl_bind.h	/^void vector_modifiers($/;"	f
vector_modifiers	include/pybind11/stl_bind.h	/^void vector_modifiers(const Args &...) {}$/;"	f
vector_unique_ptr_member	tests/test_vector_unique_ptr_member.cpp	/^namespace vector_unique_ptr_member {$/;"	n	namespace:pybind11_tests	file:
version	docs/conf.py	/^version = loc["__version__"]$/;"	v
version	setup.py	/^version = loc["__version__"]$/;"	v
version_hex	setup.py	/^version_hex = matches.get("HEX", "MISSING")$/;"	v
version_info	pybind11/_version.py	/^version_info = tuple(_to_int(s) for s in __version__.split("."))$/;"	v
vh	include/pybind11/detail/type_caster_base.h	/^    void **vh = nullptr;$/;"	m	struct:value_and_holder
view	include/pybind11/buffer_info.h	/^    Py_buffer *&view() { return m_view; }$/;"	f	struct:buffer_info
view	include/pybind11/buffer_info.h	/^    Py_buffer *view() const { return m_view; }$/;"	f	struct:buffer_info
virtual_func	tests/test_gil_scoped.cpp	/^    virtual void virtual_func() {}$/;"	f	class:VirtClass
virtual_func	tests/test_gil_scoped.py	/^    def virtual_func(self):$/;"	m	class:ExtendedVirtClass
visit	include/pybind11/stl.h	/^    static auto call(Args &&...args) -> decltype(visit(std::forward<Args>(args)...)) {$/;"	f	struct:visit_helper
visit_helper	include/pybind11/stl.h	/^struct visit_helper {$/;"	s
void_caster	include/pybind11/cast.h	/^struct void_caster {$/;"	s
void_t_impl	include/pybind11/detail/common.h	/^struct void_t_impl {$/;"	s
void_type	include/pybind11/detail/common.h	/^struct void_type {};$/;"	s
weakref	include/pybind11/pytypes.h	/^    explicit weakref(handle obj, handle callback = {})$/;"	f	class:handle::weakref
weakref	include/pybind11/pytypes.h	/^class weakref : public object {$/;"	c	class:handle
weakrefs	include/pybind11/detail/common.h	/^    PyObject *weakrefs;$/;"	m	struct:instance
wide_char_arg_deleter	include/pybind11/embed.h	/^struct wide_char_arg_deleter {$/;"	s
widen_chars	include/pybind11/embed.h	/^inline wchar_t *widen_chars(const char *safe_arg) {$/;"	f
wrap	tests/test_pickling.cpp	/^void wrap(py::module m) {$/;"	f	namespace:exercise_trampoline
x	tests/test_operator_overloading.cpp	/^    float x, y;$/;"	m	class:Vector2	file:
y	tests/test_enum.py	/^    y = m.UnscopedEnum.ETwo$/;"	v
y	tests/test_operator_overloading.cpp	/^    Vector2(Vector2 &&v) noexcept : x(v.x), y(v.y) {$/;"	f	class:Vector2
y	tests/test_operator_overloading.cpp	/^    float x, y;$/;"	m	class:Vector2	file:
~A	tests/test_smart_ptr.cpp	/^        ~A() { print_destroyed(this); }$/;"	f	struct:__anon9::SharedPtrRef::A
~B	tests/test_smart_ptr.cpp	/^        ~B() { print_destroyed(this); }$/;"	f	struct:__anon9::SharedFromThisRef
~C	tests/test_smart_ptr.cpp	/^    ~C() { print_destroyed(this); }$/;"	f	struct:C
~CopyOnlyInt	tests/test_copy_move.cpp	/^    ~CopyOnlyInt() { print_destroyed(this); }$/;"	f	class:CopyOnlyInt
~CustomAutoGIL	tests/cross_module_gil_utils.cpp	/^    ~CustomAutoGIL() { PyGILState_Release(gstate); }$/;"	f	struct:__anon3::CustomAutoGIL
~CustomAutoNoGIL	tests/cross_module_gil_utils.cpp	/^    ~CustomAutoNoGIL() { PyEval_RestoreThread(save); }$/;"	f	struct:__anon3::CustomAutoNoGIL
~CustomGuard	tests/test_call_policies.cpp	/^    ~CustomGuard() { enabled = false; }$/;"	f	struct:CustomGuard
~DependentGuard	tests/test_call_policies.cpp	/^    ~DependentGuard() { enabled = false; }$/;"	f	struct:DependentGuard
~DestructionTester	tests/test_custom_type_casters.cpp	/^    ~DestructionTester() { print_destroyed(this); }$/;"	f	class:DestructionTester
~ExampleMandA	tests/test_methods_and_attributes.cpp	/^    ~ExampleMandA() { print_destroyed(this); }$/;"	f	class:ExampleMandA
~ExampleVirt	tests/test_virtual_functions.cpp	/^    virtual ~ExampleVirt() { print_destroyed(this); }$/;"	f	class:ExampleVirt
~IntStruct	tests/test_thread.cpp	/^    ~IntStruct() { value = -value; }$/;"	f	struct:__anon2::IntStruct
~Movable	tests/test_virtual_functions.cpp	/^    ~Movable() { print_destroyed(this); }$/;"	f	class:Movable
~MoveOnlyInt	tests/test_copy_move.cpp	/^    ~MoveOnlyInt() { print_destroyed(this); }$/;"	f	class:MoveOnlyInt
~MoveOrCopyInt	tests/test_copy_move.cpp	/^    ~MoveOrCopyInt() { print_destroyed(this); }$/;"	f	class:MoveOrCopyInt
~MyObject2	tests/test_smart_ptr.cpp	/^    virtual ~MyObject2() { print_destroyed(this); }$/;"	f	class:__anon9::MyObject2
~MyObject3	tests/test_smart_ptr.cpp	/^    virtual ~MyObject3() { print_destroyed(this); }$/;"	f	class:__anon9::MyObject3
~MyObject4	tests/test_smart_ptr.cpp	/^    ~MyObject4() {$/;"	f	class:__anon9::MyObject4	file:
~MyObject4a	tests/test_smart_ptr.cpp	/^    virtual ~MyObject4a() {$/;"	f	class:__anon9::MyObject4a
~MyObject5	tests/test_smart_ptr.cpp	/^    ~MyObject5() { print_destroyed(this); }$/;"	f	class:__anon9::MyObject5
~NonCopyable	tests/test_virtual_functions.cpp	/^    ~NonCopyable() { print_destroyed(this); }$/;"	f	class:NonCopyable
~Object	tests/object.h	/^    virtual ~Object() { print_destroyed(this); }$/;"	f	class:Object
~OptionalProperties	tests/test_stl.cpp	/^    ~OptionalProperties() {$/;"	f	class:OptionalProperties
~PythonAlreadySetInDestructor	tests/test_exceptions.cpp	/^    ~PythonAlreadySetInDestructor() {$/;"	f	struct:PythonAlreadySetInDestructor
~PythonCallInDestructor	tests/test_exceptions.cpp	/^    ~PythonCallInDestructor() { d["good"] = true; }$/;"	f	struct:PythonCallInDestructor
~TestFactory1	tests/test_factory_constructors.cpp	/^    ~TestFactory1() { print_destroyed(this); }$/;"	f	class:TestFactory1
~TestFactory2	tests/test_factory_constructors.cpp	/^    ~TestFactory2() { print_destroyed(this); }$/;"	f	class:TestFactory2
~TestFactory3	tests/test_factory_constructors.cpp	/^    virtual ~TestFactory3() { print_destroyed(this); }$/;"	f	class:TestFactory3
~TestFactory6	tests/test_factory_constructors.cpp	/^    virtual ~TestFactory6() { print_destroyed(this); }$/;"	f	class:TestFactory6
~TestFactory7	tests/test_factory_constructors.cpp	/^    virtual ~TestFactory7() { print_destroyed(this); }$/;"	f	class:TestFactory7
~TestThread	tests/test_iostream.cpp	/^    ~TestThread() { delete t_; }$/;"	f	struct:TestThread
~TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    ~TypeForHolderWithAddressOf() { print_destroyed(this); }$/;"	f	struct:TypeForHolderWithAddressOf
~TypeForMoveOnlyHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    ~TypeForMoveOnlyHolderWithAddressOf() { print_destroyed(this); }$/;"	f	struct:TypeForMoveOnlyHolderWithAddressOf
~Vector2	tests/test_operator_overloading.cpp	/^    ~Vector2() { print_destroyed(this); }$/;"	f	class:Vector2
~buffer_info	include/pybind11/buffer_info.h	/^    ~buffer_info() {$/;"	f	struct:buffer_info
~error_scope	include/pybind11/detail/common.h	/^    ~error_scope() { PyErr_Restore(type, value, trace); }$/;"	f	struct:error_scope
~gil_scoped_acquire	include/pybind11/gil.h	/^    PYBIND11_NOINLINE ~gil_scoped_acquire() {$/;"	f	class:gil_scoped_acquire
~gil_scoped_release	include/pybind11/gil.h	/^    ~gil_scoped_release() {$/;"	f	class:gil_scoped_release
~internals	include/pybind11/detail/internals.h	/^    ~internals() {$/;"	f	struct:internals
~loader_life_support	include/pybind11/detail/type_caster_base.h	/^    ~loader_life_support() {$/;"	f	class:loader_life_support
~object	include/pybind11/pytypes.h	/^    ~object() { dec_ref(); }$/;"	f	class:handle::object
~options	include/pybind11/options.h	/^    ~options() { global_state() = previous_state; }$/;"	f	class:options
~ref	tests/object.h	/^    ~ref() {$/;"	f	class:ref
~scoped_interpreter	include/pybind11/embed.h	/^    ~scoped_interpreter() {$/;"	f	class:scoped_interpreter
~scoped_ostream_redirect	include/pybind11/iostream.h	/^    ~scoped_ostream_redirect() { costream.rdbuf(old); }$/;"	f	class:scoped_ostream_redirect
~strdup_guard	include/pybind11/pybind11.h	/^        ~strdup_guard() {$/;"	f	class:cpp_function::strdup_guard
